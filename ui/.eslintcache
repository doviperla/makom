[{"D:\\Apps\\makom\\ui\\src\\components\\NMap.js":"1","D:\\Apps\\makom\\ui\\src\\components\\Cell.js":"2","D:\\Apps\\makom\\ui\\src\\components\\Grid.js":"3","D:\\Apps\\makom\\ui\\src\\index.js":"4","D:\\Apps\\makom\\ui\\src\\utils\\constants.js":"5","D:\\Apps\\makom\\ui\\src\\components\\Loader.js":"6","D:\\Apps\\makom\\ui\\src\\components\\Header.js":"7","D:\\Apps\\makom\\ui\\src\\components\\Toolbar.js":"8","D:\\Apps\\makom\\ui\\src\\components\\Home.js":"9","D:\\Apps\\makom\\ui\\src\\components\\Map.js":"10","D:\\Apps\\makom\\ui\\src\\components\\Login.js":"11","D:\\Apps\\makom\\ui\\src\\App.js":"12","D:\\Apps\\makom\\ui\\src\\reportWebVitals.js":"13","D:\\Apps\\makom\\ui\\src\\components\\PrintScreen.js":"14"},{"size":37843,"mtime":1655039698490,"results":"15","hashOfConfig":"16"},{"size":2575,"mtime":1654690350402,"results":"17","hashOfConfig":"16"},{"size":35894,"mtime":1655035455000,"results":"18","hashOfConfig":"16"},{"size":640,"mtime":1654673850694,"results":"19","hashOfConfig":"16"},{"size":1970,"mtime":1654178588370,"results":"20","hashOfConfig":"16"},{"size":623,"mtime":1654675556424,"results":"21","hashOfConfig":"16"},{"size":2119,"mtime":1655040054426,"results":"22","hashOfConfig":"16"},{"size":24108,"mtime":1654685252913,"results":"23","hashOfConfig":"16"},{"size":48057,"mtime":1654580680069,"results":"24","hashOfConfig":"16"},{"size":31125,"mtime":1646311960828,"results":"25","hashOfConfig":"16"},{"size":5149,"mtime":1653841729966,"results":"26","hashOfConfig":"16"},{"size":1291,"mtime":1649771893751,"results":"27","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"16"},{"size":10990,"mtime":1655622888472,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"1cg0ag3",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":8,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"D:\\Apps\\makom\\ui\\src\\components\\NMap.js",["63","64","65","66","67","68","69","70","71","72","73","74","75","76","77"],"import React from 'react';\r\nimport {\r\n    Dropdown,\r\n    List,\r\n    Button,\r\n    Input,\r\n    Modal,\r\n    Header,\r\n    Message,\r\n    Label,\r\n    Icon\r\n} from 'semantic-ui-react';\r\nimport { Grid } from './Grid'\r\nimport { AppHeader } from './Header';\r\nimport { Loader } from './Loader';\r\nimport { Redirect } from 'react-router-dom';\r\nimport '../index.css';\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\nimport { get_lists, get_pepole_data, update_map, get_map } from '../services/map.service';\r\nimport { Route } from 'react-router-dom';\r\nimport { PrintScreen } from './PrintScreen'\r\n\r\n\r\nexport class NMapPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selected_keys: [0],\r\n            mouse_click: false,\r\n            turim: [],\r\n            merge_cells: [],\r\n            cells_style: [],\r\n            text_cells: [],\r\n            display_fontsize_dropdown: 'none',\r\n            display_text_color_dropdown: 'none',\r\n            display_bg_color_dropdown: 'none',\r\n            display_h_align_dropdown: 'none',\r\n            display_v_align_dropdown: 'none',\r\n            sidebar_visible: false,\r\n            pepole_list_data: [],\r\n            pepole_data: [],\r\n            selected_year: '',\r\n            selected_time: '',\r\n            selected_gender: '',\r\n            selected_pepole_data: [],\r\n            selected_pepole_data_source: [],\r\n            user: null,\r\n            is_loading: true,\r\n            copy_modal_visible: false,\r\n            copy_selected_year: '',\r\n            copy_selected_time: '',\r\n            copy_selected_gender: \"\",\r\n            print_mode: false,\r\n            numbers_of_cells_in_row: 100,\r\n            number_of_cells: 10000,\r\n            print_data: {},\r\n            error: null,\r\n            count_of_pepole: 0,\r\n            show_tooltips: [true, true, true, true, true],\r\n            openDeleteModel: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            // document.addEventListener(\"keydown\", this.key_press.bind(this));\r\n            let user = localStorage.getItem('user_data');\r\n\r\n            if (!user) {\r\n                <Redirect\r\n                    to={{\r\n                        pathname: '/login',\r\n                    }}\r\n                />\r\n            }\r\n            user = JSON.parse(user).user;\r\n            const res = await get_lists(user);\r\n\r\n            this.setState({ pepole_list_data: res.data.pepole_lists, user: user, is_loading: false })\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    render_index_rows = () => {\r\n        const print_data = this.state.print_data;\r\n        let gridTemplateRows = '';\r\n        for (let index = 0; index < print_data.sum_rows; index++) {\r\n            gridTemplateRows += `${print_data.cell_height}px `\r\n        }\r\n        let style = {\r\n            display: 'grid',\r\n            gridTemplateColumns: `${print_data.cell_width}px`,\r\n            gridTemplateRows: gridTemplateRows,\r\n        }\r\n        return <div style={style}>\r\n            {\r\n                this.render_index_row()\r\n            }\r\n        </div>\r\n    }\r\n\r\n    render_index_row = () => {\r\n        let coulmns = [];\r\n        const print_data = this.state.print_data;\r\n        const style = {\r\n            backgroundColor: 'gray',\r\n            color: 'white',\r\n            border: '1px solid #A5A5A5',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        }\r\n        for (let index = 0; index < print_data.sum_rows; index++) {\r\n            coulmns.push(<div tabIndex=\"0\"\r\n                style={style}>\r\n                {index + 1}\r\n                {/* {key} */}\r\n            </div>)\r\n        }\r\n        return coulmns;\r\n    }\r\n\r\n    render_index_coulmns = () => {\r\n        const print_data = this.state.print_data;\r\n        let gridTemplateColumns = '';\r\n        for (let index = 0; index <= print_data.sum_coulmns; index++) {\r\n            gridTemplateColumns += `${print_data.cell_width}px `\r\n        }\r\n        let style = {\r\n            display: 'grid',\r\n            gridTemplateColumns: gridTemplateColumns,\r\n            gridTemplateRows: `${print_data.cell_height}px`,\r\n\r\n        }\r\n        return <div style={style}>\r\n            {\r\n                this.render_index_coulmn()\r\n            }\r\n        </div>\r\n    }\r\n\r\n    render_index_coulmn = () => {\r\n        let coulmns = [];\r\n        const print_data = this.state.print_data;\r\n        const text_coulmns = print_data.coulmns;\r\n        console.log(text_coulmns);\r\n        const style = {\r\n            backgroundColor: 'gray',\r\n            color: 'white',\r\n            border: '1px solid #A5A5A5',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        }\r\n        //insert first empty coulmn\r\n        coulmns.push(<div tabIndex=\"0\" style={style}></div>)\r\n\r\n        for (let index = 0; index <= print_data.sum_coulmns; index++) {\r\n            coulmns.push(<div tabIndex=\"0\"\r\n                style={style}>\r\n                {text_coulmns.includes(index) ? this.gematriya(print_data.sum_coulmns - (index + 1)) : ''}\r\n            </div>)\r\n        }\r\n        return coulmns;\r\n    }\r\n\r\n    gematriya = (number) => {\r\n        const gematriya_obj = {\r\n            1: 'א', 2: 'ב', 3: 'ג', 4: 'ד', 5: 'ה', 6: 'ו', 7: 'ז', 8: 'ח', 9: 'ט', 10: 'י',\r\n            11: 'יא', 12: 'יב', 13: 'יג', 14: 'יד', 15: 'טו', 16: 'טז', 17: 'יז', 18: 'יח', 19: 'יט', 20: 'כ',\r\n            21: 'כא', 22: 'כב', 23: 'כג', 24: 'כד', 25: 'כה', 26: 'כו', 27: 'כז', 28: 'כח', 29: 'כט', 30: 'ל',\r\n            31: 'לא', 32: 'לב', 33: 'לג', 34: 'לד', 35: 'לה', 36: 'לו', 37: 'לז', 38: 'לח', 39: 'לט', 40: 'מ',\r\n            41: 'מא', 42: 'מב', 43: 'מג', 44: 'מד', 45: 'מה', 46: 'מו', 47: 'מז', 48: 'מח', 49: 'מט', 50: 'נ'\r\n        }\r\n\r\n        return gematriya_obj[number];\r\n    }\r\n\r\n    render_print_container = () => {\r\n        const print_data = this.state.print_data;\r\n        let gridTemplateColumns = '';\r\n        let gridTemplateRows = '';\r\n\r\n        for (let index = 0; index < print_data.sum_coulmns; index++) {\r\n            gridTemplateColumns += `${print_data.cell_width}px `\r\n        }\r\n        for (let index = 0; index < print_data.sum_rows; index++) {\r\n            gridTemplateRows += `${print_data.cell_height}px `\r\n        }\r\n\r\n        let style = {\r\n            display: 'grid',\r\n            gridTemplateColumns: gridTemplateColumns,\r\n            gridTemplateRows: gridTemplateRows\r\n        }\r\n        return <div style={style}>\r\n            {\r\n                this.render_print_grid()\r\n            }\r\n        </div>\r\n    }\r\n\r\n    render_print_grid = () => {\r\n        let coulmns = [];\r\n        const print_data = this.state.print_data;\r\n        let cells = [];\r\n        const start_row = Math.min(...print_data.rows);\r\n        const end_row = Math.max(...print_data.rows);\r\n        const start_coulmn = Math.min(...print_data.coulmns);\r\n        const end_coulmn = Math.max(...print_data.coulmns);\r\n\r\n        let style = {};\r\n\r\n        style.border = '1px solid #A5A5A5';\r\n        style.display = 'flex';\r\n        style.justifyContent = 'center';\r\n        style.alignItems = 'center';\r\n\r\n        for (let row = start_row; row <= end_row; row++) {\r\n            for (let col = start_coulmn; col <= end_coulmn; col++) {\r\n                cells.push((row * this.state.numbers_of_cells_in_row) + col)\r\n            }\r\n        }\r\n        cells = cells.sort((a, b) => { return a - b });\r\n        console.log(cells);\r\n        console.log(this.state.merge_cells)\r\n        for (let index = 0; index < cells.length; index++) {\r\n            coulmns.push(\r\n                this.render_print_coulmn(cells[index])\r\n            );\r\n        }\r\n        return coulmns;\r\n    }\r\n\r\n    render_print_coulmn = (cell) => {\r\n        const merge_cell = this.state.merge_cells.find(c => c.key === cell);\r\n        //ignore keys of cells that spans by mrege cell\r\n        if (this.state.merge_cells.find(c => c.ignore_cells.includes(cell)))\r\n            return\r\n        let style = this.get_style(cell);\r\n\r\n        style.border = '1px solid #A5A5A5';\r\n\r\n        if (!style.display) {\r\n            style.display = 'flex';\r\n            style.justifyContent = 'center';\r\n            style.alignItems = 'center';\r\n        }\r\n\r\n        if (merge_cell) {\r\n            style.gridColumn = `span ${merge_cell.coulmns}`;\r\n            style.gridRow = `span ${merge_cell.rows}`;\r\n        }\r\n        return <div key={cell} tabIndex=\"0\"\r\n            style={style}>\r\n            {this.get_text(cell)}\r\n            {/* {key} */}\r\n        </div>\r\n    }\r\n\r\n    _get_selected_cell_style = (style_key) => {\r\n        const key = this.state.selected_keys[0];\r\n        if (key) {\r\n            const selected_cell_style = this.state.cells_style.find(c => c.key == key);\r\n            if (selected_cell_style && selected_cell_style[style_key])\r\n                return selected_cell_style[style_key]\r\n            else\r\n                return ''\r\n        }\r\n        return '';\r\n    }\r\n\r\n    get_text = (key) => {\r\n        const text_cell = this.state.text_cells.find(c => c.key === key);\r\n        if (!text_cell)\r\n            return '';\r\n        if (text_cell.selected_pepole)\r\n            return text_cell.selected_pepole.name\r\n        return text_cell.text;\r\n    }\r\n\r\n    create_toast = (message) => {\r\n        toast({\r\n            type: 'warning',\r\n            icon: '',\r\n            title: 'שים לב',\r\n            description: message,\r\n            animation: 'bounce',\r\n            time: 5000,\r\n        });\r\n    }\r\n\r\n    _show_sidebar = () => {\r\n        this.setState({ sidebar_visible: true });\r\n    }\r\n\r\n    _get_years = () => {\r\n        return this.state.pepole_list_data.length > 0 ? this.state.pepole_list_data.map((p, index) => {\r\n            return { key: index, value: p.id, text: p.name }\r\n        }) : [];\r\n    }\r\n\r\n    _change_selected_pepole_data = async () => {\r\n        try {\r\n            this.setState({ error: null, is_loading: true })\r\n            const response = await get_pepole_data(this.state.user.token, this.state.selected_year);\r\n            if (response.data.success) {\r\n                let pepole_data = response.data.pepole_data;\r\n                let men = false;\r\n                let rosh_hashana = false;\r\n\r\n                if (this.state.selected_gender === 'men') {\r\n                    men = true;\r\n                    if (this.state.selected_time === \"rosh_ashana\") {\r\n                        rosh_hashana = true;\r\n                        pepole_data = pepole_data.filter(p => p.mens_rosh_ashana)\r\n                    }\r\n                    if (this.state.selected_time === \"kipur\") {\r\n                        pepole_data = pepole_data.filter(p => p.mens_kipur)\r\n                    }\r\n                }\r\n                if (this.state.selected_gender === 'women') {\r\n                    if (this.state.selected_time === \"rosh_ashana\") {\r\n                        rosh_hashana = true;\r\n                        pepole_data = pepole_data.filter(p => p.womens_rosh_ashana)\r\n                    }\r\n                    if (this.state.selected_time === \"kipur\") {\r\n                        pepole_data = pepole_data.filter(p => p.womens_kipur)\r\n                    }\r\n                }\r\n\r\n                pepole_data = pepole_data.map(p => {\r\n                    if (men) {\r\n                        if (rosh_hashana)\r\n                            return { key: p.id, name: `הרב ${p.first_name} ${p.last_name}`, value: p.mens_rosh_ashana, comments: p.comments }\r\n                        else\r\n                            return { key: p.id, name: `הרב ${p.first_name} ${p.last_name}`, value: p.mens_kipur, comments: p.comments }\r\n                    }\r\n                    else {\r\n                        if (rosh_hashana)\r\n                            return { key: p.id, name: `גברת ${p.wife_name ? p.wife_name[0] : ''} ${p.last_name}`, value: p.womens_rosh_ashana, comments: p.comments }\r\n                        else\r\n                            return { key: p.id, name: `גברת ${p.wife_name ? p.wife_name[0] : ''} ${p.last_name}`, value: p.womens_kipur, comments: p.comments }\r\n                    }\r\n                })\r\n\r\n                let merge_cells = this.state.merge_cells;\r\n                let cells_style = this.state.cells_style;\r\n                let text_cells = this.state.text_cells;\r\n\r\n                const res = await get_map(this.state.user, this.state.selected_year, this.state.selected_gender, this.state.selected_time);\r\n                if (res.data.map) {\r\n                    const map = JSON.parse(res.data.map);\r\n                    merge_cells = map.merge_cells;\r\n                    cells_style = map.cells_style;\r\n                    text_cells = map.text_cells;\r\n                }\r\n                let count_of_pepole = 0;\r\n                for (let index = 0; index < pepole_data.length; index++) {\r\n                    const pepole_in_map = text_cells.filter(cell => cell.selected_pepole?.key === pepole_data[index].key)\r\n\r\n                    pepole_data[index].value = pepole_data[index].value - pepole_in_map.length;\r\n\r\n                    count_of_pepole += pepole_data[index].value;\r\n                }\r\n\r\n                this.setState({\r\n                    selected_pepole_data: pepole_data, selected_pepole_data_source: pepole_data, sidebar_visible: true,\r\n                    merge_cells: merge_cells, cells_style: cells_style, text_cells: text_cells, is_loading: false,\r\n                    count_of_pepole: count_of_pepole\r\n                });\r\n            }\r\n            else\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", is_loading: false });\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", is_loading: false });\r\n            console.error('There was an error!', error);\r\n        }\r\n\r\n    }\r\n\r\n    _handleSearchChange = (e, data) => {\r\n        const selected_pepole_data = this.state.selected_pepole_data_source;\r\n        if (data.value.length == 0) {\r\n            this.setState({ selected_pepole_data: selected_pepole_data })\r\n            return\r\n        }\r\n        const results_pepole_data = selected_pepole_data.filter(p => p.name.includes(data.value));\r\n        this.setState({ selected_pepole_data: results_pepole_data })\r\n    }\r\n\r\n    _deleteMap = async () => {\r\n        try {\r\n            const map = {\r\n                merge_cells: [],\r\n                cells_style: [],\r\n                text_cells: [],\r\n            }\r\n\r\n            let selected_pepole_data = this.state.selected_pepole_data;\r\n            let count_of_pepole = this.state.count_of_pepole;\r\n\r\n            this.setState({ is_loading: true, error: null });\r\n            const response = await update_map(this.state.user, this.state.selected_year, this.state.selected_gender, this.state.selected_time, JSON.stringify(map));\r\n            if (!response.data.success) {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n            }\r\n            //retrun pepule to list\r\n            for (let index = 0; index < this.state.text_cells.length; index++) {\r\n                const text_cell = this.state.text_cells[index];\r\n                if (text_cell.selected_pepole) {\r\n                    let selected = selected_pepole_data.find(p => p.key === text_cell.selected_pepole.key)\r\n                    selected.value = selected.value + 1;\r\n                    count_of_pepole++;\r\n                }\r\n            }\r\n\r\n            this.setState({ is_loading: false, merge_cells: [], cells_style: [], text_cells: [], selected_pepole_data: selected_pepole_data, count_of_pepole: count_of_pepole })\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", is_loading: false });\r\n            console.error('There was an error!', error);\r\n        }\r\n    }\r\n\r\n    _saveChanges = async () => {\r\n        try {\r\n            const map = {\r\n                merge_cells: this.state.merge_cells,\r\n                cells_style: this.state.cells_style,\r\n                text_cells: this.state.text_cells,\r\n            }\r\n\r\n            this.setState({ is_loading: true, error: null });\r\n            const response = await update_map(this.state.user, this.state.selected_year, this.state.selected_gender, this.state.selected_time, JSON.stringify(map));\r\n            if (!response.data.success) {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n            }\r\n            this.setState({ is_loading: false })\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", is_loading: false });\r\n            console.error('There was an error!', error);\r\n        }\r\n    }\r\n\r\n    _print = async () => {\r\n        //hide all parts in screen\r\n        this.setState({ print_mode: true, is_loading: true })\r\n        //calculate screen width and height\r\n        const screen_width = window.innerWidth;\r\n        const screen_height = window.innerHeight;\r\n        //get number of coulmns and spaces between coulmns\r\n        let coulmns = [];\r\n        let rows = [];\r\n        let cells = [];\r\n        for (let index = 0; index < this.state.text_cells.length; index++) {\r\n            cells.push(this.state.text_cells[index].key)\r\n        }\r\n        for (let index = 0; index < this.state.cells_style.length; index++) {\r\n            if (!cells.includes(this.state.cells_style[index].key))\r\n                cells.push(this.state.cells_style[index].key)\r\n        }\r\n\r\n        for (let index = 0; index < this.state.merge_cells.length; index++) {\r\n            const merge_cell = this.state.merge_cells[index];\r\n            if (!cells.includes(this.state.merge_cells[index].key))\r\n                cells.push(this.state.merge_cells[index].key)\r\n            for (let ignore_cell_index = 0; ignore_cell_index < merge_cell.ignore_cells.length; ignore_cell_index++) {\r\n                if (!cells.includes(merge_cell.ignore_cells[ignore_cell_index]))\r\n                    cells.push(merge_cell.ignore_cells[ignore_cell_index])\r\n            }\r\n        }\r\n        //const cells = this._array_unique([...this.state.merge_cells.map(m => m.key), ...this.state.text_cells.map(t => t.key), ...this.state.cells_style.map(s => s.key)])\r\n        cells = cells.sort((a, b) => { return a - b });\r\n        console.log(cells)\r\n        for (let index = 0; index < cells.length; index++) {\r\n            const cell_number = cells[index];\r\n            const coulmn = (cell_number % this.state.numbers_of_cells_in_row);\r\n            const row = Math.round(cell_number / this.state.numbers_of_cells_in_row);\r\n            if (!coulmns.includes(coulmn))\r\n                coulmns.push(coulmn);\r\n            if (!rows.includes(row))\r\n                rows.push(row);\r\n        }\r\n        console.log(rows);\r\n        console.log(coulmns);\r\n        const coulmns_spaces = this._calc_spaces(coulmns);\r\n        const rows_spaces = this._calc_spaces(rows);\r\n\r\n        const sum_coulmns = coulmns.length + coulmns_spaces.length;\r\n        const sum_rows = rows.length + rows_spaces.length;\r\n\r\n        //calculate size of cell, add one more coulmn and one more row to index, - 100px to header\r\n        const cell_width = Math.round(screen_width / (sum_coulmns + 1));\r\n        const cell_height = Math.round((screen_height - 100) / (sum_rows + 1));\r\n\r\n        const print_data = {\r\n            cell_width: cell_width,\r\n            cell_height: cell_height,\r\n            sum_coulmns: sum_coulmns,\r\n            sum_rows: sum_rows,\r\n            coulmns: coulmns,\r\n            rows: rows\r\n        }\r\n\r\n        this.setState({ print_data: print_data, is_loading: false });\r\n    }\r\n\r\n    _calc_spaces = (array) => {\r\n        let spaces = [];\r\n        array = array.sort((a, b) => { return a - b });\r\n        for (let index = 0; index < array.length; index++) {\r\n            if (index < array.length - 1) {\r\n                let gap = array[index + 1] - array[index];\r\n                if (gap > 1) {\r\n                    for (let g = 1; g < gap; g++) {\r\n                        spaces.push(array[index] + 1)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return spaces;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const times_options = [{ key: 'rosh_ashana', value: 'rosh_ashana', text: \"ראש השנה\" }, { key: 'kipur', value: 'kipur', text: \"יום כיפור\" }]\r\n        const gender_options = [{ key: 'men', value: 'men', text: 'גברים' }, { key: 'women', value: 'women', text: 'נשים' }]\r\n        const list_height = (window.outerHeight * 0.8) + 'px'\r\n        return (\r\n            <div >\r\n                {this.state.is_loading &&\r\n                    <Loader />\r\n                }\r\n\r\n                <SemanticToastContainer position=\"top-left\" />\r\n\r\n                <div>\r\n                    <div style={{ width: '100%' }}>\r\n                        <AppHeader user={this.state.user} print_mode={this.state.print_mode} selected_time={this.selected_time}\r\n                            pepole_list_data={this.state.pepole_list_data}\r\n                            selected_year={this.state.selected_year} />\r\n                        {!this.state.print_mode &&\r\n                            <section>\r\n                                <section className=\"functions-row\">\r\n                                    <div className=\"ddl-row\">\r\n                                        <Dropdown selection placeholder='שנה'\r\n                                            onChange={(event, data) => {\r\n                                                console.log(data.value)\r\n                                                this.setState({ selected_year: data.value }, () => {\r\n                                                    if (this.state.selected_year != '' && this.state.selected_time != '' && this.state.selected_gender != '')\r\n                                                        this._change_selected_pepole_data();\r\n                                                })\r\n                                            }} options={this._get_years()} />\r\n                                        <Dropdown selection placeholder='ר\"ה\\יוהכ\"פ' options={times_options} onChange={(event, data) => {\r\n                                            this.setState({ selected_time: data.value }, () => {\r\n                                                if (this.state.selected_year != '' && this.state.selected_time != '' && this.state.selected_gender != '')\r\n                                                    this._change_selected_pepole_data();\r\n                                            })\r\n                                        }} />\r\n                                        <Dropdown selection placeholder='גברים\\נשים' options={gender_options} onChange={(event, data) => {\r\n                                            this.setState({ selected_gender: data.value }, () => {\r\n                                                if (this.state.selected_year != '' && this.state.selected_time != '' && this.state.selected_gender != '')\r\n                                                    this._change_selected_pepole_data();\r\n                                            })\r\n                                        }} />\r\n                                    </div>\r\n                                    <div>\r\n                                        <Button onClick={this._saveChanges} style={{ backgroundColor: '#FAAF40', color: 'white' }} disabled={this.state.selected_pepole_data.length > 0 ? false : true}\r\n                                        >\r\n                                            <Icon name='save outline' />\r\n                                            שמירה\r\n\r\n                                        </Button>\r\n                                        <Button onClick={() => this.setState({ openDeleteModel: true })} style={{ backgroundColor: '#FAAF40', color: 'white' }} disabled={this.state.selected_pepole_data.length > 0 ? false : true}\r\n                                        >\r\n                                            <Icon name='remove circle' />\r\n                                            מחק מפה\r\n\r\n                                        </Button>\r\n                                        <Button onClick={() => this.setState({ copy_modal_visible: true })} style={{ backgroundColor: '#FAAF40', color: 'white' }} disabled={this.state.selected_pepole_data.length > 0 ? false : true}\r\n                                        >\r\n                                            <Icon name='copy outline' />\r\n                                            העתקת מפה\r\n                                        </Button>\r\n                                        <Button onClick={this._print} style={{ backgroundColor: '#FAAF40', color: 'white' }}\r\n                                            disabled={this.state.selected_pepole_data.length > 0 ? false : true}\r\n                                        >\r\n                                            <Icon name='print' />\r\n                                            הדפסה\r\n                                        </Button>\r\n                                        <Route render={({ history }) => (\r\n                                            <Button style={{ direction: 'rtl', backgroundColor: '#FAAF40', color: 'white' }} onClick={() => {\r\n                                                history.push('/list')\r\n                                            }}\r\n                                            >\r\n                                                מעבר לרשימות\r\n                                                <Icon name='list' />\r\n                                            </Button>\r\n                                        )} />\r\n                                    </div>\r\n                                </section>\r\n                                <section>\r\n                                    {this.state.error != null &&\r\n                                        <Message\r\n                                            error\r\n                                            header=' שגיאה '\r\n                                            content={this.state.error}\r\n                                        />\r\n                                    }\r\n                                </section>\r\n                                <section style={{ display: 'flex' }}>\r\n                                    {this.state.sidebar_visible &&\r\n                                        <div icon=\"labeled\" style={{ textAlign: 'center', position: 'sticky', alignSelf: 'flex-start', top: '0px' }}>\r\n                                            <div className=\"search\">\r\n                                                <Input icon='search' iconPosition='left' placeholder='חיפוש'\r\n                                                    onChange={this._handleSearchChange}></Input>\r\n                                                <Label style={{ fontSize: 'larger', color: '#4B89FF' }}>{this.state.count_of_pepole}</Label>\r\n                                            </div>\r\n                                            <List divided relaxed style={{ overflowY: \"scroll\", height: list_height, cursor: 'pointer' }}>\r\n                                                {\r\n                                                    this.state.selected_pepole_data.map(s =>\r\n                                                        <List.Item value={s.key} key={s.key} onClick={(event, data) => {\r\n                                                            const key = data.value\r\n                                                            let selected_pepole_data = this.state.selected_pepole_data;\r\n                                                            let text_cells = this.state.text_cells;\r\n                                                            let selected_pepole = selected_pepole_data.find(p => p.key == key)\r\n                                                            let count_of_pepole = this.state.count_of_pepole;\r\n                                                            if (selected_pepole.value > 0) {\r\n                                                                selected_pepole.value--;\r\n                                                                count_of_pepole = count_of_pepole - 1;\r\n                                                                if (this.state.selected_keys.length == 1) {\r\n                                                                    const cell_key = this.state.selected_keys[0];\r\n                                                                    let selected_text_cell = text_cells.find(c => c.key === cell_key);\r\n                                                                    if (selected_text_cell) {\r\n                                                                        if (selected_text_cell.selected_pepole) {\r\n                                                                            selected_pepole_data.find(p => p.key == selected_text_cell.selected_pepole.key).value++;\r\n                                                                        }\r\n                                                                        selected_text_cell.selected_pepole = selected_pepole;\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        selected_text_cell = { key: cell_key, text: '', selected_pepole: selected_pepole }\r\n                                                                        text_cells.push(selected_text_cell);\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                            this.setState({ selected_pepole_data: selected_pepole_data, text_cells: text_cells, count_of_pepole: count_of_pepole })\r\n                                                        }}>\r\n                                                            {`${s.name} : ${s.value}`}\r\n                                                        </List.Item>\r\n                                                    )\r\n                                                }\r\n                                            </List>\r\n\r\n                                        </div>\r\n                                    }\r\n                                    <div>\r\n                                        <Grid\r\n                                            selected_pepole_data={this.state.selected_pepole_data}\r\n                                            sidebar_visible={this.state.sidebar_visible}\r\n                                            count_of_pepole={this.state.count_of_pepole}\r\n                                            text_cells={this.state.text_cells}\r\n                                            update_state={(state) => {\r\n                                                this.setState(state)\r\n                                            }}\r\n                                            merge_cells={this.state.merge_cells}\r\n                                            selected_keys={this.state.selected_keys}\r\n                                            cells_style={this.state.cells_style}\r\n                                            on_clear_cell={(count_of_pepole) => {\r\n                                                if (count_of_pepole != this.state.count_of_pepole)\r\n                                                    this.setState({ count_of_pepole: count_of_pepole })\r\n                                            }}\r\n                                        >\r\n                                        </Grid>\r\n                                    </div>\r\n                                </section>\r\n                            </section>\r\n                        }\r\n                        {this.state.print_mode &&\r\n                            <PrintScreen user={this.state.user}\r\n                                pepole_list_data={this.state.pepole_list_data}\r\n                                selected_time={this.state.selected_time}\r\n                                selected_year={this.state.selected_year}\r\n                                numbers_of_cells_in_row={this.state.numbers_of_cells_in_row}\r\n                                merge_cells={this.state.merge_cells}\r\n                                print_data={this.state.print_data}\r\n                                cells_style={this.state.cells_style}\r\n                                text_cells={this.state.text_cells}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <Modal closeIcon={true} dimmer={'blurring'} style={{ textAlign: 'right' }}\r\n                    onClose={() => {\r\n                        this.setState({ openDeleteModel: false });\r\n                    }}\r\n                    open={this.state.openDeleteModel}>\r\n                    <Modal.Header>\r\n                        מחיקת מפה\r\n                    </Modal.Header>\r\n                    <Modal.Content >\r\n                        ?מחיקת הרשימה תמחוק את כל נתוני המפה, האם תרצה להמשיך\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            content=\"כן\"\r\n                            labelPosition='right'\r\n                            icon='checkmark'\r\n                            onClick={this._deleteMap}\r\n                            positive\r\n                        />\r\n                        <Button color='black' onClick={() => this.setState({ openDeleteModel: false })}>\r\n                            לא\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n\r\n                <Modal className='copy_modal'\r\n                    onClose={() => this.setState({ copy_modal_visible: false })}\r\n                    open={this.state.copy_modal_visible}\r\n                >\r\n                    <Modal.Header>העתקת מפה</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            <Header>העתק מפה מ - </Header>\r\n                            <div>\r\n                                <Dropdown selection placeholder='שנה'\r\n                                    onChange={(event, data) => {\r\n                                        this.setState({ copy_selected_year: data.value })\r\n                                    }} options={this._get_years()} />\r\n                                <Dropdown selection placeholder='ר\"ה\\יוהכ\"פ' options={times_options}\r\n                                    onChange={(event, data) => {\r\n                                        this.setState({ copy_selected_time: data.value })\r\n                                    }} />\r\n                                <Dropdown selection placeholder='גברים\\נשים' options={gender_options}\r\n                                    onChange={(event, data) => {\r\n                                        this.setState({ copy_selected_gender: data.value })\r\n                                    }} />\r\n                            </div>\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions className='copy_modal_actions'>\r\n                        <Button color='black' onClick={() => this.setState({ copy_modal_visible: false })}>\r\n                            בטל\r\n                        </Button>\r\n                        <Button\r\n                            content=\"העתק\"\r\n                            labelPosition='left'\r\n                            icon='checkmark'\r\n                            onClick={async () => {\r\n                                let merge_cells = this.state.merge_cells;\r\n                                let cells_style = this.state.cells_style;\r\n                                let text_cells = this.state.text_cells;\r\n                                this.setState({ is_loading: true })\r\n                                const res = await get_map(this.state.user, this.state.copy_selected_year,\r\n                                    this.state.copy_selected_gender, this.state.copy_selected_time);\r\n\r\n                                const map = JSON.parse(res.data.map);\r\n                                merge_cells = map.merge_cells;\r\n                                cells_style = map.cells_style;\r\n                                text_cells = map.text_cells;\r\n\r\n\r\n                                this.setState({\r\n                                    copy_modal_visible: false, merge_cells: merge_cells, cells_style: cells_style,\r\n                                    text_cells: text_cells, is_loading: false\r\n                                });\r\n                            }}\r\n                            positive\r\n                        />\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}","D:\\Apps\\makom\\ui\\src\\components\\Cell.js",[],"D:\\Apps\\makom\\ui\\src\\components\\Grid.js",["78"],"D:\\Apps\\makom\\ui\\src\\index.js",[],"D:\\Apps\\makom\\ui\\src\\utils\\constants.js",[],"D:\\Apps\\makom\\ui\\src\\components\\Loader.js",["79"],"D:\\Apps\\makom\\ui\\src\\components\\Header.js",["80"],"D:\\Apps\\makom\\ui\\src\\components\\Toolbar.js",["81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],"D:\\Apps\\makom\\ui\\src\\components\\Home.js",["97","98","99","100","101","102","103","104","105","106","107","108","109","110","111"],"import React from 'react';\r\nimport _ from 'lodash'\r\nimport axios from 'axios';\r\nimport { API, HEADERS, EMPTY_PERSON } from '../utils/constants';\r\nimport {\r\n    Segment,\r\n    Table,\r\n    Image,\r\n    Button,\r\n    Icon,\r\n    Pagination,\r\n    Dropdown,\r\n    Menu,\r\n    Popup,\r\n    Search,\r\n    Form,\r\n    Input,\r\n    Modal,\r\n    Message,\r\n    Dimmer,\r\n    Loader,\r\n    List\r\n} from 'semantic-ui-react';\r\nimport ContentEditable from 'react-contenteditable'\r\nimport { CSVLink } from \"react-csv\";\r\nimport CSVReader from 'react-csv-reader';\r\nimport { Route } from 'react-router-dom';\r\nimport CENDEL_ICON from '../images/candle-icon.png';\r\nimport LOGO from '../images/makom_logo_small.jpg';\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\nimport { get_pepole_data, get_pepole_lists, update_list, delete_row, add_new_list, delete_list, change_name_list } from '../services/lists.service';\r\n\r\nlet search_timeout;\r\n\r\nexport class ListPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pepole: [],\r\n            isLoading: true,\r\n            error: null,\r\n            itemsPerPage: 10,\r\n            pageData: [],\r\n            currentPage: 1,\r\n            totalPages: 1,\r\n            user: '',\r\n            token: null,\r\n            contextMenuOpen: false,\r\n            selectedRow: null,\r\n            contextRef: null,\r\n            addRow: false,\r\n            search_loading: false,\r\n            search_value: '',\r\n            search_results: [],\r\n            sort_coulmn: null,\r\n            sort_direction: null,\r\n            openExportModal: false,\r\n            exportData: [],\r\n            exportFileName: '',\r\n            importFileName: '',\r\n            account_name: '',\r\n            account_logo: '',\r\n            account_id: null,\r\n            pepole_lists_options: [],\r\n            pepole_list_selected: null,\r\n            openDeleteModel: false,\r\n            new_list_name: \"\",\r\n            errorList: [],\r\n            openNewNameModel: false,\r\n            success: null\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            let user = localStorage.getItem('user_data');\r\n\r\n            user = JSON.parse(user).user;\r\n\r\n            this.setState({\r\n                user: `${user.firstName} - ${user.lastName}`,\r\n                token: user.token, account_name: user.account_name, account_logo: user.account_logo,\r\n                account_id: user.account_id,\r\n            }, () => {\r\n                this.refresh();\r\n            })\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n            console.error('There was an error!', error);\r\n        }\r\n    }\r\n\r\n    refresh = async () => {\r\n        try {\r\n            const response = await get_pepole_lists(this.state.token);\r\n\r\n            if (response.data.success) {\r\n                const pepole_lists = response.data.pepole_lists;\r\n\r\n                let pepole_lists_options = pepole_lists.map(p => {\r\n                    return {\r\n                        key: p.id,\r\n                        text: p.name,\r\n                        value: p.id\r\n                    }\r\n                })\r\n\r\n                this.setState({\r\n                    pepole_lists_options: pepole_lists_options, pepole_list_selected: null,\r\n                    pepole: [...[EMPTY_PERSON]], pageData: [...[EMPTY_PERSON]], isLoading: false\r\n                })\r\n                console.log(this.state.pageData)\r\n            }\r\n            else\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n            console.error('There was an error!', error);\r\n        }\r\n    }\r\n\r\n    newRow = () => {\r\n        let row = {};\r\n        const rowKeys = Object.keys(this.state.pepole[0]);\r\n        rowKeys.forEach(prop => {\r\n            row[prop] = '';\r\n        });\r\n        row.id = new Date().getDate();\r\n        row.added = true;\r\n\r\n        row.pepole_list_id = this.state.pepole_list_selected?.key;\r\n        return row;\r\n    }\r\n\r\n    handleContentEditable = event => {\r\n        const value = event.target.value;\r\n        const column = event.currentTarget.dataset.column;\r\n        const row = event.currentTarget.dataset.row;\r\n        const added = event.currentTarget.dataset.new_row === 'true';\r\n\r\n        let { pageData } = this.state;\r\n\r\n        if (added === false) {\r\n            let updatedRow = pageData.find((item, i) => item.id === row);\r\n            updatedRow[column] = value;\r\n            updatedRow.changed = true;\r\n        }\r\n        else {\r\n            pageData[0][column] = value;\r\n        }\r\n        this.setState({\r\n            pageData: pageData\r\n        })\r\n    }\r\n\r\n    downloadCsv = () => {\r\n        let data = [];\r\n        data.push(HEADERS.map(h => h.title));\r\n        const pepole = this.state.pepole;\r\n\r\n        for (let p of pepole) {\r\n            let arr = [];\r\n            for (let index = 0; index < HEADERS.length; index++) {\r\n                const header = HEADERS[index];\r\n                arr.push(p[header.key]);\r\n            }\r\n            // for (let key in p) {\r\n            //     if (key != 'id' && key != 'changed' && key != 'pepole_list_id')\r\n            //         arr.push(p[key]);\r\n            // }\r\n            data.push(arr);\r\n        }\r\n        this.setState({ exportData: data, openExportModal: true })\r\n    }\r\n\r\n    validate = (changesList, index) => {\r\n        this.setState({ errorList: [] })\r\n        const required_feild = [\"first_name\", \"last_name\"];\r\n\r\n        let errorList = [];\r\n        let isNotNumber;\r\n        let isValidate = true;\r\n\r\n        for (const element of changesList) {\r\n            for (const header of HEADERS) {\r\n                if (header.type === \"number\") {\r\n                    isNotNumber = isNaN(element[header.key]);\r\n                    if (isNotNumber && element[header.key] != '') {\r\n                        isValidate = false;\r\n                        errorList.push(`חובה להזין מספרים בלבד בשדה \"${header.title}\"`)\r\n\r\n                    }\r\n                }\r\n                if (required_feild.includes(header.key)) {\r\n                    if (!element[header.key]) {\r\n                        isValidate = false;\r\n                        errorList.push(`חובה להזין ערך בשדה \"${header.title}\"`)\r\n                    }\r\n                }\r\n            }\r\n            if (!element[\"mens_rosh_ashana\"] && !element[\"womens_rosh_ashana\"] && !element[\"mens_kipur\"] && !element[\"womens_kipur\"]) {\r\n                isValidate = false;\r\n                errorList.push(`חובה להזין ערך בלפחות אחד משדות המקומות`)\r\n            }\r\n            if ((element[\"womens_rosh_ashana\"] || element[\"womens_kipur\"]) && !element[\"wife_name\"]) {\r\n                isValidate = false;\r\n                errorList.push(`חובה להזין את שם האישה`)\r\n            }\r\n        }\r\n        if (index)\r\n            errorList.unshift(`שורה ${index}`)\r\n        this.setState({ errorList: errorList })\r\n        return isValidate;\r\n    }\r\n\r\n    saveChanges = async () => {\r\n        try {\r\n            const changesList = this.state.pageData.filter(p => p.changed || p.added);\r\n            const validation = this.validate(changesList);\r\n            if (validation) {\r\n                //if is new list open model to recuve name\r\n                if (!this.state.pepole_list_selected) {\r\n                    this.setState({ openNewNameModel: true });\r\n                    return\r\n                }\r\n                const response = await update_list(this.state.token, changesList)\r\n                if (response.data.success) {\r\n                    //update pepole list\r\n                    let pepole = this.state.pepole;\r\n                    changesList.forEach(element => {\r\n                        if (element.changed) {\r\n                            const index = _.findIndex(pepole, { id: element.id });\r\n                            pepole.splice(index, 1, element);\r\n                        }\r\n                        else {\r\n                            pepole.push(element);\r\n                        }\r\n                    });\r\n                    const totalPages = parseInt(pepole.length / this.state.itemsPerPage);\r\n\r\n                    this.setState({\r\n                        pepole: pepole, pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                        totalPages: totalPages, currentPage: 1, success: true\r\n                    })\r\n                    setTimeout(() => {\r\n                        this.setState({ success: null })\r\n                    }, 3000)\r\n                }\r\n                else {\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                    console.error('There was an error!', response.data.error);\r\n                }\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n            console.error('There was an error!', error);\r\n        };\r\n    }\r\n\r\n\r\n    deleteRow = async () => {\r\n        try {\r\n            const response = await delete_row(this.state.token, this.state.selectedRow)\r\n\r\n            if (response.data.success) {\r\n                this.setState({\r\n                    contextMenuOpen: false,\r\n                    pepole: this.state.pepole.filter(item => item.id != this.state.selectedRow),\r\n                    pageData: this.state.pageData.filter(item => item.id != this.state.selectedRow)\r\n                });\r\n            }\r\n            else {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n            console.error('There was an error!', error);\r\n        }\r\n    }\r\n\r\n    createContextFromEvent = (e) => {\r\n        const left = e.clientX\r\n        const top = e.clientY\r\n        const right = left + 1\r\n        const bottom = top + 1\r\n\r\n        return {\r\n            getBoundingClientRect: () => ({\r\n                left,\r\n                top,\r\n                right,\r\n                bottom,\r\n\r\n                height: 0,\r\n                width: 0,\r\n            }),\r\n        }\r\n    }\r\n\r\n    switchPage = (event, data) => {\r\n        const pepole = this.state.pepole;\r\n        const start = (this.state.itemsPerPage * (data.activePage - 1));\r\n        const end = this.state.itemsPerPage * data.activePage;\r\n        const pageData = pepole.slice(start, end);\r\n\r\n        this.setState({ pageData: pageData, currentPage: data.activePage });\r\n    }\r\n\r\n    updateItemsPerPage = (event, data) => {\r\n        const itemsPerPage = data.value;\r\n        const pepole = this.state.pepole;\r\n        const totalPages = parseInt(pepole.length / itemsPerPage);\r\n        const pageData = pepole.slice(0, itemsPerPage);\r\n\r\n        this.setState({ itemsPerPage: itemsPerPage, totalPages: totalPages, pageData, pageData, currentPage: 1 })\r\n    }\r\n\r\n    signOut = () => {\r\n        axios.get(`${API}auth/logout`)\r\n            .then(response => {\r\n                if (response.data) {\r\n                    localStorage.removeItem('user_data');\r\n                    window.location.reload();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: error.response });\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n\r\n    addRow = () => {\r\n        let pageData = this.state.pageData;\r\n        if (this.validate(pageData)) {\r\n            const newRow = this.newRow();\r\n            pageData.splice(0, 0, newRow);\r\n            this.setState({ pageData: pageData});\r\n        }\r\n    }\r\n\r\n    handleSearchChange = (e, data) => {\r\n        //clearTimeout(search_timeout);\r\n        //this.setState({ search_loading: true, search_value: data.value })\r\n\r\n        //search_timeout = setTimeout(() => {\r\n        if (data.value.length === 0) {\r\n            const pepole = this.state.pepole;\r\n            this.setState({\r\n                pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                currentPage: 1,\r\n            })\r\n            return\r\n        }\r\n\r\n        const re = new RegExp(_.escapeRegExp(data.value), 'i')\r\n        const isMatch = (result) => re.test(result.last_name) || re.test(result.first_name)\r\n        const pepole = _.filter(this.state.pepole, isMatch);\r\n        const totalPages = parseInt(pepole.length / this.state.itemsPerPage);\r\n        this.setState({ pageData: pepole, totalPages: totalPages })\r\n        // }, 300)\r\n    };\r\n\r\n    importFile = async (data, fileInfo) => {\r\n        try {\r\n            this.setState({ error: null, isLoading: true })\r\n\r\n            let uploadError = \"\";\r\n            console.log(fileInfo.type)\r\n            // if (fileInfo.type != \"application/vnd.ms-excel\")\r\n            //     uploadError = \"סוג הקובץ אינו נתמך\"\r\n\r\n            // if (data.length > 0) {\r\n            //     for (let header of HEADERS) {\r\n            //         const headerFind = data[0].find((d) => d.replace('\"', '') === header.title.replace('\"', ''));\r\n            //         if (!headerFind) {\r\n            //             uploadError += `הכותרת \"${header.title}\" אינה קיימת`\r\n            //         }\r\n            //     }\r\n            // }\r\n\r\n\r\n            // if (uploadError === \"\") {\r\n            const pepole_list_id = new Date().getTime()\r\n            const pepole_list = {\r\n                id: pepole_list_id,\r\n                name: fileInfo.name.split('.')[0], account_id: this.state.account_id\r\n            }\r\n\r\n            let pepole_list_data = [];\r\n\r\n            for (let index = 1; index < data.length; index++) {\r\n                const element = data[index];\r\n\r\n                let pepole_row = {};\r\n                pepole_row.id = new Date().getTime() + index;\r\n\r\n                pepole_row.pepole_list_id = pepole_list_id;\r\n                for (let header_index = 0; header_index < HEADERS.length; header_index++) {\r\n\r\n                    const header = HEADERS[header_index];\r\n                    if (header.key === 'amount_per_place') {\r\n                        console.log('t')\r\n                    }\r\n                    if (header.type === \"number\" && element[header_index] != \"\")\r\n                        pepole_row[header.key] = parseInt(element[header_index]);\r\n                    else\r\n                        pepole_row[header.key] = element[header_index];\r\n                }\r\n                if (this.validate([pepole_row], index))\r\n                    pepole_list_data.push(pepole_row);\r\n                else {\r\n                    this.setState({ isLoading: false })\r\n                    return\r\n                }\r\n            }\r\n\r\n            const response = await add_new_list(this.state.token, pepole_list, pepole_list_data);\r\n            if (response.data.success) {\r\n                window.location.reload();\r\n            }\r\n            else {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                console.error('There was an error!', response.data.error);\r\n            }\r\n            // }\r\n            // else {\r\n            //     this.setState({ error: uploadError, isLoading: false });\r\n            //     toast({\r\n            //         type: 'error',\r\n            //         title: 'שגיאה',\r\n            //         description: uploadError,\r\n            //         time: 5000,\r\n            //     });\r\n            // }\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n            console.error('There was an error!', error);\r\n        }\r\n    }\r\n\r\n    deleteList = async () => {\r\n        try {\r\n            this.setState({ error: null, isLoading: true, openDeleteModel: false })\r\n            const response = await delete_list(this.state.token, this.state.pepole_list_selected.key);\r\n            if (response.data.success) {\r\n                this.setState({ success: true });\r\n                await this.refresh();\r\n                setTimeout(() => {\r\n                    this.setState({ success: null })\r\n                }, 3000)\r\n            }\r\n            else {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                console.error('There was an error!', response.data.error);\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n            console.error('There was an error!', error);\r\n        }\r\n    }\r\n\r\n    changeListName = async () => {\r\n        try {\r\n            this.setState({ error: null, isLoading: true, openChangeNameModel: false })\r\n            const response = await change_name_list(this.state.token, this.state.pepole_list_selected.key, this.state.new_list_name);\r\n            if (response.data.success) {\r\n                const new_pepole_list_selected = {\r\n                    key: this.state.pepole_list_selected.key,\r\n                    text: this.state.new_list_name,\r\n                    value: this.state.pepole_list_selected.value\r\n                }\r\n\r\n                let pepole_lists_options = this.state.pepole_lists_options;\r\n                const index = _.findIndex(pepole_lists_options, { key: new_pepole_list_selected.key });\r\n                pepole_lists_options.splice(index, 1, new_pepole_list_selected);\r\n                pepole_lists_options = JSON.stringify(pepole_lists_options);\r\n\r\n                this.setState({\r\n                    pepole_list_selected: new_pepole_list_selected,\r\n                    pepole_lists_options: JSON.parse(pepole_lists_options),\r\n                    isLoading: false\r\n                })\r\n            }\r\n            else {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                console.error('There was an error!', response.data.error);\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n            console.error('There was an error!', error);\r\n        }\r\n    }\r\n\r\n    changePepoleList = async (e, data) => {\r\n        try {\r\n            this.setState({ error: null, isLoading: true })\r\n            console.log('t')\r\n            const response = await get_pepole_data(this.state.token, data.value);\r\n\r\n            if (response.data.success) {\r\n                const pepole = response.data.pepole_data;\r\n                const totalPages = parseInt(pepole.length / this.state.itemsPerPage);\r\n\r\n                const selectedPepoleList = this.state.pepole_lists_options.find((list) => list.key === data.value);\r\n                this.setState({\r\n                    pepole: pepole, pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                    totalPages: totalPages, pepole_list_selected: selectedPepoleList, isLoading: false\r\n                })\r\n            }\r\n            else\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n        }\r\n        catch (error) {\r\n            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n            console.error('There was an error!', error);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const pepole = this.state.pepole;\r\n        const pageData = this.state.pageData;\r\n        const headers = HEADERS;\r\n        const rowKeys = pepole.length > 0 ? Object.keys(pepole[0]) : [];\r\n        const totalPages = this.state.totalPages;\r\n        let hedear = this.state.account_name;\r\n        let pepole_list_selected_name = this.state.pepole_list_selected ? this.state.pepole_list_selected.text : \"\"\r\n\r\n        return (\r\n            <div dir=\"rtl\">\r\n                <Dimmer active={this.state.isLoading}>\r\n                    <Loader size=\"large\">נא המתן...</Loader>\r\n                </Dimmer>\r\n                {/* <SemanticToastContainer position=\"top-left\" /> */}\r\n                <section className='header-row'>\r\n                    <div style={{ flex: '30%' }}>\r\n                        <div style={{ display: 'flex' }}>\r\n                            <div style={{ marginTop: '25px' }}>\r\n                                <Image src={CENDEL_ICON} />\r\n                            </div>\r\n                            <div>\r\n                                <span>לע\"נ</span>\r\n                                <br />\r\n                                <span>אמי מורתי הצנועה והצדקנית</span>\r\n                                <br />\r\n                                <span>מרת שרה הענטשא פרלא ע\"ה</span>\r\n                                <br />\r\n                                <span>נלב\"ע טז כסלו תשפ\"א</span>\r\n                                <br />\r\n                                <span>תנצב\"ה</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ flex: '60%', fontSize: 'xxx-large', margin: 'auto' }}>\r\n                        {this.state.account_name}\r\n                    </div>\r\n                    <div style={{ flex: '10%' }}>\r\n                        <Image style={{ margin: 'auto' }} src={LOGO}></Image>\r\n                    </div>\r\n                </section >\r\n                <section className=\"functions-row\">\r\n                    <div style={{ display: 'flex' }}>\r\n                        <div className=\"search\">\r\n                            <Input icon='search' iconPosition='left' placeholder='חיפוש'\r\n                                onChange={this.handleSearchChange}></Input>\r\n                        </div>\r\n                        {/* <div className=\"search\">\r\n                            <Search\r\n                                title={''}\r\n                                loading={this.state.search_loading}\r\n                                onSearchChange={this.handleSearchChange}\r\n                                results={[{ first_name: 'tal', last_name: 'per' }]}\r\n                                value={this.state.search_value}\r\n                                resultRenderer={(props) => {\r\n                                    console.log(props)\r\n                                    return `${props.first_name} ${props.last_name}`\r\n                                }}\r\n                                placeholder={\"חיפוש לפי שם \"}\r\n                                onResultSelect={(e, data) => {\r\n                                    console.log('tlllal');\r\n                                    const selected = this.state.pepole.find((row) => row.id === data.result.id);\r\n                                    console.log(selected)\r\n                                    this.setState({ pageData: [selected], currentPage: 1 });\r\n                                }}\r\n                            />\r\n                        </div> */}\r\n                        <div className=\"pepole-list-ddl\">\r\n                            <Dropdown placeholder=\"בחר רשימה\"\r\n                                selection\r\n                                options={this.state.pepole_lists_options}\r\n                                value={this.state.pepole_list_selected?.value}\r\n                                onChange={this.changePepoleList}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"bottuns-row\">\r\n                        {this.state.pageData.length > 0 &&\r\n                            <Button onClick={this.addRow} style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                            >\r\n                                הוספת שורה\r\n                                <Icon name='add' />\r\n                            </Button>\r\n                        }\r\n                        {this.state.pageData.length > 0 &&\r\n                            <Button onClick={this.downloadCsv} style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                            >\r\n                                הוצא לקובץ\r\n                                <Icon name='file excel outline' />\r\n                            </Button>\r\n                        }\r\n                        {/* <Button style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                        >\r\n                            <CSVReader onFileLoaded={this.importFile} inputId=\"file\" inputName=\"file\" cssInputClass=\"inputfile\" />\r\n                            <label className=\"inputlabel\" htmlFor=\"file\">טען קובץ</label>\r\n                            <Icon name='file excel outline' />\r\n                        </Button> */}\r\n                        {this.state.pepole_list_selected &&\r\n                            <Button onClick={() => { this.setState({ openDeleteModel: true }) }} style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                            >\r\n                                מחק רשימה\r\n                                <Icon name='file excel outline' />\r\n                            </Button>\r\n                        }\r\n                        {this.state.pepole_list_selected &&\r\n                            <Button onClick={() => { this.setState({ openChangeNameModel: true }) }} style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                            >\r\n                                שנה שם רשימה\r\n                                <Icon name='file excel outline' />\r\n                            </Button>\r\n                        }\r\n                        {this.state.pageData.filter(p => p.changed || p.added).length > 0 &&\r\n                            <Button onClick={() => this.saveChanges()} style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                            >\r\n                                שמירה\r\n                                <Icon name='save outline' />\r\n                            </Button>\r\n                        }\r\n\r\n                        <Route render={({ history }) => (\r\n                            <Button onClick={() => {\r\n                                history.push('/')\r\n                            }} style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                            >\r\n                                מעבר למפה\r\n                                <Icon name='map' />\r\n                            </Button>\r\n                        )} />\r\n\r\n                        <Button onClick={this.signOut} style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                        >\r\n                            יציאה\r\n                            <Icon name='sign-out' />\r\n                        </Button>\r\n\r\n                    </div>\r\n\r\n                </section>\r\n                {this.state.pageData.length > 0 &&\r\n                    <section>\r\n                        <div>\r\n                            <Segment basic style={{ overflow: 'auto', maxHeight: '65vh' }}>\r\n                                {this.state.success != null &&\r\n                                    <Message\r\n                                        positive\r\n                                        content={'הפעולה בוצעה בהצלחה'}\r\n                                    />\r\n                                }\r\n                                {this.state.error != null &&\r\n                                    <Message\r\n                                        error\r\n                                        header=' שגיאה '\r\n                                        content={this.state.error}\r\n                                    />\r\n                                }\r\n                                {this.state.errorList.length > 0 &&\r\n                                    <Message error>\r\n                                        <ul>\r\n                                            {\r\n                                                this.state.errorList.map(error => {\r\n                                                    return (\r\n                                                        <li>\r\n                                                            {error}\r\n                                                        </li>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </Message>\r\n                                }\r\n                                {/* {this.state.search_results.length > 0 &&\r\n                                    < List divided relaxed>\r\n                                        {\r\n                                            this.state.search_results.map(r =>\r\n                                                <List.Item>\r\n                                                    {`${r.name} : ${r.value}`}\r\n                                                </List.Item>\r\n                                            )\r\n                                        }\r\n                                    </List>\r\n                                } */}\r\n\r\n                                <Table className=\"pepole-table\" align='left' style={{\r\n                                    width: this.state.search_value === '' ? '100%' : '85%'\r\n                                }}\r\n                                    celled\r\n                                    selectable\r\n                                    striped\r\n                                    singleLine\r\n                                    sortable\r\n                                >\r\n                                    <Table.Header>\r\n                                        <Table.Row>\r\n                                            {headers.map((header, i) => {\r\n                                                return (\r\n                                                    <Table.HeaderCell key={i}\r\n                                                        sorted={this.state.sort_coulmn === header.key ? this.state.sort_direction : null}\r\n                                                        onClick={() => {\r\n                                                            if (this.state.sort_coulmn === header.key) {\r\n                                                                const pepole = this.state.pepole.slice().reverse()\r\n\r\n                                                                this.setState({\r\n                                                                    sort_direction: this.state.sort_direction === 'ascending' ? 'descending' : 'ascending',\r\n                                                                    pepole: pepole,\r\n                                                                    pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                                                                    currentPage: 1\r\n                                                                })\r\n                                                            }\r\n                                                            else {\r\n                                                                const pepole = _.sortBy(this.state.pepole, [header.key])\r\n                                                                this.setState({\r\n                                                                    sort_coulmn: header.key,\r\n                                                                    pepole: pepole,\r\n                                                                    pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                                                                    sort_direction: 'ascending',\r\n                                                                    currentPage: 1\r\n                                                                })\r\n                                                            }\r\n                                                        }}>{header.title}</Table.HeaderCell>\r\n                                                )\r\n                                            })}\r\n                                        </Table.Row>\r\n                                    </Table.Header>\r\n                                    <Table.Body>\r\n                                        {\r\n                                            this.state.pageData.map((row, row_index) => {\r\n                                                return (\r\n                                                    <Table.Row key={row.id}\r\n                                                        onContextMenu={(e) => {\r\n                                                            e.preventDefault()\r\n                                                            this.setState({\r\n                                                                contextMenuOpen: true,\r\n                                                                contextRef: this.createContextFromEvent(e),\r\n                                                                selectedRow: row.id\r\n                                                            });\r\n                                                        }}>\r\n                                                        {\r\n                                                            headers.map((header, index) => {\r\n                                                                return (\r\n                                                                    <Table.Cell key={row.id + '_' + index}>\r\n                                                                        <ContentEditable\r\n                                                                            html={row[header.key] ? row[header.key].toString() : ''}\r\n                                                                            data-column={header.key}\r\n                                                                            data-row={row.id}\r\n                                                                            data-new_row={row.added ? true : false}\r\n                                                                            className=\"content-editable\"\r\n                                                                            onChange={this.handleContentEditable}\r\n                                                                        />\r\n                                                                    </Table.Cell>\r\n                                                                )\r\n                                                            })}\r\n                                                    </Table.Row>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Table.Body>\r\n                                </Table>\r\n                            </Segment>\r\n                            <Segment basic dir=\"ltr\" textAlign=\"center\">\r\n                                <Pagination\r\n                                    onPageChange={this.switchPage}\r\n                                    pageItem={<Button style={{ backgroundColor: '#FAAF40', color: 'WHITE' }} size={'large'} />}\r\n                                    ellipsisItem={<Button icon=\"ellipsis horizontal\" disabled style={{ backgroundColor: '#FAAF40', color: 'WHITE' }} />}\r\n                                    firstItem={<Button disabled={this.state.currentPage <= 1}\r\n                                        content=\"ראשון\"\r\n                                        icon=\"angle double left\" labelPosition=\"left\" style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                                    />}\r\n                                    lastItem={<Button disabled={this.state.currentPage >= totalPages}\r\n                                        content=\"אחרון\"\r\n                                        icon=\"angle double right\" labelPosition=\"right\" style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                                    />}\r\n                                    prevItem={<Button disabled={this.state.currentPage <= 1}\r\n                                        content=\"הקודם\" icon=\"left arrow\"\r\n                                        labelPosition=\"left\" style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                                    />}\r\n                                    nextItem={<Button disabled={this.state.currentPage >= totalPages}\r\n                                        content=\"הבא\" icon=\"right arrow\"\r\n                                        labelPosition=\"right\" style={{ backgroundColor: '#FAAF40', color: 'WHITE' }}\r\n                                    />}\r\n                                    totalPages={totalPages}\r\n                                    secondary\r\n                                />\r\n                            </Segment>\r\n                        </div>\r\n                    </section>\r\n                }\r\n\r\n                <Popup\r\n                    basic\r\n                    context={this.state.contextRef}\r\n                    onClose={() => this.setState({ contextMenuOpen: false })}\r\n                    open={this.state.contextMenuOpen}\r\n                >\r\n                    <Menu style={{ width: '100px' }} dir=\"rtl\"\r\n                        items={[\r\n                            { key: '1', content: \"מחק שורה\" },\r\n                        ]}\r\n                        onItemClick={(e, item) => {\r\n                            this.deleteRow();\r\n                        }}\r\n                        secondary\r\n                        vertical\r\n                    />\r\n                </Popup>\r\n                <Modal\r\n                    closeIcon={true} dimmer={'blurring'}\r\n                    onClose={() => {\r\n                        this.setState({ openExportModal: false });\r\n                    }}\r\n                    open={this.state.openExportModal}\r\n                    className='export-modal'\r\n                >\r\n                    <Modal.Header>הוצא את המידע לקובץ</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Button>\r\n                                <CSVLink className=\"btn btn-primary\" filename={`${this.state.exportFileName}.csv`} data={this.state.exportData}\r\n                                    onClick={(event) => {\r\n                                        this.setState({ openExportModal: false })\r\n                                    }}>הורד</CSVLink>\r\n                            </Button>\r\n                            &nbsp; &nbsp; &nbsp;\r\n                            <Input placeholder=\"שם הקובץ\" onChange={(e) => {\r\n                                this.setState({ exportFileName: e.target.value });\r\n                            }}></Input>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                </Modal>\r\n                <Modal closeIcon={true} dimmer={'blurring'} style={{ textAlign: 'right' }}\r\n                    onClose={() => {\r\n                        this.setState({ openDeleteModel: false });\r\n                    }}\r\n                    open={this.state.openDeleteModel}>\r\n                    <Modal.Header>\r\n                        מחיקת רשימה\r\n                    </Modal.Header>\r\n                    <Modal.Content >\r\n                        ? מחיקת הרשימה תמחוק את כל הנתונים השייכים לרשימה <b>\"{pepole_list_selected_name}\"</b>, האם תרצה להמשיך\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            content=\"כן\"\r\n                            labelPosition='right'\r\n                            icon='checkmark'\r\n                            onClick={this.deleteList}\r\n                            positive\r\n                        />\r\n                        <Button color='black' onClick={() => this.setState({ openDeleteModel: false })}>\r\n                            לא\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n                <Modal closeIcon={true} dimmer={'blurring'} style={{ textAlign: 'right' }}\r\n                    onClose={() => {\r\n                        this.setState({ openChangeNameModel: false });\r\n                    }}\r\n                    open={this.state.openChangeNameModel}>\r\n                    <Modal.Header>\r\n                        שינוי שם הרשימה\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Input style={{ textAlign: 'right' }} fluid placeholder=\"הכנס שם חדש - עברית ללא תווים מיוחדים\" onChange={(e) => {\r\n                                this.setState({ new_list_name: e.target.value });\r\n                            }}></Input>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            content=\"שנה\"\r\n                            labelPosition='right'\r\n                            icon='checkmark'\r\n                            onClick={this.changeListName}\r\n                            positive\r\n                        />\r\n                        <Button color='black' onClick={() => this.setState({ openChangeNameModel: false })}>\r\n                            ביטול\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n                <Modal closeIcon={true} dimmer={'blurring'} style={{ textAlign: 'right' }}\r\n                    onClose={() => {\r\n                        this.setState({ openNewNameModel: false });\r\n                    }}\r\n                    open={this.state.openNewNameModel}>\r\n                    <Modal.Header>\r\n                        שם הרשימה\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Input style={{ textAlign: 'right' }} fluid placeholder=\"הכנס שם - עברית ללא תווים מיוחדים\" onChange={(e) => {\r\n                                this.setState({ new_list_name: e.target.value });\r\n                            }}></Input>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            content=\"שמור\"\r\n                            labelPosition='right'\r\n                            icon='checkmark'\r\n                            onClick={async () => {\r\n                                try {\r\n                                    this.setState({ isLoading: true })\r\n                                    const pepole_list_id = new Date().getTime().toString();\r\n                                    const pepole_list = {\r\n                                        id: pepole_list_id,\r\n                                        name: this.state.new_list_name,\r\n                                        account_id: this.state.account_id\r\n                                    }\r\n                                    let changesList = this.state.pageData.filter(p => p.changed || p.added);\r\n                                    const validation = this.validate(changesList);\r\n                                    const numbers_fields = HEADERS.filter(h => h.type === \"number\");\r\n                                    if (validation) {\r\n                                        //update id and list_id\r\n                                        for (let index = 0; index < changesList.length; index++) {\r\n                                            changesList[index].id = new Date().getTime() + index;\r\n                                            changesList[index].pepole_list_id = pepole_list_id;\r\n                                            //convert fields to numbers\r\n                                            numbers_fields.forEach(field => {\r\n                                                if (changesList[index][field.key])\r\n                                                    changesList[index][field.key] = parseInt(changesList[index][field.key])\r\n                                            })\r\n                                        }\r\n                                        const response = await add_new_list(this.state.token, pepole_list, changesList);\r\n                                        if (response.data.success) {\r\n\r\n                                            const pepole_lists = response.data.pepole_lists;\r\n\r\n                                            let pepole_lists_options = pepole_lists.map(p => {\r\n                                                return {\r\n                                                    key: p.id,\r\n                                                    text: p.name,\r\n                                                    value: p.id\r\n                                                }\r\n                                            })\r\n                                            this.setState({\r\n                                                pepole_lists_options: pepole_lists_options,\r\n                                                success: true\r\n                                            })\r\n\r\n                                            await this.changePepoleList(null, { value: pepole_list_id })\r\n\r\n                                            setTimeout(() => {\r\n                                                this.setState({ success: null })\r\n                                            }, 3000)\r\n                                        }\r\n                                        else {\r\n                                            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                                        }\r\n                                    }\r\n                                    this.setState({ openNewNameModel: false, isLoading: false })\r\n                                }\r\n                                catch (error) {\r\n                                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                                    console.error('There was an error!', error);\r\n                                }\r\n                            }\r\n                            }\r\n                            positive\r\n                        />\r\n                        <Button color='black' onClick={() => this.setState({ openNewNameModel: false })}>\r\n                            ביטול\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}","D:\\Apps\\makom\\ui\\src\\components\\Map.js",["112","113","114","115","116"],"import React from 'react';\r\nimport Spreadsheet from \"x-data-spreadsheet\";\r\nimport axios from 'axios';\r\nimport { API, HEADERS } from '../utils/constants';\r\nimport {\r\n    Dimmer,\r\n    Search,\r\n    Grid,\r\n    Dropdown,\r\n    Loader,\r\n    Message,\r\n    Button,\r\n    Icon,\r\n    Label,\r\n    Modal,\r\n    Form,\r\n    Input\r\n} from 'semantic-ui-react';\r\nimport _ from 'lodash'\r\nimport { Route } from 'react-router-dom'\r\n\r\nexport class MapPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            token: null,\r\n            data: null,\r\n            isLoading: true,\r\n            error: null,\r\n            search_loading: false,\r\n            pepole: null,\r\n            search_results: null,\r\n            search_value: '',\r\n            selected_col_i: null,\r\n            selected_row_i: null,\r\n            sheet_map: null,\r\n            account_name: '',\r\n            pepole_lists_options: [],\r\n            pepole_list_selected: null,\r\n            sum_places: 0,\r\n            pepole_list_chenged: [],\r\n            openSelectedTurModel: false,\r\n            cell_range: null,\r\n            turim: [],\r\n            tur_name: \"\",\r\n            tur_selected: null\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        const keyboardEvent = new KeyboardEvent('keydown', {\r\n            code: 'Tab',\r\n            key: 'Tab',\r\n            charCode: 9,\r\n            keyCode: 9,\r\n            view: window,\r\n            bubbles: true\r\n        });\r\n\r\n\r\n        let user = localStorage.getItem('user_data');\r\n        if (user) {\r\n            user = JSON.parse(user).user;\r\n            const s = new Spreadsheet(\"#x-spreadsheet-map\", {\r\n                mode: 'read', // edit | read\r\n                showToolbar: true,\r\n                showGrid: true,\r\n                showContextmenu: false,\r\n                view: {\r\n                    height: () => document.documentElement.clientHeight - 115,\r\n                    width: () => document.documentElement.clientWidth,\r\n                },\r\n                row: {\r\n                    len: 100,\r\n                    height: 60,\r\n                },\r\n                col: {\r\n                    len: 22,\r\n                    width: 100,\r\n                    indexWidth: 60,\r\n                    minWidth: 60,\r\n                },\r\n                style: {\r\n                    bgcolor: '#ffffff',\r\n                    align: 'center',\r\n                    valign: 'middle',\r\n                    textwrap: false,\r\n                    strike: false,\r\n                    underline: false,\r\n                    color: '#0a0a0a',\r\n                    font: {\r\n                        name: 'Helvetica',\r\n                        size: 10,\r\n                        bold: false,\r\n                        italic: false,\r\n                    },\r\n                },\r\n            })\r\n                .change(data => {\r\n                    //get names from map table\r\n                    const rows = Object.values(data.rows);\r\n                    const rows_keys = Object.keys(data.rows);\r\n\r\n                    let names = [];\r\n                    for (let index = 0; index < rows.length; index++) {\r\n\r\n                        if (rows[index].cells) {\r\n                            const cells = Object.values(rows[index].cells)\r\n                            const cells_keys = Object.keys(rows[index].cells)\r\n\r\n                            for (let cell_index = 0; cell_index < cells.length; cell_index++) {\r\n                                if (cells[cell_index].text) {\r\n\r\n                                    let name = names.find((name) => name.key === `${rows_keys[index]} ${cells_keys[cell_index]}`)\r\n                                    if (name)\r\n                                        name.text = cells[cell_index].text;\r\n                                    else\r\n                                        names.push({\r\n                                            key: this.find_map_key_by_tur(rows_keys[index], cells_keys[cell_index])\r\n                                            , text: cells[cell_index].text\r\n                                        })\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                    //update pepole list\r\n                    for (let p_index = 0; p_index < this.state.pepole.length; p_index++) {\r\n                        const p_element = this.state.pepole[p_index];\r\n\r\n                        const map_names = names.filter(n => n.text === `${p_element.first_name} ${p_element.last_name}`)\r\n                        //map contain person and list not\r\n                        for (let m_index = 0; m_index < map_names.length; m_index++) {\r\n                            const m_element = map_names[m_index];\r\n                            //person exist on map and not exist in list\r\n                            if (!p_element.point_on_map || p_element.point_on_map === \"\") {\r\n                                //add map point to list and calculate places\r\n                                //if (m_element.key) {\r\n\r\n                                p_element.point_on_map = m_element.key.toString();\r\n                                p_element.changed = true;\r\n                                p_element.places_count--;\r\n                                //}\r\n                            }\r\n                            else {\r\n\r\n                                let p_places = p_element.point_on_map.split(',');\r\n\r\n                                const place_exist = p_places.find(p => p === m_element.key)\r\n\r\n                                //add map point to list and calculate places\r\n                                if (!place_exist) {\r\n                                    p_element.point_on_map += `,${m_element.key}`\r\n                                    p_element.places_count--;\r\n                                    p_element.changed = true;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        //list contain person and map not\r\n                        if (p_element.point_on_map && p_element.point_on_map != \"\") {\r\n                            let p_places = p_element.point_on_map.split(',');\r\n                            let removed = [];\r\n                            for (let place_index = 0; place_index < p_places.length; place_index++) {\r\n                                const place = p_places[place_index];\r\n                                const exist_on_map = names.find(n => n.text === `${p_element.first_name} ${p_element.last_name}` && n.key === place);\r\n                                if (!exist_on_map) {\r\n                                    p_element.places_count++;\r\n                                    removed.push(place);\r\n                                }\r\n                            }\r\n                            p_element.point_on_map = \"\";\r\n                            for (let index = 0; index < p_places.length; index++) {\r\n                                const element = p_places[index];\r\n                                if (!removed.find(e => e === element)) {\r\n                                    p_element.changed = true;\r\n                                    if (p_element.point_on_map === \"\")\r\n                                        p_element.point_on_map = element\r\n                                    else\r\n                                        p_element.point_on_map += `,${element}`\r\n                                }\r\n                            }\r\n                        }\r\n                        if (p_element.first_name === \"דוב\" && p_element.last_name === \"פרלא\") {\r\n                        }\r\n                    }\r\n\r\n                    let count_of_places = 0;\r\n                    this.state.pepole.map((p) => p.places_count != null ? count_of_places += p.places_count : 0)\r\n                    this.setState({\r\n                        data: data,\r\n                        sum_places: count_of_places\r\n                    })\r\n                });\r\n            s.on('cell-edited', (text, ri, ci) => {\r\n                let sheet_map = this.state.sheet_map;\r\n                sheet_map.datas[0].settings.mode = 'edit';\r\n                sheet_map.reRender();\r\n                this.setState({ sheet_map: sheet_map })\r\n                // s.cellText(ri, ci, '')\r\n                //allow open search only if the place mark by tur\r\n                // for (let index = 0; index < this.state.turim.length; index++) {\r\n                //     const element = this.state.turim[index];\r\n\r\n                //     if (ci >= element.cell_range.sci && ci <= element.cell_range.eci && ri >= element.cell_range.sri && ri <= element.cell_range.eri) {\r\n                //         this.setState({ search_value: text, selected_col_i: ci, selected_row_i: ri });\r\n                //         if (text.length > 0) {\r\n                //             this.handleSearchChange(null, { value: text });\r\n                //             document.querySelector(\".results\").style.display = 'block';\r\n                //         }\r\n                //         else {\r\n                //             document.querySelector(\".results\").style.display = 'none';\r\n                //         }\r\n                //     }\r\n                // }\r\n            })\r\n\r\n            s.on('cell-selected', (cell, ri, ci) => {\r\n                console.log(cell)\r\n                this.setState({ cell_range: null })\r\n            })\r\n\r\n            s.on('cells-selected', (cell, cell_range) => {\r\n                this.setState({ cell_range: cell_range })\r\n\r\n                //check if cell_range equal to tur, if yes allow to remove tur\r\n                const turim = this.state.turim;\r\n                for (let row_index = cell_range.sri; row_index <= cell_range.eri; row_index++) {\r\n                    for (let col_index = cell_range.sci; col_index <= cell_range.eci; col_index++) {\r\n                        const tur = turim.find(t => t.cell_range.sri <= row_index && t.cell_range.eri >= row_index &&\r\n                            t.cell_range.sci <= col_index && t.cell_range.eci >= col_index)\r\n                        if (tur) {\r\n                            this.setState({ tur_selected: tur })\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            axios.post(`${API}/pepole/get-all`, { token: user.token, pepole_list_id: null })\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        if (response.data.pepole.length > 0) {\r\n                            const pepole = response.data.pepole;\r\n                            const pepole_lists = response.data.pepole_lists;    \r\n                            let pepole_lists_options = pepole_lists.map(p => {\r\n                                return {\r\n                                    key: p.id,\r\n                                    text: p.name,\r\n                                    value: p.id,\r\n                                    className: 'right floated'\r\n                                }\r\n                            })\r\n\r\n                            let count_of_places = 0;\r\n                            pepole.map(p => p.places_count != null ? count_of_places += p.places_count : 0)\r\n\r\n                            s.loadData(pepole_lists[pepole_lists.length - 1].map != null ? JSON.parse(pepole_lists[pepole_lists.length - 1].map) : {}) // load data\r\n\r\n                            this.setState({\r\n                                pepole: pepole, sheet_map: s, account_name: user.account_name, pepole_lists_options: pepole_lists_options,\r\n                                pepole_list_selected: pepole_lists_options[pepole_lists.length - 1], isLoading: false, token: user.token,\r\n                                data: JSON.parse(pepole_lists[pepole_lists.length - 1].map), sum_places: count_of_places,\r\n                                turim: pepole_lists[pepole_lists.length - 1].turim != null ? JSON.parse(pepole_lists[pepole_lists.length - 1].turim) : []\r\n                            })\r\n                        }\r\n                    }\r\n                    else\r\n                        this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                    console.error('There was an error!', error);\r\n                });\r\n        }\r\n    }\r\n\r\n    is_cell_selected_in_tur = (col, row) => {\r\n        // if (turim.find(t => t.cell_range.sri <= row && t.cell_range.eri >= row &&\r\n        //     t.cell_range.sci <= col && t.cell_range.eci >= col)) {\r\n        //     tur_selected = true;\r\n        // }\r\n    }\r\n\r\n    find_map_key_by_tur = (map_row, map_coulmn) => {\r\n        if (this.state.turim.length > 0) {\r\n            for (let index = 0; index < this.state.turim.length; index++) {\r\n                const tur = this.state.turim[index];\r\n                if ((map_row >= tur.cell_range.sri && map_row <= tur.cell_range.eri)\r\n                    && (map_coulmn >= tur.cell_range.sci && map_coulmn <= tur.cell_range.eci)) {\r\n                    return `${map_row - tur.cell_range.sri} ${tur.tur_name} ${map_coulmn - tur.cell_range.sci}`\r\n                }\r\n                else {\r\n                    return `${map_row} ${map_coulmn}`\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return `${map_row} ${map_coulmn}`\r\n        }\r\n    }\r\n\r\n    convert_col_num = (num) => {\r\n        let arr = ['ת', 'ש', 'ר', 'ק', 'צ', 'פ', 'ע', 'ס', 'נ', 'מ', 'ל', 'כ', 'י', 'ט', 'ח', 'ז', 'ו', 'ה', 'ד', 'ג', 'ב', 'א']\r\n        arr = arr.reverse();\r\n        return arr[num];\r\n    }\r\n\r\n    changePepoleList = (e, data) => {\r\n        this.setState({ error: null, isLoading: true })\r\n        axios.post(`${API}/pepole/get-all`, { token: this.state.token, pepole_list_id: data.value })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.pepole.length > 0) {\r\n                        const pepole = response.data.pepole;\r\n                        const pepole_list = response.data.pepole_lists[response.data.pepole_lists.length - 1];\r\n                        const selectedPepoleList = this.state.pepole_lists_options.find((list) => list.key === data.value);\r\n                        let count_of_places = 0;\r\n                        pepole.map((p) => p.places_count != null ? count_of_places++ : 0)\r\n                        this.state.sheet_map.loadData(pepole_list.map != null ? JSON.parse(pepole_list.map) : {});\r\n                        this.setState({\r\n                            pepole: pepole,\r\n                            pepole_list_selected: selectedPepoleList, isLoading: false, data: JSON.parse(pepole_list.map),\r\n                            sum_places: count_of_places, turim: pepole_list.turim != null ? JSON.parse(pepole_list.turim) : []\r\n                        })\r\n                    }\r\n                }\r\n                else\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                console.error('There was an error!', error);\r\n            });\r\n\r\n    }\r\n\r\n    handleSearchChange = (e, data) => {\r\n        if (data.value.length === 0) {\r\n            return\r\n        }\r\n        else {\r\n            this.setState({ search_loading: true })\r\n            const re = new RegExp(_.escapeRegExp(data.value), 'i')\r\n            const isMatch = (result) => re.test(result.last_name) || re.test(result.first_name)\r\n\r\n            this.setState({ search_results: _.filter(this.state.pepole, isMatch), search_loading: false })\r\n        }\r\n    };\r\n\r\n    saveChanges = () => {\r\n        axios.post(`${API}/pepole/update-map`, {\r\n            token: this.state.token, pepole_list_id: this.state.pepole_list_selected.key, map: JSON.stringify(this.state.data),\r\n            pepole: this.state.pepole.filter(p => p.changed), turim: JSON.stringify(this.state.turim)\r\n        })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n\r\n                }\r\n                else {\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                    console.error('There was an error!', response.data.error);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n\r\n    numToSSColumn = (num) => {\r\n        let s = '', t;\r\n\r\n        while (num > 0) {\r\n            t = (num - 1) % 26;\r\n            s = String.fromCharCode(65 + t) + s;\r\n            num = (num - t) / 26 | 0;\r\n        }\r\n        return s || undefined;\r\n    }\r\n\r\n    delete_tur = () => {\r\n        let data = this.state.data;\r\n        const tur_selected = this.state.tur_selected\r\n        for (let row_index = tur_selected.cell_range.sri - 1; row_index <= tur_selected.cell_range.eri; row_index++) {\r\n            let row = data.rows[row_index]\r\n            if (row) {\r\n                for (let col_index = tur_selected.cell_range.sci; col_index <= tur_selected.cell_range.eci; col_index++) {\r\n                    if (row.cells[col_index]) {\r\n                        delete row.cells[col_index]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.state.sheet_map.loadData(data);\r\n        this.setState({\r\n            tur_selected: null,\r\n            data: data,\r\n            cell_range: null\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let hedear = this.state.account_name;\r\n\r\n        if (document.getElementsByClassName('x-spreadsheet-bottombar').length > 0) {\r\n            document.getElementsByClassName('x-spreadsheet-bottombar')[0].style.display = 'none';\r\n        }\r\n        console.log(this.state.sheet_map)\r\n        console.log(this.state.data)\r\n        return (\r\n            <div >\r\n                <Dimmer active={this.state.isLoading}>\r\n                    <Loader size=\"large\">נא המתן...</Loader>\r\n                </Dimmer>\r\n                <section >\r\n                    <Grid columns={3} className={'row-header header'}>\r\n                        <Grid.Row>\r\n                            <Grid.Column>\r\n                                <div>\r\n                                    <p>\r\n                                        {this.state.user}\r\n                                    </p>\r\n                                </div>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <div>\r\n                                    <pre>\r\n                                        <span className=\"header-title\">\r\n                                            {hedear}\r\n                                        </span>\r\n                                    </pre>\r\n                                </div>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </section>\r\n                <section dir=\"rtl\" className=\"functions-row\">\r\n                    <div className=\"search\">\r\n                        <Search\r\n                            loading={this.state.search_loading}\r\n                            onSearchChange={this.handleSearchChange}\r\n                            results={this.state.search_results}\r\n                            value={this.state.search_value}\r\n                            resultRenderer={(props) => {\r\n                                return `${props.first_name} ${props.last_name} מס' מקומות ${props.places_count}`\r\n                            }}\r\n                            placeholder={\"חיפוש לפי שם \"}\r\n                            onResultSelect={(e, data) => {\r\n                                let selected = this.state.pepole.find((row) => row.id === data.result.id);\r\n                                const cell_key = `${this.state.selected_row_i + 1} ${this.convert_col_num(this.state.selected_col_i)}`;\r\n                                //selected.places_count--;\r\n                                //selected.point_on_map = cell_key\r\n\r\n                                document.querySelector(\".results\").dispatchEvent(new KeyboardEvent('keydown', {\r\n                                    code: 'Tab',\r\n                                    key: 'Tab',\r\n                                    charCode: 9,\r\n                                    keyCode: 9,\r\n                                    view: window,\r\n                                    bubbles: true\r\n                                }))\r\n\r\n                                this.state.sheet_map.cellText(this.state.selected_row_i, this.state.selected_col_i, `${selected.first_name} ${selected.last_name}`)\r\n\r\n                                document.querySelector(\".results\").style.display = 'none';\r\n                                this.setState({\r\n                                    search_value: \"\",\r\n                                    sum_places: --this.state.sum_places\r\n                                });\r\n                                this.state.sheet_map.reRender();\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"pepole-list-ddl\">\r\n                        <Dropdown\r\n                            selection\r\n                            options={this.state.pepole_lists_options}\r\n                            value={this.state.pepole_list_selected ? this.state.pepole_list_selected.value : ''}\r\n                            onChange={this.changePepoleList}\r\n                        />\r\n\r\n                    </div>\r\n                    <div className=\"bottuns-row\">\r\n                        <Button onClick={this.saveChanges} color={'yellow'}\r\n                        >\r\n                            שמירה\r\n                                            <Icon name='save outline' />\r\n                        </Button>\r\n                        {this.state.cell_range != null && this.state.tur_selected == null &&\r\n                            <Button onClick={() => this.setState({ openSelectedTurModel: true })} color={'yellow'}\r\n                            >\r\n                                סמן טור\r\n                                            <Icon name='bookmark' />\r\n                            </Button>\r\n                        }\r\n                        {this.state.cell_range != null && this.state.tur_selected != null &&\r\n                            <Button onClick={this.delete_tur} color={'yellow'}\r\n                            >\r\n                                מחק טור\r\n                                            <Icon name='bookmark' />\r\n                            </Button>\r\n                        }\r\n\r\n\r\n                        <Route render={({ history }) => (\r\n                            <Button onClick={() => {\r\n                                history.push('/list')\r\n                            }} color={'yellow'}\r\n                            >\r\n                                מעבר לרשימות\r\n                                <Icon name='list' />\r\n                            </Button>\r\n                        )} />\r\n                        <Label className=\"places-label\">\r\n                            מס' מקומות שנותרו לסידור\r\n                            <Label.Detail>{this.state.sum_places}</Label.Detail>\r\n                        </Label>\r\n                    </div>\r\n                </section>\r\n                <section>\r\n                    {this.state.error != null &&\r\n                        <Message\r\n                            error\r\n                            header=' שגיאה '\r\n                            content={this.state.error}\r\n                        />\r\n                    }\r\n                    {this.state.message != null &&\r\n                        <Message\r\n                            info\r\n                            header=' '\r\n                            content={this.state.message}\r\n                        />\r\n                    }\r\n                    <div id=\"x-spreadsheet-map\"></div>\r\n                </section>\r\n                <Modal\r\n                    closeIcon={true} dimmer={'blurring'}\r\n                    onClose={() => {\r\n                        this.setState({ openSelectedTurModel: false });\r\n                    }}\r\n                    open={this.state.openSelectedTurModel}\r\n                    className='export-modal'\r\n                >\r\n                    <Modal.Header>תן שם לקבוצת התאים המסומנת, הטור במפה ירשם לפי שם זה</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Button disabled={this.state.tur_name === \"\"} onClick={() => {\r\n                                if (this.state.cell_range.sri === 0) {\r\n                                    this.setState({\r\n                                        openSelectedTurModel: false,\r\n                                        error: \"השורה שמעל הטור שסימנת לא פנויה, רד שורה כדי לאפשר כותרת\"\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    let turim = this.state.turim;\r\n\r\n                                    if (turim.find(t => t.tur_name === this.state.tur_name)) {\r\n                                        this.setState({\r\n                                            openSelectedTurModel: false,\r\n                                            error: \"השם שבחרת לטור כבר קיים\"\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        turim.push({ tur_name: this.state.tur_name, cell_range: this.state.cell_range })\r\n\r\n                                        let data = this.state.data;\r\n                                        //paint background on map\r\n                                        if (!data) {\r\n                                            data = {};\r\n                                            data.name = this.state.sheet_map.datas[0].name;\r\n                                            data.freeze = \"A1\";\r\n                                            data.styles = [];\r\n                                            data.merges = [];\r\n                                            data.rows = {};\r\n                                            data.cols = { \"len\": 22 };\r\n                                            data.validations = [];\r\n                                            data.autofilter = {};\r\n                                        }\r\n                                        //insert header\r\n                                        data.merges.push(`${this.numToSSColumn(this.state.cell_range.sci + 1)}:${this.state.cell_range.sri - 1}, ${this.numToSSColumn(this.state.cell_range.eci + 1)}:${this.state.cell_range.sri - 1}`);\r\n                                        if (!data.rows[this.state.cell_range.sri - 1])\r\n                                            data.rows[this.state.cell_range.sri - 1] = {};\r\n                                        if (!data.rows[this.state.cell_range.sri - 1].cells)\r\n                                            data.rows[this.state.cell_range.sri - 1].cells = {}\r\n                                        if (!data.rows[this.state.cell_range.sri - 1].cells[this.state.cell_range.sci])\r\n                                            data.rows[this.state.cell_range.sri - 1].cells[this.state.cell_range.sci] = {}\r\n                                        data.rows[this.state.cell_range.sri - 1].cells[this.state.cell_range.sci].merge = [0, this.state.cell_range.eci - this.state.cell_range.sci];\r\n\r\n                                        data.styles.push({ bgcolor: '#e7e5e6', font: { size: 14 }, color: \"white\" });\r\n                                        data.rows[this.state.cell_range.sri - 1].cells[this.state.cell_range.sci].style = data.styles.length - 1\r\n                                        data.rows[this.state.cell_range.sri - 1].cells[this.state.cell_range.sci].text = this.state.tur_name;\r\n\r\n                                        //change bg_color to all selected cells\r\n                                        data.styles.push({ \"bgcolor\": \"#deeaf6\" });\r\n                                        for (let start_row = this.state.cell_range.sri; start_row <= this.state.cell_range.eri; start_row++) {\r\n                                            if (!data.rows[start_row]) {\r\n                                                data.rows[start_row] = { cells: {} }\r\n                                            }\r\n                                            let cells = data.rows[start_row].cells;\r\n                                            for (let start_cell = this.state.cell_range.sci; start_cell <= this.state.cell_range.eci; start_cell++) {\r\n                                                if (!cells[start_cell])\r\n                                                    cells[start_cell] = {};\r\n                                                if (!cells[start_cell].style)\r\n                                                    cells[start_cell].style = data.styles.length - 1;\r\n                                            }\r\n                                        }\r\n                                        this.state.sheet_map.loadData(data);\r\n                                        this.setState({\r\n                                            turim: turim,\r\n                                            tur_name: \"\", cell_range: null, openMarkModel: false,\r\n                                            data: data\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }}>\r\n                                שמירה\r\n                            </Button>\r\n                            &nbsp; &nbsp; &nbsp;\r\n                            <Input placeholder=\"שם הטור\" onChange={(e) => {\r\n                                this.setState({ tur_name: e.target.value })\r\n                            }}></Input>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                </Modal>\r\n            </div >\r\n        )\r\n    }\r\n}","D:\\Apps\\makom\\ui\\src\\components\\Login.js",["117","118","119","120"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { CURRENT_VERSION, API } from '../utils/constants';\r\nimport {\r\n    Message,\r\n    Label,\r\n    Button,\r\n    Icon,\r\n    Container,\r\n    Form,\r\n    Image\r\n} from 'semantic-ui-react';\r\nimport LOGO from '../images/makom_logo.jpg'\r\n\r\nexport class LoginPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            error: null,\r\n            login_success: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    login = () => {\r\n        this.setState({ error: null });\r\n        if (!this.state.email || !this.state.password) {\r\n            this.setState({ error: \"חובה להזין מייל משתמש וסיסמה\" });\r\n            return\r\n        }\r\n        let reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        if (reg.test(this.state.email) === false) {\r\n            this.setState({ error: \"אימייל לא תקין\" });\r\n            return\r\n        }\r\n        axios.post(`${API}auth/login`, { email: this.state.email, password: this.state.password })\r\n            .then(response => {\r\n                console.log(response);\r\n                if (response.data) {\r\n                    if (!response.data.success) {\r\n                        this.setState({ error: response.data.error == \"Auth Error\" ? \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" : \"משתמש לא קיים\" })\r\n                    }\r\n                    else {\r\n                        localStorage.setItem('user_data', JSON.stringify(response.data));\r\n                        this.setState({ login_success: true });\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                console.error('There was an error!', error);\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const env = 'DEV';\r\n        const versionLabel = `VER  ${CURRENT_VERSION} - ${env}`;\r\n        const login_success = this.state.login_success;\r\n\r\n        if (login_success)\r\n            window.location.reload();\r\n        return (\r\n            <div style={{ backgroundColor: '#E8E8E8', height: '100%' }} >\r\n                {/* <Label content={versionLabel} attached=\"top right\" size={'large'} /> */}\r\n                <Label attached=\"bottom right\" size={'large'}>\r\n                    Copyright\r\n                    <Icon name={'copyright outline'} style={{ marginLeft: '5px', marginRight: '5px' }} />\r\n                    {new Date().getFullYear()} Dovi Perla All Rights Reserved\r\n                </Label>\r\n\r\n                <Container textAlign={'center'} text>\r\n                    <br />\r\n                    <Image style={{ margin: 'auto' }} src={LOGO} rounded></Image>\r\n                    <br />\r\n\r\n                    <Form error={this.state.error != null}>\r\n                        {/* <Image src={LOGO} centered inline circular /> */}\r\n                        <Message floating>\r\n                            <Form.Field>\r\n                                <Form.Input\r\n                                    placeholder=\"מייל\"\r\n                                    icon=\"user\"\r\n                                    iconPosition=\"left\"\r\n                                    onChange={(e, data) => {\r\n                                        this.setState({ email: data.value.trim() });\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <Form.Input\r\n                                    type={'password'}\r\n                                    placeholder=\"סיסמה\"\r\n                                    icon=\"lock\"\r\n                                    iconPosition=\"left\"\r\n                                    onChange={(e, data) => {\r\n                                        this.setState({ password: data.value });\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <Button type=\"submit\"\r\n                                    color={'yellow'}\r\n                                    content={\"כניסה\"}\r\n                                    fluid\r\n                                    size={'massive'}\r\n                                    onClick={this.login}\r\n                                />\r\n                            </Form.Field>\r\n                            {this.state.error != null &&\r\n                                <Message\r\n                                    error\r\n                                    header=' שגיאה '\r\n                                    content={this.state.error}\r\n                                />\r\n                            }\r\n                        </Message>\r\n                    </Form>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}","D:\\Apps\\makom\\ui\\src\\App.js",[],"D:\\Apps\\makom\\ui\\src\\reportWebVitals.js",[],"D:\\Apps\\makom\\ui\\src\\components\\PrintScreen.js",["121","122","123"],"import React from 'react';\r\nimport { CSVLink } from \"react-csv\";\r\nimport {\r\n    Button,\r\n    Icon\r\n} from 'semantic-ui-react';\r\n\r\nexport class PrintScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            index_file_name: null,\r\n            index_data: [],\r\n            csv_download: false\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState?.index_data?.length === 0 && this.state?.index_data?.length > 0) {\r\n            console.log(this.state?.index_data)\r\n            this.convert_json_to_csv(this.state.index_data, this.state.index_file_name)\r\n        }\r\n    }\r\n\r\n\r\n    render_index_rows = () => {\r\n        const print_data = this.props.print_data;\r\n        let gridTemplateRows = '';\r\n        for (let index = 0; index < print_data.sum_rows; index++) {\r\n            gridTemplateRows += `80px `\r\n        }\r\n        let style = {\r\n            display: 'grid',\r\n            gridTemplateColumns: `150px`,\r\n            gridTemplateRows: gridTemplateRows,\r\n        }\r\n        return <div style={style}>\r\n            {\r\n                this.render_index_row()\r\n            }\r\n        </div>\r\n    }\r\n\r\n    render_index_row = () => {\r\n        let coulmns = [];\r\n        const print_data = this.props.print_data;\r\n        const style = {\r\n            backgroundColor: 'gray',\r\n            color: 'white',\r\n            border: '1px solid #A5A5A5',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        }\r\n        let row_index = 0;\r\n        for (let index = 0; index < print_data.sum_rows; index++) {\r\n            const exist = print_data.rows.includes(index + 1)\r\n            if (exist)\r\n                row_index++;\r\n            coulmns.push(<div tabIndex=\"0\"\r\n                style={style}>\r\n                {exist ? row_index : ''}\r\n                {/* {key} */}\r\n            </div>)\r\n        }\r\n        return coulmns;\r\n    }\r\n\r\n    render_index_coulmns = () => {\r\n        const print_data = this.props.print_data;\r\n        let gridTemplateColumns = '';\r\n        for (let index = 0; index <= print_data.sum_coulmns; index++) {\r\n            gridTemplateColumns += `150px `\r\n        }\r\n        let style = {\r\n            display: 'grid',\r\n            gridTemplateColumns: gridTemplateColumns,\r\n            gridTemplateRows: `80px`,\r\n\r\n        }\r\n        return <div style={style}>\r\n            {\r\n                this.render_index_coulmn()\r\n            }\r\n        </div>\r\n    }\r\n\r\n    render_index_coulmn = () => {\r\n        let coulmns = [];\r\n        const print_data = this.props.print_data;\r\n        const text_coulmns = print_data.coulmns;\r\n        const style = {\r\n            backgroundColor: 'gray',\r\n            color: 'white',\r\n            border: '1px solid #A5A5A5',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        }\r\n        //insert first empty coulmn\r\n        coulmns.push(<div tabIndex=\"0\" style={style}></div>)\r\n        let coulmn_index = 0;\r\n        for (let index = 0; index <= print_data.sum_coulmns; index++) {\r\n            let text = '';\r\n            if (text_coulmns.includes(index + 1)) {\r\n                text = this.gematriya(coulmn_index + 1);\r\n                coulmn_index++;\r\n            }\r\n            coulmns.push(<div tabIndex=\"0\"\r\n                style={style}>\r\n                {text}\r\n            </div>)\r\n        }\r\n        return coulmns;\r\n    }\r\n\r\n    gematriya = (number) => {\r\n        const gematriya_obj = {\r\n            1: 'א', 2: 'ב', 3: 'ג', 4: 'ד', 5: 'ה', 6: 'ו', 7: 'ז', 8: 'ח', 9: 'ט', 10: 'י',\r\n            11: 'יא', 12: 'יב', 13: 'יג', 14: 'יד', 15: 'טו', 16: 'טז', 17: 'יז', 18: 'יח', 19: 'יט', 20: 'כ',\r\n            21: 'כא', 22: 'כב', 23: 'כג', 24: 'כד', 25: 'כה', 26: 'כו', 27: 'כז', 28: 'כח', 29: 'כט', 30: 'ל',\r\n            31: 'לא', 32: 'לב', 33: 'לג', 34: 'לד', 35: 'לה', 36: 'לו', 37: 'לז', 38: 'לח', 39: 'לט', 40: 'מ',\r\n            41: 'מא', 42: 'מב', 43: 'מג', 44: 'מד', 45: 'מה', 46: 'מו', 47: 'מז', 48: 'מח', 49: 'מט', 50: 'נ',\r\n            51: 'נא', 52: 'נב', 53: 'נג', 54: 'נד', 55: 'נה', 56: 'נו', 57: 'נז', 58: 'נח', 59: 'נט', 60: 'ס',\r\n            61: 'סא', 62: 'סב', 63: 'סג', 64: 'סד', 65: 'סה', 66: 'סו', 67: 'סז', 68: 'סח', 69: 'סט', 70: 'ע',\r\n            71: 'עא', 72: 'עב', 73: 'עג', 74: 'עג', 75: 'עה', 76: 'עו', 77: 'עז', 78: 'עח', 79: 'עט', 80: 'פ',\r\n            81: 'פא', 82: 'פב', 83: 'פג', 84: 'פד', 85: 'פה', 86: 'פו', 87: 'פז', 88: 'פח', 89: 'פט', 90: 'צ',\r\n            91: 'צא', 92: 'צב', 93: 'צג', 94: 'צד', 95: 'צה', 96: 'צו', 97: 'צז', 98: 'צח', 99: 'צט', 100: 'ק',\r\n        }\r\n\r\n        return gematriya_obj[number];\r\n    }\r\n\r\n    render_print_container = () => {\r\n        const print_data = this.props.print_data;\r\n        let gridTemplateColumns = '';\r\n        let gridTemplateRows = '';\r\n\r\n        for (let index = 0; index < print_data.sum_coulmns; index++) {\r\n            gridTemplateColumns += `150px `\r\n        }\r\n        for (let index = 0; index < print_data.sum_rows; index++) {\r\n            gridTemplateRows += `80px `\r\n        }\r\n\r\n        let style = {\r\n            display: 'grid',\r\n            gridTemplateColumns: gridTemplateColumns,\r\n            gridTemplateRows: gridTemplateRows\r\n        }\r\n        return <div style={style}>\r\n            {\r\n                this.render_print_grid()\r\n            }\r\n        </div>\r\n    }\r\n\r\n    render_print_grid = () => {\r\n        let index_arr = [];\r\n        let coulmns = [];\r\n        const print_data = this.props.print_data;\r\n        let cells = [];\r\n        const start_row = Math.min(...print_data.rows);\r\n        const end_row = Math.max(...print_data.rows);\r\n        const start_coulmn = Math.min(...print_data.coulmns);\r\n        const end_coulmn = Math.max(...print_data.coulmns);\r\n\r\n        let style = {};\r\n\r\n        style.border = '1px solid #A5A5A5';\r\n        style.display = 'flex';\r\n        style.justifyContent = 'center';\r\n        style.alignItems = 'center';\r\n\r\n        for (let row = start_row; row <= end_row; row++) {\r\n            for (let col = start_coulmn; col <= end_coulmn; col++) {\r\n                cells.push((row * this.props.numbers_of_cells_in_row) + col)\r\n            }\r\n        }\r\n        cells = cells.sort((a, b) => { return a - b });\r\n        for (let index = 0; index < cells.length; index++) {\r\n            coulmns.push(\r\n                this.render_print_coulmn(cells[index], index_arr)\r\n            );\r\n        }\r\n\r\n        const index_file_name = `${this.props.selected_time === 'kipur' ? ' יום כיפור' : ' ראש השנה'} ${this.props.pepole_list_data.find(d => d.id === this.props.selected_year).name}`\r\n        if (this.state?.index_data?.length === 0)\r\n            this.setState({ index_file_name: index_file_name, index_data: index_arr });\r\n        return coulmns;\r\n    }\r\n\r\n    convert_json_to_csv = (index_data, index_file_name) => {\r\n        let csvContent = \"data:text/csv;charset=utf-8,%EF%BB%BF\";\r\n        for (let index = 0; index < index_data.length; index++) {\r\n            csvContent += Object.values(index_data[index]).join(\",\");\r\n            csvContent += \"\\n\"\r\n        }\r\n        console.log(csvContent);\r\n        // const encodedUri = encodeURI(csvContent);\r\n        const link = document.createElement(\"a\");\r\n        link.setAttribute(\"href\", csvContent);\r\n        link.setAttribute(\"download\", index_file_name);\r\n        document.body.appendChild(link);\r\n\r\n        link.click();\r\n    }\r\n\r\n    get_text = (key) => {\r\n        const text_cell = this.props.text_cells.find(c => c.key === key);\r\n        if (!text_cell)\r\n            return '';\r\n        // if (text_cell.selected_pepole)\r\n        //     return text_cell.selected_pepole.name\r\n        return text_cell;\r\n    }\r\n\r\n    get_style = (key) => {\r\n        const selected_style = this.props.cells_style.find(s => s.key === key);\r\n        if (!selected_style)\r\n            return {};\r\n        return { ...selected_style };\r\n    }\r\n\r\n    render_print_coulmn = (cell, index_arr) => {\r\n        const merge_cell = this.props.merge_cells.find(c => c.key === cell);\r\n        //ignore keys of cells that spans by mrege cell\r\n        if (this.props.merge_cells.find(c => c.ignore_cells.includes(cell)))\r\n            return\r\n        let style = this.get_style(cell);\r\n        let text = '';\r\n        const text_cell = this.props.text_cells.find(c => c.key === cell);\r\n        if (text_cell) {\r\n            if (text_cell.selected_pepole?.name) {\r\n                index_arr.push({ name: text_cell.selected_pepole.name, index: `${Math.round(cell / 100)}, ${this.gematriya(cell % 100)}` })\r\n                text = text_cell.selected_pepole.name;\r\n            }\r\n            else\r\n                text = text_cell.text\r\n            style.border = '1px solid #A5A5A5';\r\n        }\r\n\r\n        if (!style.display) {\r\n            style.display = 'flex';\r\n            style.justifyContent = 'center';\r\n            style.alignItems = 'center';\r\n        }\r\n\r\n        if (merge_cell) {\r\n            style.gridColumn = `span ${merge_cell.coulmns}`;\r\n            style.gridRow = `span ${merge_cell.rows}`;\r\n        }\r\n        return <div key={cell} tabIndex=\"0\"\r\n            style={style}>\r\n            {text}\r\n            {/* {key} */}\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                {/* <div>\r\n                    <Button className='print_btns' style={{ backgroundColor: '#FAAF40', color: 'white' }} onClick={() => this.downloder.link.click()}\r\n                    >\r\n                        <Icon name='save outline' />\r\n                        <CSVLink\r\n                            filename={`${this.state.index_file_name}.csv`} ref={rf => this.downloder = rf} data={this.state.index_data}>הדפס אינדקס</CSVLink>\r\n                    </Button>\r\n                </div> */}\r\n\r\n\r\n                <div style={{ width: '100%', overflowX: 'auto', overflowY: 'auto' }} ref={rf => this.scroller = rf} onScroll={(event, data) => {\r\n                    this.container.scrollLeft = this.scroller.scrollLeft\r\n                }}>\r\n                    {\r\n                        this.render_index_coulmns()\r\n                    }\r\n                </div>\r\n                <div style={{ display: 'flex' }} >\r\n                    <div>\r\n                        {\r\n                            this.render_index_rows()\r\n                        }\r\n                    </div>\r\n                    <div style={{ width: '100%', overflowX: 'hidden', overflowY: 'auto' }} ref={rf => this.container = rf} >\r\n                        {\r\n                            this.render_print_container()\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}",{"ruleId":"124","severity":1,"message":"125","line":268,"column":80,"nodeType":"126","messageId":"127","endLine":268,"endColumn":82},{"ruleId":"124","severity":1,"message":"125","line":389,"column":31,"nodeType":"126","messageId":"127","endLine":389,"endColumn":33},{"ruleId":"124","severity":1,"message":"128","line":559,"column":82,"nodeType":"126","messageId":"127","endLine":559,"endColumn":84},{"ruleId":"124","severity":1,"message":"128","line":559,"column":116,"nodeType":"126","messageId":"127","endLine":559,"endColumn":118},{"ruleId":"124","severity":1,"message":"128","line":559,"column":152,"nodeType":"126","messageId":"127","endLine":559,"endColumn":154},{"ruleId":"124","severity":1,"message":"128","line":565,"column":78,"nodeType":"126","messageId":"127","endLine":565,"endColumn":80},{"ruleId":"124","severity":1,"message":"128","line":565,"column":112,"nodeType":"126","messageId":"127","endLine":565,"endColumn":114},{"ruleId":"124","severity":1,"message":"128","line":565,"column":148,"nodeType":"126","messageId":"127","endLine":565,"endColumn":150},{"ruleId":"124","severity":1,"message":"128","line":571,"column":78,"nodeType":"126","messageId":"127","endLine":571,"endColumn":80},{"ruleId":"124","severity":1,"message":"128","line":571,"column":112,"nodeType":"126","messageId":"127","endLine":571,"endColumn":114},{"ruleId":"124","severity":1,"message":"128","line":571,"column":148,"nodeType":"126","messageId":"127","endLine":571,"endColumn":150},{"ruleId":"124","severity":1,"message":"125","line":635,"column":120,"nodeType":"126","messageId":"127","endLine":635,"endColumn":122},{"ruleId":"124","severity":1,"message":"125","line":640,"column":101,"nodeType":"126","messageId":"127","endLine":640,"endColumn":103},{"ruleId":"124","severity":1,"message":"125","line":645,"column":114,"nodeType":"126","messageId":"127","endLine":645,"endColumn":116},{"ruleId":"124","severity":1,"message":"128","line":678,"column":69,"nodeType":"126","messageId":"127","endLine":678,"endColumn":71},{"ruleId":"124","severity":1,"message":"125","line":268,"column":80,"nodeType":"126","messageId":"127","endLine":268,"endColumn":82},{"ruleId":"129","severity":1,"message":"130","line":5,"column":5,"nodeType":"131","messageId":"132","endLine":7,"endColumn":6},{"ruleId":"129","severity":1,"message":"130","line":8,"column":5,"nodeType":"131","messageId":"132","endLine":10,"endColumn":6},{"ruleId":"129","severity":1,"message":"130","line":5,"column":5,"nodeType":"131","messageId":"132","endLine":7,"endColumn":6},{"ruleId":"133","severity":2,"message":"134","line":16,"column":34,"nodeType":"135","endLine":16,"endColumn":38},{"ruleId":"133","severity":2,"message":"134","line":21,"column":34,"nodeType":"135","endLine":21,"endColumn":38},{"ruleId":"124","severity":1,"message":"128","line":36,"column":73,"nodeType":"126","messageId":"127","endLine":36,"endColumn":75},{"ruleId":"124","severity":1,"message":"128","line":37,"column":73,"nodeType":"126","messageId":"127","endLine":37,"endColumn":75},{"ruleId":"124","severity":1,"message":"125","line":42,"column":89,"nodeType":"126","messageId":"127","endLine":42,"endColumn":91},{"ruleId":"124","severity":1,"message":"128","line":47,"column":71,"nodeType":"126","messageId":"127","endLine":47,"endColumn":73},{"ruleId":"136","severity":2,"message":"137","line":158,"column":44,"nodeType":"138","messageId":"139","endLine":158,"endColumn":54},{"ruleId":"124","severity":1,"message":"125","line":158,"column":55,"nodeType":"126","messageId":"127","endLine":158,"endColumn":57},{"ruleId":"136","severity":2,"message":"137","line":158,"column":83,"nodeType":"138","messageId":"139","endLine":158,"endColumn":93},{"ruleId":"133","severity":2,"message":"140","line":164,"column":34,"nodeType":"135","endLine":164,"endColumn":47},{"ruleId":"136","severity":2,"message":"141","line":187,"column":44,"nodeType":"138","messageId":"139","endLine":187,"endColumn":52},{"ruleId":"124","severity":1,"message":"125","line":187,"column":53,"nodeType":"126","messageId":"127","endLine":187,"endColumn":55},{"ruleId":"136","severity":2,"message":"141","line":187,"column":81,"nodeType":"138","messageId":"139","endLine":187,"endColumn":89},{"ruleId":"133","severity":2,"message":"140","line":193,"column":34,"nodeType":"135","endLine":193,"endColumn":47},{"ruleId":"124","severity":1,"message":"128","line":222,"column":89,"nodeType":"126","messageId":"127","endLine":222,"endColumn":91},{"ruleId":"142","severity":1,"message":"143","line":15,"column":5,"nodeType":"138","messageId":"144","endLine":15,"endColumn":11},{"ruleId":"142","severity":1,"message":"145","line":22,"column":5,"nodeType":"138","messageId":"144","endLine":22,"endColumn":9},{"ruleId":"142","severity":1,"message":"146","line":26,"column":8,"nodeType":"138","messageId":"144","endLine":26,"endColumn":17},{"ruleId":"142","severity":1,"message":"147","line":30,"column":10,"nodeType":"138","messageId":"144","endLine":30,"endColumn":32},{"ruleId":"142","severity":1,"message":"148","line":30,"column":34,"nodeType":"138","messageId":"144","endLine":30,"endColumn":39},{"ruleId":"142","severity":1,"message":"149","line":34,"column":5,"nodeType":"138","messageId":"144","endLine":34,"endColumn":19},{"ruleId":"124","severity":1,"message":"128","line":197,"column":60,"nodeType":"126","messageId":"127","endLine":197,"endColumn":62},{"ruleId":"124","severity":1,"message":"128","line":278,"column":70,"nodeType":"126","messageId":"127","endLine":278,"endColumn":72},{"ruleId":"124","severity":1,"message":"128","line":279,"column":74,"nodeType":"126","messageId":"127","endLine":279,"endColumn":76},{"ruleId":"150","severity":1,"message":"151","line":326,"column":87,"nodeType":"152","messageId":"127","endLine":326,"endColumn":95},{"ruleId":"142","severity":1,"message":"153","line":378,"column":17,"nodeType":"138","messageId":"144","endLine":378,"endColumn":28},{"ruleId":"124","severity":1,"message":"128","line":415,"column":75,"nodeType":"126","messageId":"127","endLine":415,"endColumn":77},{"ruleId":"142","severity":1,"message":"154","line":535,"column":15,"nodeType":"138","messageId":"144","endLine":535,"endColumn":23},{"ruleId":"142","severity":1,"message":"155","line":537,"column":15,"nodeType":"138","messageId":"144","endLine":537,"endColumn":22},{"ruleId":"142","severity":1,"message":"156","line":539,"column":13,"nodeType":"138","messageId":"144","endLine":539,"endColumn":19},{"ruleId":"142","severity":1,"message":"157","line":4,"column":15,"nodeType":"138","messageId":"144","endLine":4,"endColumn":22},{"ruleId":"142","severity":1,"message":"158","line":54,"column":15,"nodeType":"138","messageId":"144","endLine":54,"endColumn":28},{"ruleId":"124","severity":1,"message":"128","line":166,"column":78,"nodeType":"126","messageId":"127","endLine":166,"endColumn":80},{"ruleId":"142","severity":1,"message":"159","line":459,"column":39,"nodeType":"138","messageId":"144","endLine":459,"endColumn":47},{"ruleId":"160","severity":1,"message":"161","line":477,"column":51,"nodeType":"162","endLine":477,"endColumn":61},{"ruleId":"163","severity":1,"message":"164","line":37,"column":26,"nodeType":"165","messageId":"166","endLine":37,"endColumn":27,"suggestions":"167"},{"ruleId":"163","severity":1,"message":"164","line":37,"column":42,"nodeType":"165","messageId":"166","endLine":37,"endColumn":43,"suggestions":"168"},{"ruleId":"124","severity":1,"message":"125","line":47,"column":68,"nodeType":"126","messageId":"127","endLine":47,"endColumn":70},{"ruleId":"142","severity":1,"message":"169","line":63,"column":15,"nodeType":"138","messageId":"144","endLine":63,"endColumn":27},{"ruleId":"142","severity":1,"message":"170","line":2,"column":10,"nodeType":"138","messageId":"144","endLine":2,"endColumn":17},{"ruleId":"142","severity":1,"message":"171","line":4,"column":5,"nodeType":"138","messageId":"144","endLine":4,"endColumn":11},{"ruleId":"142","severity":1,"message":"172","line":5,"column":5,"nodeType":"138","messageId":"144","endLine":5,"endColumn":9},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/jsx-no-undef","'Icon' is not defined.","JSXIdentifier","no-undef","'font_color' is not defined.","Identifier","undef","'CompactPicker' is not defined.","'bg_color' is not defined.","no-unused-vars","'Search' is defined but never used.","unusedVar","'List' is defined but never used.","'CSVReader' is defined but never used.","'SemanticToastContainer' is defined but never used.","'toast' is defined but never used.","'search_timeout' is defined but never used.","no-dupe-keys","Duplicate key 'pageData'.","ObjectExpression","'uploadError' is assigned a value but never used.","'pageData' is assigned a value but never used.","'rowKeys' is assigned a value but never used.","'hedear' is assigned a value but never used.","'HEADERS' is defined but never used.","'keyboardEvent' is assigned a value but never used.","'cell_key' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["173","174"],["175","176"],"'versionLabel' is assigned a value but never used.","'CSVLink' is defined but never used.","'Button' is defined but never used.","'Icon' is defined but never used.",{"messageId":"177","fix":"178","desc":"179"},{"messageId":"180","fix":"181","desc":"182"},{"messageId":"177","fix":"183","desc":"179"},{"messageId":"180","fix":"184","desc":"182"},"removeEscape",{"range":"185","text":"186"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"187","text":"188"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"189","text":"186"},{"range":"190","text":"188"},[832,833],"",[832,832],"\\",[848,849],[848,848]]