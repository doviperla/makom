[{"D:\\Apps\\makom\\ui\\src\\components\\Home.js":"1","D:\\Apps\\makom\\ui\\src\\utils\\constants.js":"2","D:\\Apps\\makom\\ui\\src\\index.js":"3","D:\\Apps\\makom\\ui\\src\\styles.js":"4","D:\\Apps\\makom\\ui\\src\\reportWebVitals.js":"5","D:\\Apps\\makom\\ui\\src\\App.js":"6","D:\\Apps\\makom\\ui\\src\\components\\Login.js":"7","D:\\Apps\\makom\\ui\\src\\utils\\interceptor.js":"8"},{"size":39139,"mtime":1614861153239,"results":"9","hashOfConfig":"10"},{"size":1470,"mtime":1614868111847,"results":"11","hashOfConfig":"10"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":360,"mtime":1614067690423,"results":"13","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"10"},{"size":678,"mtime":1614604872901,"results":"15","hashOfConfig":"10"},{"size":4872,"mtime":1614767651837,"results":"16","hashOfConfig":"10"},{"size":452,"mtime":1614845695799,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1iv6y4h",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"D:\\Apps\\makom\\ui\\src\\components\\Home.js",["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57"],"import React from 'react';\r\nimport _ from 'lodash'\r\nimport axios from 'axios';\r\nimport { API, HEADERS } from '../utils/constants';\r\nimport {\r\n    Segment,\r\n    Table,\r\n    Grid,\r\n    Button,\r\n    Icon,\r\n    Pagination,\r\n    Dropdown,\r\n    Menu,\r\n    Popup,\r\n    Search,\r\n    Form,\r\n    Input,\r\n    Modal,\r\n    Message,\r\n    Dimmer,\r\n    Loader\r\n} from 'semantic-ui-react';\r\nimport ContentEditable from 'react-contenteditable'\r\nimport axiosInterceptor from '../utils/interceptor'\r\nimport { CSVLink } from \"react-csv\";\r\nimport CSVReader from 'react-csv-reader';\r\n\r\nlet search_timeout;\r\n\r\nexport class ListPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pepole: [],\r\n            isLoading: true,\r\n            error: null,\r\n            itemsPerPage: 10,\r\n            pageData: [],\r\n            showUpdatesButtons: false,\r\n            currentPage: 1,\r\n            totalPages: 0,\r\n            user: '',\r\n            token: null,\r\n            contextMenuOpen: false,\r\n            selectedRow: null,\r\n            contextRef: null,\r\n            addRow: false,\r\n            search_loading: false,\r\n            search_value: '',\r\n            search_results: [],\r\n            sort_coulmn: null,\r\n            sort_direction: null,\r\n            openExportModal: false,\r\n            exportData: [],\r\n            exportFileName: '',\r\n            importFileName: '',\r\n            account_name: '',\r\n            account_logo: '',\r\n            account_id: null,\r\n            pepole_lists_options: [],\r\n            pepole_list_selected: null,\r\n            openDeleteModel: false,\r\n            new_list_name: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let user = localStorage.getItem('user_data');\r\n        if (user) {\r\n            user = JSON.parse(user).user;\r\n            axios.post(`${API}/pepole/get-all`, { token: user.token, pepole_list_id: null })\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        if (response.data.pepole.length > 0) {\r\n                            const pepole = response.data.pepole;\r\n                            const pepole_lists = response.data.pepole_lists;\r\n                            const totalPages = parseInt(pepole.length / this.state.itemsPerPage);\r\n\r\n                            let pepole_lists_options = pepole_lists.map(p => {\r\n                                return {\r\n                                    key: p.id,\r\n                                    text: p.name,\r\n                                    value: p.id\r\n                                }\r\n                            })\r\n\r\n                            this.setState({\r\n                                pepole: pepole, pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                                totalPages: totalPages, pepole_lists_options: pepole_lists_options,\r\n                                pepole_list_selected: pepole_lists_options[pepole_lists_options.length - 1],\r\n                                user: `${user.firstName} - ${user.lastName}`,\r\n                                token: user.token, account_name: user.account_name, account_logo: user.account_logo,\r\n                                account_id: user.account_id, isLoading: false\r\n                            })\r\n                        }\r\n                    }\r\n                    else\r\n                        this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                    console.error('There was an error!', error);\r\n                });\r\n        }\r\n        else\r\n            window.location('/');\r\n    }\r\n\r\n    newRow = () => {\r\n        let row = {};\r\n        const rowKeys = Object.keys(this.state.pepole[0]);\r\n        rowKeys.forEach(prop => {\r\n            row[prop] = '';\r\n        });\r\n        row.id = new Date().getDate();\r\n        row.added = true;\r\n        row.pepole_list_id = this.state.pepole_list_selected.key;\r\n        return row;\r\n    }\r\n\r\n    handleContentEditable = event => {\r\n        const value = event.target.value;\r\n        const column = event.currentTarget.dataset.column;\r\n        const row = event.currentTarget.dataset.row;\r\n        const added = event.currentTarget.dataset.new_row == 'true';\r\n\r\n        let { pageData } = this.state;\r\n\r\n        if (added === false) {\r\n            let updatedRow = pageData.find((item, i) => item.id == row);\r\n            updatedRow[column] = value;\r\n            updatedRow.changed = true;\r\n        }\r\n        else {\r\n            pageData[0][column] = value;\r\n        }\r\n        this.setState({\r\n            pageData: pageData,\r\n            showUpdatesButtons: true\r\n        })\r\n    }\r\n\r\n    downloadCsv = () => {\r\n        let data = [];\r\n        data.push(HEADERS.map(h => h.title));\r\n        const pepole = this.state.pepole;\r\n        for (let p of pepole) {\r\n            let arr = [];\r\n            for (let key in p) {\r\n                if (key != 'id' && key != 'changed' && key != 'pepole_list_id')\r\n                    arr.push(p[key]);\r\n            }\r\n            data.push(arr);\r\n        }\r\n        this.setState({ exportData: data, openExportModal: true })\r\n    }\r\n\r\n    validateRow = (changesList) => {\r\n        this.setState({ error: null })\r\n        let empty = true;\r\n        let isNotNumber;\r\n        let isValidate = true;\r\n\r\n        changesList.forEach(element => {\r\n            HEADERS.forEach(header => {\r\n                if (element[header.key] != \"\") {\r\n                    empty = false;\r\n                }\r\n            });\r\n        });\r\n        console.log(empty);\r\n        if (empty) {\r\n            this.setState({ error: \"לא ניתן להכניס שורה ריקה\" })\r\n            return false;\r\n        }\r\n        else {\r\n            for (const element of changesList) {\r\n                for (const header of HEADERS) {\r\n                    if (header.type === \"number\") {\r\n                        isNotNumber = isNaN(element[header.key]);\r\n                        if (isNotNumber && element[header.key] != '') {\r\n                            isValidate = false;\r\n                            this.setState({ error: `חובה להזין מספרים בלבד בשדה \"${header.title}\"` })\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return isValidate;\r\n        }\r\n    }\r\n\r\n    saveChanges = () => {\r\n        const changesList = this.state.pageData.filter(p => p.changed || p.added);\r\n        const validation = this.validateRow(changesList);\r\n        if (changesList.length > 0) {\r\n            if (validation) {\r\n                axios.post(`${API}/pepole/update-list`, { token: this.state.token, changesList: changesList })\r\n                    .then(response => {\r\n                        if (response.data.success) {\r\n                            //update pepole list\r\n                            let pepole = this.state.pepole;\r\n                            changesList.forEach(element => {\r\n                                if (element.changed) {\r\n                                    const index = _.findIndex(pepole, { id: element.id });\r\n                                    pepole.splice(index, 1, element);\r\n                                }\r\n                                else {\r\n                                    pepole.push(element);\r\n                                }\r\n                            });\r\n                            const totalPages = parseInt(pepole.length / this.state.itemsPerPage);\r\n\r\n                            this.setState({\r\n                                pepole: pepole, pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                                totalPages: totalPages, currentPage: 1, showUpdatesButtons: false\r\n                            })\r\n\r\n                        }\r\n                        else {\r\n                            this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                            console.error('There was an error!', response.data.error);\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                        console.error('There was an error!', error);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteRow = () => {\r\n        axios.post(`${API}/pepole/delete-row`, { token: this.state.token, row: this.state.selectedRow })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    this.setState({\r\n                        contextMenuOpen: false,\r\n                        pepole: this.state.pepole.filter(item => item.id != this.state.selectedRow),\r\n                        pageData: this.state.pageData.filter(item => item.id != this.state.selectedRow)\r\n                    });\r\n                }\r\n                else {\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n\r\n    createContextFromEvent = (e) => {\r\n        const left = e.clientX\r\n        const top = e.clientY\r\n        const right = left + 1\r\n        const bottom = top + 1\r\n\r\n        return {\r\n            getBoundingClientRect: () => ({\r\n                left,\r\n                top,\r\n                right,\r\n                bottom,\r\n\r\n                height: 0,\r\n                width: 0,\r\n            }),\r\n        }\r\n    }\r\n\r\n    switchPage = (event, data) => {\r\n        const pepole = this.state.pepole;\r\n        const start = (this.state.itemsPerPage * (data.activePage - 1));\r\n        const end = this.state.itemsPerPage * data.activePage;\r\n        const pageData = pepole.slice(start, end);\r\n\r\n        this.setState({ pageData: pageData, currentPage: data.activePage, showUpdatesButtons: false });\r\n    }\r\n\r\n    updateItemsPerPage = (event, data) => {\r\n        const itemsPerPage = data.value;\r\n        const pepole = this.state.pepole;\r\n        const totalPages = parseInt(pepole.length / itemsPerPage);\r\n        const pageData = pepole.slice(0, itemsPerPage);\r\n\r\n        this.setState({ itemsPerPage: itemsPerPage, totalPages: totalPages, pageData, pageData, currentPage: 1 })\r\n    }\r\n\r\n    signOut = () => {\r\n        axios.get(`${API}auth/logout`)\r\n            .then(response => {\r\n                if (response.data) {\r\n                    localStorage.removeItem('user_data');\r\n                    window.location.reload();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: error.response });\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n\r\n    addRow = () => {\r\n        let pageData = this.state.pageData;\r\n        const newRow = this.newRow();\r\n        pageData.splice(0, 0, newRow);\r\n        this.setState({ pageData: pageData, showUpdatesButtons: true });\r\n    }\r\n\r\n    handleSearchChange = (e, data) => {\r\n        clearTimeout(search_timeout);\r\n        this.setState({ search_loading: true, search_value: data.value })\r\n\r\n        search_timeout = setTimeout(() => {\r\n            if (data.value.length === 0) {\r\n                const pepole = this.state.pepole;\r\n                this.setState({\r\n                    pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                    currentPage: 1,\r\n                    search_loading: false\r\n                })\r\n                return\r\n            }\r\n\r\n            const re = new RegExp(_.escapeRegExp(data.value), 'i')\r\n            const isMatch = (result) => re.test(result.last_name) || re.test(result.first_name)\r\n\r\n            this.setState({ search_results: _.filter(this.state.pepole, isMatch), search_loading: false })\r\n        }, 300)\r\n    };\r\n\r\n    importFile = (data, fileInfo) => {\r\n        this.setState({ error: null, isLoading: true })\r\n        let uploadError = \"\";\r\n        if (fileInfo.type != \"application/vnd.ms-excel\")\r\n            uploadError = \"סוג הקובץ אינו נתמך\"\r\n        if (uploadError == \"\") {\r\n            if (data.length > 0) {\r\n                for (let header of HEADERS) {\r\n                    const headerFind = data[0].find((d) => d.replace('\"', '') === header.title.replace('\"', ''));\r\n                    if (!headerFind) {\r\n                        uploadError += `הכותרת \"${header.title}\" אינה קיימת`\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (uploadError == \"\") {\r\n            for (let row of data) {\r\n                if (row.length != HEADERS.length) {\r\n                    uploadError = \"כמות התאים אינה זהה לנדרש\"\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n        if (uploadError != \"\") {\r\n            uploadError += `\r\n       ! נסה להוריד את הטבלה הקיימת כדי לראות דוגמה לקובץ תקין`\r\n            this.setState({ error: uploadError, isLoading: false })\r\n        }\r\n        else {\r\n            const pepole_list_id = new Date().getTime()\r\n            const pepole_list = {\r\n                id: pepole_list_id,\r\n                name: fileInfo.name.split('.')[0], account_id: this.state.account_id\r\n            }\r\n\r\n            let pepole_list_data = [];\r\n\r\n            for (let index = 1; index < data.length; index++) {\r\n                const element = data[index];\r\n                let pepole_row = {};\r\n                pepole_row.id = new Date().getTime() + index;\r\n\r\n                pepole_row.pepole_list_id = pepole_list_id;\r\n                for (let header_index = 0; header_index < HEADERS.length; header_index++) {\r\n                    const header = HEADERS[header_index];\r\n                    if (header.type === \"number\")\r\n                        pepole_row[header.key] = parseInt(element[header_index]);\r\n                    else\r\n                        pepole_row[header.key] = element[header_index];\r\n                }\r\n                pepole_list_data.push(pepole_row);\r\n            }\r\n\r\n            axios.post(`${API}/pepole/add-new-list`, {\r\n                token: this.state.token, pepole_list: pepole_list,\r\n                pepole_list_data: pepole_list_data\r\n            })\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        window.location.reload();\r\n                    }\r\n                    else {\r\n                        this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                        console.error('There was an error!', response.data.error);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                    console.error('There was an error!', error);\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteList = () => {\r\n        this.setState({ error: null, isLoading: true, openDeleteModel: false })\r\n        axios.post(`${API}/pepole/delete-list`, {\r\n            token: this.state.token,\r\n            pepole_list_id: this.state.pepole_list_selected.key\r\n        })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    window.location.reload();\r\n                }\r\n                else {\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                    console.error('There was an error!', response.data.error);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n\r\n    changeListName = () => {\r\n        this.setState({ error: null, isLoading: true, openChangeNameModel: false })\r\n        axios.post(`${API}/pepole/change-name-list`, {\r\n            token: this.state.token,\r\n            pepole_list_id: this.state.pepole_list_selected.key,\r\n            pepole_list_name: this.state.new_list_name\r\n        })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    const new_pepole_list_selected = {\r\n                        key: this.state.pepole_list_selected.key,\r\n                        text: this.state.new_list_name,\r\n                        value: this.state.pepole_list_selected.value\r\n                    }\r\n\r\n                    let pepole_lists_options = this.state.pepole_lists_options;\r\n                    const index = _.findIndex(pepole_lists_options, { key: new_pepole_list_selected.key });\r\n                    pepole_lists_options.splice(index, 1, new_pepole_list_selected);\r\n                    pepole_lists_options = JSON.stringify(pepole_lists_options);\r\n\r\n                    this.setState({\r\n                        pepole_list_selected: new_pepole_list_selected,\r\n                        pepole_lists_options: JSON.parse(pepole_lists_options),\r\n                        isLoading: false\r\n                    })\r\n                }\r\n                else {\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                    console.error('There was an error!', response.data.error);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n\r\n    changePepoleList = (e, data) => {\r\n        this.setState({ error: null, isLoading: true })\r\n        axios.post(`${API}/pepole/get-all`, { token: this.state.token, pepole_list_id: data.value })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    if (response.data.pepole.length > 0) {\r\n                        const pepole = response.data.pepole;\r\n                        const totalPages = parseInt(pepole.length / this.state.itemsPerPage);\r\n\r\n                        const selectedPepoleList = this.state.pepole_lists_options.find((list) => list.key === data.value);\r\n\r\n                        this.setState({\r\n                            pepole: pepole, pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                            totalPages: totalPages, pepole_list_selected: selectedPepoleList, isLoading: false\r\n                        })\r\n                    }\r\n                }\r\n                else\r\n                    this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\", isLoading: false });\r\n                console.error('There was an error!', error);\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n        const pepole = this.state.pepole;\r\n        const pageData = this.state.pageData;\r\n        const headers = HEADERS;\r\n        const rowKeys = pepole.length > 0 ? Object.keys(pepole[0]) : [];\r\n        const totalPages = this.state.totalPages;\r\n        let hedear = this.state.account_name;\r\n        let pepole_list_selected_name = this.state.pepole_list_selected ? this.state.pepole_list_selected.text : \"\"\r\n\r\n        return (\r\n            <div dir=\"rtl\">\r\n                <Dimmer active={this.state.isLoading}>\r\n                    <Loader size=\"large\">נא המתן...</Loader>\r\n                </Dimmer>\r\n                <section >\r\n                    <Grid columns={3} className={'row-header header'}>\r\n                        <Grid.Row>\r\n                            <Grid.Column>\r\n                                <div>\r\n                                    <p>\r\n                                        {this.state.user}\r\n                                    </p>\r\n                                </div>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <div>\r\n                                    <pre>\r\n                                        <span className=\"header-title\">\r\n                                            {hedear}\r\n                                        </span>\r\n                                    </pre>\r\n                                </div>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </section>\r\n                <section className=\"functions-row\">\r\n                    <div className=\"search\">\r\n                        <Search\r\n                            loading={this.state.search_loading}\r\n                            onSearchChange={this.handleSearchChange}\r\n                            results={this.state.search_results}\r\n                            value={this.state.search_value}\r\n                            resultRenderer={(props) => {\r\n                                return `${props.first_name} ${props.last_name}`\r\n                            }}\r\n                            placeholder={\"חיפוש לפי שם \"}\r\n                            onResultSelect={(e, data) => {\r\n                                const selected = this.state.pepole.find((row) => row.id === data.result.id);\r\n                                this.setState({ pageData: [selected], currentPage: 1 });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div classNmae=\"pepole-list-ddl\">\r\n                        <Dropdown\r\n                            selection\r\n                            options={this.state.pepole_lists_options}\r\n                            value={this.state.pepole_list_selected ? this.state.pepole_list_selected.value : ''}\r\n                            onChange={this.changePepoleList}\r\n                        />\r\n                    </div>\r\n                    <div className=\"bottuns-row\">\r\n                        <Button onClick={this.signOut} color={'yellow'}\r\n                        >\r\n                            יציאה\r\n                                            <Icon name='sign-out' />\r\n                        </Button>\r\n                        <Button onClick={this.addRow} disabled={this.state.showUpdatesButtons} color={'yellow'}\r\n                        >\r\n                            הוספת שורה\r\n                                            <Icon name='add' />\r\n                        </Button>\r\n                        <Button onClick={this.downloadCsv} color={'yellow'} disabled={this.state.showUpdatesButtons}\r\n                        >\r\n                            הוצא לקובץ\r\n                                            <Icon name='file excel outline' />\r\n                        </Button>\r\n                        <Button color={'yellow'} disabled={this.state.showUpdatesButtons}\r\n                        >\r\n                            <CSVReader onFileLoaded={this.importFile} inputId=\"file\" inputName=\"file\" cssInputClass=\"inputfile\" />\r\n                            <label className=\"inputlabel\" htmlFor=\"file\">טען קובץ</label>\r\n                            <Icon name='file excel outline' />\r\n                        </Button>\r\n                        <Button onClick={() => { this.setState({ openDeleteModel: true }) }} color={'yellow'} disabled={this.state.showUpdatesButtons}\r\n                        >\r\n                            מחק רשימה\r\n                                            <Icon name='file excel outline' />\r\n                        </Button>\r\n                        <Button onClick={() => { this.setState({ openChangeNameModel: true }) }} color={'yellow'} disabled={this.state.showUpdatesButtons}\r\n                        >\r\n                            שנה שם רשימה\r\n                                            <Icon name='file excel outline' />\r\n                        </Button>\r\n\r\n                        {this.state.showUpdatesButtons &&\r\n                            <Button onClick={this.saveChanges} color={'yellow'}\r\n                            >\r\n                                שמירה\r\n                                            <Icon name='save outline' />\r\n                            </Button>\r\n                        }\r\n\r\n                    </div>\r\n\r\n                </section>\r\n                <section>\r\n                    <div>\r\n                        <Segment basic style={{ overflow: 'auto', maxHeight: '65vh' }}>\r\n                            {this.state.error != null &&\r\n                                <Message\r\n                                    error\r\n                                    header=' שגיאה '\r\n                                    content={this.state.error}\r\n                                />\r\n                            }\r\n                            <Table className=\"pepole-table\"\r\n                                color={'yellow'}\r\n                                celled\r\n                                selectable\r\n                                striped\r\n                                singleLine\r\n                                sortable\r\n                            >\r\n                                <Table.Header>\r\n                                    <Table.Row>\r\n                                        {headers.map((header, i) => {\r\n                                            return (\r\n                                                <Table.HeaderCell key={i}\r\n                                                    sorted={this.state.sort_coulmn === header.key ? this.state.sort_direction : null}\r\n                                                    onClick={() => {\r\n                                                        if (this.state.sort_coulmn === header.key) {\r\n                                                            const pepole = this.state.pepole.slice().reverse()\r\n\r\n                                                            this.setState({\r\n                                                                sort_direction: this.state.sort_direction === 'ascending' ? 'descending' : 'ascending',\r\n                                                                pepole: pepole,\r\n                                                                pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                                                                currentPage: 1\r\n                                                            })\r\n                                                        }\r\n                                                        else {\r\n                                                            const pepole = _.sortBy(this.state.pepole, [header.key])\r\n                                                            this.setState({\r\n                                                                sort_coulmn: header.key,\r\n                                                                pepole: pepole,\r\n                                                                pageData: pepole.slice(0, this.state.itemsPerPage),\r\n                                                                sort_direction: 'ascending',\r\n                                                                currentPage: 1\r\n                                                            })\r\n                                                        }\r\n                                                    }}>{header.title}</Table.HeaderCell>\r\n                                            )\r\n                                        })}\r\n                                    </Table.Row>\r\n                                </Table.Header>\r\n                                <Table.Body>\r\n                                    {\r\n                                        pageData.map((row, row_index) => {\r\n                                            return (\r\n                                                <Table.Row key={row.id}\r\n                                                    onContextMenu={(e) => {\r\n                                                        e.preventDefault()\r\n                                                        this.setState({\r\n                                                            contextMenuOpen: true,\r\n                                                            contextRef: this.createContextFromEvent(e),\r\n                                                            selectedRow: row.id\r\n                                                        });\r\n                                                    }}>\r\n                                                    {\r\n                                                        rowKeys.map((cell, index) => {\r\n                                                            if (cell != \"id\" && cell != \"changed\" && cell != \"pepole_list_id\") {\r\n                                                                return (\r\n                                                                    <Table.Cell key={row.id + '_' + index}>\r\n                                                                        <ContentEditable\r\n                                                                            html={row[cell] ? row[cell].toString() : ''}\r\n                                                                            data-column={cell}\r\n                                                                            data-row={row.id}\r\n                                                                            data-new_row={row.added ? true : false}\r\n                                                                            className=\"content-editable\"\r\n                                                                            onChange={this.handleContentEditable}\r\n                                                                        />\r\n                                                                    </Table.Cell>\r\n                                                                )\r\n                                                            }\r\n                                                        })}\r\n                                                </Table.Row>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Table.Body>\r\n                            </Table>\r\n                        </Segment>\r\n                        <Segment basic dir=\"ltr\" textAlign=\"center\">\r\n                            <Pagination\r\n                                activePage={this.state.currentPage}\r\n                                onPageChange={this.switchPage}\r\n                                pageItem={<Button color={'yellow'} size={'large'} />}\r\n                                ellipsisItem={<Button icon=\"ellipsis horizontal\" disabled color={'yellow'} />}\r\n                                firstItem={<Button disabled={this.state.currentPage <= 1}\r\n                                    content=\"ראשון\"\r\n                                    icon=\"angle double left\" labelPosition=\"left\" color={'yellow'}\r\n                                />}\r\n                                lastItem={<Button disabled={this.state.currentPage >= totalPages}\r\n                                    content=\"אחרון\"\r\n                                    icon=\"angle double right\" labelPosition=\"right\" color={'yellow'}\r\n                                />}\r\n                                prevItem={<Button disabled={this.state.activePage <= 1}\r\n                                    content=\"הקודם\" icon=\"left arrow\"\r\n                                    labelPosition=\"left\" color={'yellow'}\r\n                                />}\r\n                                nextItem={<Button disabled={this.state.activePage >= totalPages}\r\n                                    content=\"הבא\" icon=\"right arrow\"\r\n                                    labelPosition=\"right\" color={'yellow'}\r\n                                />}\r\n                                totalPages={totalPages}\r\n                                secondary\r\n                            />\r\n                        </Segment>\r\n                        <Segment basic textAlign=\"center\" color={'yellow'} style={{ margin: \"14px\" }}>\r\n                            {\"הצג\"} {'   '}\r\n                            <Button.Group color=\"yellow\" size={'large'}>\r\n                                <Dropdown compact\r\n                                    button\r\n                                    inline\r\n                                    upward\r\n                                    floating\r\n                                    closeOnChange\r\n                                    openOnFocus\r\n                                    onChange={this.updateItemsPerPage}\r\n                                    value={this.state.itemsPerPage}\r\n                                    options={[\r\n                                        { key: '10', value: 10, text: '10' },\r\n                                        { key: '20', value: 20, text: '20' },\r\n                                        { key: '50', value: 50, text: '50' }]}\r\n                                />\r\n                            </Button.Group>\r\n                            {'   '} {\"שורות לעמוד\"}\r\n                        </Segment>\r\n                    </div>\r\n                </section>\r\n                <Popup\r\n                    basic\r\n                    context={this.state.contextRef}\r\n                    onClose={() => this.setState({ contextMenuOpen: false })}\r\n                    open={this.state.contextMenuOpen}\r\n                >\r\n                    <Menu style={{ width: '100px' }} dir=\"rtl\"\r\n                        items={[\r\n                            { key: '1', content: \"מחק שורה\" },\r\n                        ]}\r\n                        onItemClick={(e, item) => {\r\n                            this.deleteRow();\r\n                        }}\r\n                        secondary\r\n                        vertical\r\n                    />\r\n                </Popup>\r\n                <Modal\r\n                    closeIcon={true} dimmer={'blurring'}\r\n                    onClose={() => {\r\n                        this.setState({ openExportModal: false });\r\n                    }}\r\n                    open={this.state.openExportModal}\r\n                    className='export-modal'\r\n                >\r\n                    <Modal.Header>הוצא את המידע לקובץ</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Button>\r\n                                <CSVLink className=\"btn btn-primary\" filename={`${this.state.exportFileName}.csv`} data={this.state.exportData}\r\n                                    onClick={(event) => {\r\n                                        this.setState({ openExportModal: false })\r\n                                    }}>הורד</CSVLink>\r\n                            </Button>\r\n                            &nbsp; &nbsp; &nbsp;\r\n                            <Input placeholder=\"שם הקובץ\" onChange={(e) => {\r\n                                this.setState({ exportFileName: e.target.value });\r\n                            }}></Input>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                </Modal>\r\n                <Modal closeIcon={true} dimmer={'blurring'}\r\n                    onClose={() => {\r\n                        this.setState({ openDeleteModel: false });\r\n                    }}\r\n                    open={this.state.openDeleteModel}>\r\n                    <Modal.Header>\r\n                        מחיקת רשימה\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                        ? מחיקת הרשימה תמחוק את כל הנתונים השייכים לרשימה <b>\"{pepole_list_selected_name}\"</b>, האם תרצה להמשיך\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            content=\"כן\"\r\n                            labelPosition='right'\r\n                            icon='checkmark'\r\n                            onClick={this.deleteList}\r\n                            positive\r\n                        />\r\n                        <Button color='black' onClick={() => this.setState({ openDeleteModel: false })}>\r\n                            לא\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n                <Modal closeIcon={true} dimmer={'blurring'}\r\n                    onClose={() => {\r\n                        this.setState({ openChangeNameModel: false });\r\n                    }}\r\n                    open={this.state.openChangeNameModel}>\r\n                    <Modal.Header>\r\n                        שינוי שם הרשימה\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Input fluid placeholder=\"הכנס שם חדש - עברית ללא תווים מיוחדים\" onChange={(e) => {\r\n                                this.setState({ new_list_name: e.target.value });\r\n                            }}></Input>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            content=\"שנה\"\r\n                            labelPosition='right'\r\n                            icon='checkmark'\r\n                            onClick={this.changeListName}\r\n                            positive\r\n                        />\r\n                        <Button color='black' onClick={() => this.setState({ openChangeNameModel: false })}>\r\n                            ביטול\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}","D:\\Apps\\makom\\ui\\src\\utils\\constants.js",[],"D:\\Apps\\makom\\ui\\src\\index.js",[],["58","59"],"D:\\Apps\\makom\\ui\\src\\styles.js",[],"D:\\Apps\\makom\\ui\\src\\reportWebVitals.js",[],"D:\\Apps\\makom\\ui\\src\\App.js",["60"],"D:\\Apps\\makom\\ui\\src\\components\\Login.js",["61","62","63"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { CURRENT_VERSION, API } from '../utils/constants';\r\nimport {\r\n    Message,\r\n    Label,\r\n    Button,\r\n    Icon,\r\n    Container,\r\n    Form\r\n} from 'semantic-ui-react';\r\n\r\nexport class LoginPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            error: null,\r\n            login_success: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    login = () => {\r\n        this.setState({ error: null });\r\n        if (!this.state.email || !this.state.password) {\r\n            this.setState({ error: \"חובה להזין מייל משתמש וסיסמה\" });\r\n            return\r\n        }\r\n        let reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        if (reg.test(this.state.email) === false) {\r\n            this.setState({ error: \"אימייל לא תקין\" });\r\n            return\r\n        }\r\n        axios.post(`${API}auth/login`, { email: this.state.email, password: this.state.password })\r\n            .then(response => {\r\n                console.log(response);\r\n                if (response.data) {\r\n                    if (!response.data.success) {\r\n                        this.setState({ error: response.data.error == \"Auth Error\" ? \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" : \"משתמש לא קיים\" })\r\n                    }\r\n                    else {\r\n                        localStorage.setItem('user_data', JSON.stringify(response.data));\r\n                        this.setState({ login_success: true });\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error: \"ארעה שגיאה, במידה והתקלה נמשכת אנא פנה לתמיכה\" });\r\n                console.error('There was an error!', error);\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const env = 'DEV';\r\n        const versionLabel = `VER  ${CURRENT_VERSION} - ${env}`;\r\n        const login_success = this.state.login_success;\r\n\r\n        if (login_success)\r\n            window.location.reload();\r\n        return (\r\n            <div >\r\n                <Label content={versionLabel} attached=\"top right\" size={'large'} />\r\n                <Label attached=\"bottom right\" size={'large'}>\r\n                    Copyright\r\n            <Icon name={'copyright outline'} style={{ marginLeft: '5px', marginRight: '5px' }} />\r\n                    {new Date().getFullYear()} Dovi Perla All Rights Reserved\r\n          </Label>\r\n                <Container textAlign={'center'} text>\r\n                    <Form error={this.state.error != null}>\r\n                        {/* <Image src={LOGO} centered inline circular /> */}\r\n                        <Message floating>\r\n                            <Form.Field>\r\n                                <Form.Input\r\n                                    placeholder=\"מייל\"\r\n                                    icon=\"user\"\r\n                                    iconPosition=\"left\"\r\n                                    onChange={(e, data) => {\r\n                                        this.setState({ email: data.value.trim() });\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <Form.Input\r\n                                    type={'password'}\r\n                                    placeholder=\"סיסמה\"\r\n                                    icon=\"lock\"\r\n                                    iconPosition=\"left\"\r\n                                    onChange={(e, data) => {\r\n                                        this.setState({ password: data.value });\r\n                                    }}\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <Button type=\"submit\"\r\n                                    color={'yellow'}\r\n                                    content={\"כניסה\"}\r\n                                    fluid\r\n                                    size={'massive'}\r\n                                    onClick={this.login}\r\n                                />\r\n                            </Form.Field>\r\n                            {this.state.error != null &&\r\n                                <Message\r\n                                    error\r\n                                    header=' שגיאה '\r\n                                    content={this.state.error}\r\n                                />\r\n                            }\r\n                        </Message>\r\n                    </Form>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}","D:\\Apps\\makom\\ui\\src\\utils\\interceptor.js",["64"],"import axios from 'axios';\r\n\r\nconst axiosInterceptor = axios.interceptors.response.use((response) => {\r\n    return response;\r\n}, (error) => {\r\n    console.log(error);\r\n    if (error) {\r\n        if (error.status == 401 || error.toString().includes(\"401\")) {\r\n            localStorage.removeItem('user_data');\r\n            window.location.reload();\r\n        }\r\n        return Promise.reject(error.message);\r\n    }\r\n});\r\n\r\nexport default axiosInterceptor;",{"ruleId":"65","severity":1,"message":"66","line":24,"column":8,"nodeType":"67","messageId":"68","endLine":24,"endColumn":24},{"ruleId":"69","severity":1,"message":"70","line":131,"column":59,"nodeType":"71","messageId":"72","endLine":131,"endColumn":61},{"ruleId":"69","severity":1,"message":"70","line":136,"column":65,"nodeType":"71","messageId":"72","endLine":136,"endColumn":67},{"ruleId":"69","severity":1,"message":"73","line":156,"column":25,"nodeType":"71","messageId":"72","endLine":156,"endColumn":27},{"ruleId":"69","severity":1,"message":"73","line":156,"column":40,"nodeType":"71","messageId":"72","endLine":156,"endColumn":42},{"ruleId":"69","severity":1,"message":"73","line":156,"column":60,"nodeType":"71","messageId":"72","endLine":156,"endColumn":62},{"ruleId":"69","severity":1,"message":"73","line":172,"column":41,"nodeType":"71","messageId":"72","endLine":172,"endColumn":43},{"ruleId":"69","severity":1,"message":"73","line":187,"column":64,"nodeType":"71","messageId":"72","endLine":187,"endColumn":66},{"ruleId":"69","severity":1,"message":"73","line":245,"column":74,"nodeType":"71","messageId":"72","endLine":245,"endColumn":76},{"ruleId":"69","severity":1,"message":"73","line":246,"column":78,"nodeType":"71","messageId":"72","endLine":246,"endColumn":80},{"ruleId":"74","severity":1,"message":"75","line":293,"column":87,"nodeType":"76","messageId":"72","endLine":293,"endColumn":95},{"ruleId":"69","severity":1,"message":"73","line":342,"column":27,"nodeType":"71","messageId":"72","endLine":342,"endColumn":29},{"ruleId":"69","severity":1,"message":"70","line":344,"column":25,"nodeType":"71","messageId":"72","endLine":344,"endColumn":27},{"ruleId":"69","severity":1,"message":"70","line":355,"column":25,"nodeType":"71","messageId":"72","endLine":355,"endColumn":27},{"ruleId":"69","severity":1,"message":"73","line":357,"column":32,"nodeType":"71","messageId":"72","endLine":357,"endColumn":34},{"ruleId":"69","severity":1,"message":"73","line":364,"column":25,"nodeType":"71","messageId":"72","endLine":364,"endColumn":27},{"ruleId":"77","severity":1,"message":"78","line":671,"column":83,"nodeType":"79","messageId":"80","endLine":671,"endColumn":85},{"ruleId":"69","severity":1,"message":"73","line":672,"column":70,"nodeType":"71","messageId":"72","endLine":672,"endColumn":72},{"ruleId":"69","severity":1,"message":"73","line":672,"column":86,"nodeType":"71","messageId":"72","endLine":672,"endColumn":88},{"ruleId":"69","severity":1,"message":"73","line":672,"column":107,"nodeType":"71","messageId":"72","endLine":672,"endColumn":109},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"65","severity":1,"message":"85","line":2,"column":8,"nodeType":"67","messageId":"68","endLine":2,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":35,"column":26,"nodeType":"88","messageId":"89","endLine":35,"endColumn":27,"suggestions":"90"},{"ruleId":"86","severity":1,"message":"87","line":35,"column":42,"nodeType":"88","messageId":"89","endLine":35,"endColumn":43,"suggestions":"91"},{"ruleId":"69","severity":1,"message":"70","line":45,"column":68,"nodeType":"71","messageId":"72","endLine":45,"endColumn":70},{"ruleId":"69","severity":1,"message":"70","line":8,"column":26,"nodeType":"71","messageId":"72","endLine":8,"endColumn":28},"no-unused-vars","'axiosInterceptor' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-dupe-keys","Duplicate key 'pageData'.","ObjectExpression","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["92"],"no-negated-in-lhs",["93"],"'styles' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["94","95"],["96","97"],"no-global-assign","no-unsafe-negation",{"messageId":"98","fix":"99","desc":"100"},{"messageId":"101","fix":"102","desc":"103"},{"messageId":"98","fix":"104","desc":"100"},{"messageId":"101","fix":"105","desc":"103"},"removeEscape",{"range":"106","text":"107"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"108","text":"109"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"110","text":"107"},{"range":"111","text":"109"},[775,776],"",[775,775],"\\",[791,792],[791,791]]