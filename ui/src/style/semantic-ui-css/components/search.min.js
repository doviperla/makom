!(function (q, A, E, D) {
  A = void 0 !== A && A.Math == Math ? A : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), q.fn.search = function (o) {
    let C,
      x = q(this),
      w = x.selector || '',
      S = (new Date()).getTime(),
      F = [],
      j = o,
      T = typeof j === 'string',
      k = [].slice.call(arguments, 1); return q(this).each(function () {
        let f,
          u = q.isPlainObject(o) ? q.extend(!0, {}, q.fn.search.settings, o) : q.extend({}, q.fn.search.settings),
          g = u.className,
          l = u.metadata,
          d = u.regExp,
          i = u.fields,
          h = u.selector,
          p = u.error,
          e = u.namespace,
          n = `.${e}`,
          t = `${e}-module`,
          m = q(this),
          v = m.find(h.prompt),
          s = m.find(h.searchButton),
          r = m.find(h.results),
          a = m.find(h.result),
          y = (m.find(h.category), this),
          c = m.data(t),
          b = !1,
          R = !1; f = { initialize() { f.verbose('Initializing module'), f.get.settings(), f.determine.searchFields(), f.bind.events(), f.set.type(), f.create.results(), f.instantiate(); },
            instantiate() { f.verbose('Storing instance of module', f), c = f, m.data(t, f); },
            destroy() { f.verbose('Destroying instance'), m.off(n).removeData(t); },
            refresh() { f.debug('Refreshing selector cache'), v = m.find(h.prompt), s = m.find(h.searchButton), m.find(h.category), r = m.find(h.results), a = m.find(h.result); },
            refreshResults() { r = m.find(h.results), a = m.find(h.result); },
            bind: { events() { f.verbose('Binding events to search'), u.automatic && (m.on(f.get.inputEvent() + n, h.prompt, f.event.input), v.attr('autocomplete', 'off')), m.on(`focus${n}`, h.prompt, f.event.focus).on(`blur${n}`, h.prompt, f.event.blur).on(`keydown${n}`, h.prompt, f.handleKeyboard).on(`click${n}`, h.searchButton, f.query).on(`mousedown${n}`, h.results, f.event.result.mousedown).on(`mouseup${n}`, h.results, f.event.result.mouseup).on(`click${n}`, h.result, f.event.result.click); } },
            determine: { searchFields() { o && o.searchFields !== D && (u.searchFields = o.searchFields); } },
            event: { input() { u.searchDelay ? (clearTimeout(f.timer), f.timer = setTimeout(() => { f.is.focused() && f.query(); }, u.searchDelay)) : f.query(); },
              focus() { f.set.focus(), u.searchOnFocus && f.has.minimumCharacters() && f.query(() => { f.can.show() && f.showResults(); }); },
              blur(e) {
                let t = E.activeElement === this,
                  s = function () { f.cancel.query(), f.remove.focus(), f.timer = setTimeout(f.hideResults, u.hideDelay); }; t || (R = !1, f.resultsClicked ? (f.debug('Determining if user action caused search to close'), m.one(`click.close${n}`, h.results, (e) => { f.is.inMessage(e) || b ? v.focus() : (b = !1, f.is.animating() || f.is.hidden() || s()); })) : (f.debug('Input blurred without user action, closing results'), s()));
              },
              result: { mousedown() { f.resultsClicked = !0; },
                mouseup() { f.resultsClicked = !1; },
                click(e) {
                  f.debug('Search result selected'); let t = q(this),
                    s = t.find(h.title).eq(0),
                    n = t.is('a[href]') ? t : t.find('a[href]').eq(0),
                    r = n.attr('href') || !1,
                    i = n.attr('target') || !1,
                    a = (s.html(), s.length > 0 && s.text()),
                    c = f.get.results(),
                    o = t.data(l.result) || f.get.result(a, c); if (q.isFunction(u.onSelect) && !1 === u.onSelect.call(y, o, c)) return f.debug('Custom onSelect callback cancelled default select action'), void (b = !0); f.hideResults(), a && f.set.value(a), r && (f.verbose('Opening search link found in result', n), i == '_blank' || e.ctrlKey ? A.open(r) : A.location.href = r);
                } } },
            handleKeyboard(e) {
              let t,
                s = m.find(h.result),
                n = m.find(h.category),
                r = s.filter(`.${g.active}`),
                i = s.index(r),
                a = s.length,
                c = r.length > 0,
                o = e.which,
                u = 13,
                l = 38,
                d = 40; if (o == 27 && (f.verbose('Escape key pressed, blurring search field'), f.hideResults(), R = !0), f.is.visible()) if (o == u) { if (f.verbose('Enter key pressed, selecting active result'), s.filter(`.${g.active}`).length > 0) return f.event.result.click.call(s.filter(`.${g.active}`), e), e.preventDefault(), !1; } else o == l && c ? (f.verbose('Up key pressed, changing active result'), t = i - 1 < 0 ? i : i - 1, n.removeClass(g.active), s.removeClass(g.active).eq(t).addClass(g.active).closest(n).addClass(g.active), e.preventDefault()) : o == d && (f.verbose('Down key pressed, changing active result'), t = a <= i + 1 ? i : i + 1, n.removeClass(g.active), s.removeClass(g.active).eq(t).addClass(g.active).closest(n).addClass(g.active), e.preventDefault()); else o == u && (f.verbose('Enter key pressed, executing query'), f.query(), f.set.buttonPressed(), v.one('keyup', f.remove.buttonFocus));
            },
            setup: { api(t, s) { const e = { debug: u.debug, on: !1, cache: u.cache, action: 'search', urlData: { query: t }, onSuccess(e) { f.parse.response.call(y, e, t), s(); }, onFailure() { f.displayMessage(p.serverError), s(); }, onAbort(e) {}, onError: f.error }; q.extend(!0, e, u.apiSettings), f.verbose('Setting up API request', e), m.api(e); } },
            can: { useAPI() { return q.fn.api !== D; }, show() { return f.is.focused() && !f.is.visible() && !f.is.empty(); }, transition() { return u.transition && q.fn.transition !== D && m.transition('is supported'); } },
            is: { animating() { return r.hasClass(g.animating); }, hidden() { return r.hasClass(g.hidden); }, inMessage(e) { if (e.target) { const t = q(e.target); return q.contains(E.documentElement, e.target) && t.closest(h.message).length > 0; } }, empty() { return r.html() === ''; }, visible() { return r.filter(':visible').length > 0; }, focused() { return v.filter(':focus').length > 0; } },
            get: { settings() { q.isPlainObject(o) && o.searchFullText && (u.fullTextSearch = o.searchFullText, f.error(u.error.oldSearchSyntax, y)); },
              inputEvent() { const e = v[0]; return e !== D && e.oninput !== D ? 'input' : e !== D && e.onpropertychange !== D ? 'propertychange' : 'keyup'; },
              value() { return v.val(); },
              results() { return m.data(l.results); },
              result(s, e) {
                let n = ['title', 'id'],
                  r = !1; return s = s !== D ? s : f.get.value(), e = e !== D ? e : f.get.results(), u.type === 'category' ? (f.debug('Finding result that matches', s), q.each(e, (e, t) => { if (q.isArray(t.results) && (r = f.search.object(s, t.results, n)[0])) return !1; })) : (f.debug('Finding result in results object', s), r = f.search.object(s, e, n)[0]), r || !1;
              } },
            select: { firstResult() { f.verbose('Selecting first result'), a.first().addClass(g.active); } },
            set: { focus() { m.addClass(g.focus); }, loading() { m.addClass(g.loading); }, value(e) { f.verbose('Setting search input value', e), v.val(e); }, type(e) { e = e || u.type, u.type == 'category' && m.addClass(u.type); }, buttonPressed() { s.addClass(g.pressed); } },
            remove: { loading() { m.removeClass(g.loading); }, focus() { m.removeClass(g.focus); }, buttonPressed() { s.removeClass(g.pressed); } },
            query(e) {
              e = q.isFunction(e) ? e : function () {}; let t = f.get.value(),
                s = f.read.cache(t); e = e || function () {}, f.has.minimumCharacters() ? (s ? (f.debug('Reading result from cache', t), f.save.results(s.results), f.addResults(s.html), f.inject.id(s.results), e()) : (f.debug('Querying for', t), q.isPlainObject(u.source) || q.isArray(u.source) ? (f.search.local(t), e()) : f.can.useAPI() ? f.search.remote(t, e) : (f.error(p.source), e())), u.onSearchQuery.call(y, t)) : f.hideResults();
            },
            search: { local(e) {
              let t,
                s = f.search.object(e, u.content); f.set.loading(), f.save.results(s), f.debug('Returned full local search results', s), u.maxResults > 0 && (f.debug('Using specified max results', s), s = s.slice(0, u.maxResults)), u.type == 'category' && (s = f.create.categoryResults(s)), t = f.generateResults({ results: s }), f.remove.loading(), f.addResults(t), f.inject.id(s), f.write.cache(e, { html: t, results: s });
            },
              remote(e, t) { t = q.isFunction(t) ? t : function () {}, m.api('is loading') && m.api('abort'), f.setup.api(e, t), m.api('query'); },
              object(n, t, e) {
                let i = [],
                  a = [],
                  c = [],
                  s = n.toString().replace(d.escape, '\\$&'),
                  r = new RegExp(d.beginsWith + s, 'i'),
                  o = function (e, t) {
                    let s = q.inArray(t, i) == -1,
                      n = q.inArray(t, c) == -1,
                      r = q.inArray(t, a) == -1; s && n && r && e.push(t);
                  }; return t = t || u.source, e = e !== D ? e : u.searchFields, q.isArray(e) || (e = [e]), t === D || !1 === t ? (f.error(p.source), []) : (q.each(e, (e, s) => { q.each(t, (e, t) => { typeof t[s] === 'string' && (t[s].search(r) !== -1 ? o(i, t) : u.fullTextSearch === 'exact' && f.exactSearch(n, t[s]) ? o(a, t) : u.fullTextSearch == 1 && f.fuzzySearch(n, t[s]) && o(c, t)); }); }), q.merge(a, c), q.merge(i, a), i);
              } },
            exactSearch(e, t) { return e = e.toLowerCase(), (t = t.toLowerCase()).indexOf(e) > -1; },
            fuzzySearch(e, t) {
              let s = t.length,
                n = e.length; if (typeof e !== 'string') return !1; if (e = e.toLowerCase(), t = t.toLowerCase(), s < n) return !1; if (n === s) return e === t; e:for (let r = 0, i = 0; r < n; r++) { for (let a = e.charCodeAt(r); i < s;) if (t.charCodeAt(i++) === a) continue e; return !1; } return !0;
            },
            parse: { response(e, t) { const s = f.generateResults(e); f.verbose('Parsing server response', e), e !== D && t !== D && e[i.results] !== D && (f.addResults(s), f.inject.id(e[i.results]), f.write.cache(t, { html: s, results: e[i.results] }), f.save.results(e[i.results])); } },
            cancel: { query() { f.can.useAPI() && m.api('abort'); } },
            has: { minimumCharacters() { return f.get.value().length >= u.minCharacters; }, results() { return r.length !== 0 && r.html() != ''; } },
            clear: { cache(e) { const t = m.data(l.cache); e ? e && t && t[e] && (f.debug('Removing value from cache', e), delete t[e], m.data(l.cache, t)) : (f.debug('Clearing cache', e), m.removeData(l.cache)); } },
            read: { cache(e) { const t = m.data(l.cache); return !!u.cache && (f.verbose('Checking cache for generated html for query', e), typeof t === 'object' && t[e] !== D && t[e]); } },
            create: { categoryResults(e) { const s = {}; return q.each(e, (e, t) => { t.category && (s[t.category] === D ? (f.verbose('Creating new category of results', t.category), s[t.category] = { name: t.category, results: [t] }) : s[t.category].results.push(t)); }), s; },
              id(e, t) {
                let s,
                  n = e + 1; return t !== D ? (s = String.fromCharCode(97 + t) + n, f.verbose('Creating category result id', s)) : (s = n, f.verbose('Creating result id', s)), s;
              },
              results() { r.length === 0 && (r = q('<div />').addClass(g.results).appendTo(m)); } },
            inject: { result(e, t, s) { f.verbose('Injecting result into results'); const n = s !== D ? r.children().eq(s).children(h.results).first().children(h.result).eq(t) : r.children(h.result).eq(t); f.verbose('Injecting results metadata', n), n.data(l.result, e); },
              id(n) {
                f.debug('Injecting unique ids into results'); let r = 0,
                  i = 0; return u.type === 'category' ? q.each(n, (e, n) => { i = 0, q.each(n.results, (e, t) => { const s = n.results[e]; s.id === D && (s.id = f.create.id(i, r)), f.inject.result(s, i, r), i++; }), r++; }) : q.each(n, (e, t) => { const s = n[e]; s.id === D && (s.id = f.create.id(i)), f.inject.result(s, i), i++; }), n;
              } },
            save: { results(e) { f.verbose('Saving current search results to metadata', e), m.data(l.results, e); } },
            write: { cache(e, t) { const s = m.data(l.cache) !== D ? m.data(l.cache) : {}; u.cache && (f.verbose('Writing generated html to cache', e, t), s[e] = t, m.data(l.cache, s)); } },
            addResults(e) { if (q.isFunction(u.onResultsAdd) && !1 === u.onResultsAdd.call(r, e)) return f.debug('onResultsAdd callback cancelled default action'), !1; e ? (r.html(e), f.refreshResults(), u.selectFirstResult && f.select.firstResult(), f.showResults()) : f.hideResults(() => { r.empty(); }); },
            showResults(e) { e = q.isFunction(e) ? e : function () {}, R || !f.is.visible() && f.has.results() && (f.can.transition() ? (f.debug('Showing results with css animations'), r.transition({ animation: `${u.transition} in`, debug: u.debug, verbose: u.verbose, duration: u.duration, onComplete() { e(); }, queue: !0 })) : (f.debug('Showing results with javascript'), r.stop().fadeIn(u.duration, u.easing)), u.onResultsOpen.call(r)); },
            hideResults(e) { e = q.isFunction(e) ? e : function () {}, f.is.visible() && (f.can.transition() ? (f.debug('Hiding results with css animations'), r.transition({ animation: `${u.transition} out`, debug: u.debug, verbose: u.verbose, duration: u.duration, onComplete() { e(); }, queue: !0 })) : (f.debug('Hiding results with javascript'), r.stop().fadeOut(u.duration, u.easing)), u.onResultsClose.call(r)); },
            generateResults(e) {
              f.debug('Generating html from response', e); let t = u.templates[u.type],
                s = q.isPlainObject(e[i.results]) && !q.isEmptyObject(e[i.results]),
                n = q.isArray(e[i.results]) && e[i.results].length > 0,
                r = ''; return s || n ? (u.maxResults > 0 && (s ? u.type == 'standard' && f.error(p.maxResults) : e[i.results] = e[i.results].slice(0, u.maxResults)), q.isFunction(t) ? r = t(e, i) : f.error(p.noTemplate, !1)) : u.showNoResults && (r = f.displayMessage(p.noResults, 'empty')), u.onResults.call(y, e), r;
            },
            displayMessage(e, t) { return t = t || 'standard', f.debug('Displaying message', e, t), f.addResults(u.templates.message(e, t)), u.templates.message(e, t); },
            setting(e, t) { if (q.isPlainObject(e))q.extend(!0, u, e); else { if (t === D) return u[e]; u[e] = t; } },
            internal(e, t) { if (q.isPlainObject(e))q.extend(!0, f, e); else { if (t === D) return f[e]; f[e] = t; } },
            debug() { !u.silent && u.debug && (u.performance ? f.performance.log(arguments) : (f.debug = Function.prototype.bind.call(console.info, console, `${u.name}:`), f.debug.apply(console, arguments))); },
            verbose() { !u.silent && u.verbose && u.debug && (u.performance ? f.performance.log(arguments) : (f.verbose = Function.prototype.bind.call(console.info, console, `${u.name}:`), f.verbose.apply(console, arguments))); },
            error() { u.silent || (f.error = Function.prototype.bind.call(console.error, console, `${u.name}:`), f.error.apply(console, arguments)); },
            performance: { log(e) {
              let t,
                s; u.performance && (s = (t = (new Date()).getTime()) - (S || t), S = t, F.push({ Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: y, 'Execution Time': s })), clearTimeout(f.performance.timer), f.performance.timer = setTimeout(f.performance.display, 500);
            },
              display() {
                let e = `${u.name}:`,
                  s = 0; S = !1, clearTimeout(f.performance.timer), q.each(F, (e, t) => { s += t['Execution Time']; }), e += ` ${s}ms`, w && (e += ` '${w}'`), x.length > 1 && (e += ` (${x.length})`), (console.group !== D || console.table !== D) && F.length > 0 && (console.groupCollapsed(e), console.table ? console.table(F) : q.each(F, (e, t) => { console.log(`${t.Name}: ${t['Execution Time']}ms`); }), console.groupEnd()), F = [];
              } },
            invoke(n, e, t) {
              let r,
                i,
                s,
                a = c; return e = e || k, t = y || t, typeof n === 'string' && a !== D && (n = n.split(/[\. ]/), r = n.length - 1, q.each(n, (e, t) => { const s = e != r ? t + n[e + 1].charAt(0).toUpperCase() + n[e + 1].slice(1) : n; if (q.isPlainObject(a[s]) && e != r)a = a[s]; else { if (a[s] !== D) return i = a[s], !1; if (!q.isPlainObject(a[t]) || e == r) return a[t] !== D && (i = a[t]), !1; a = a[t]; } })), q.isFunction(i) ? s = i.apply(t, e) : i !== D && (s = i), q.isArray(C) ? C.push(s) : C !== D ? C = [C, s] : s !== D && (C = s), i;
            } }, T ? (c === D && f.initialize(), f.invoke(j)) : (c !== D && c.invoke('destroy'), f.initialize());
      }), C !== D ? C : this;
  }, q.fn.search.settings = { name: 'Search', namespace: 'search', silent: !1, debug: !1, verbose: !1, performance: !0, type: 'standard', minCharacters: 1, selectFirstResult: !1, apiSettings: !1, source: !1, searchOnFocus: !0, searchFields: ['title', 'description'], displayField: '', fullTextSearch: 'exact', automatic: !0, hideDelay: 0, searchDelay: 200, maxResults: 7, cache: !0, showNoResults: !0, transition: 'scale', duration: 200, easing: 'easeOutExpo', onSelect: !1, onResultsAdd: !1, onSearchQuery(e) {}, onResults(e) {}, onResultsOpen() {}, onResultsClose() {}, className: { animating: 'animating', active: 'active', empty: 'empty', focus: 'focus', hidden: 'hidden', loading: 'loading', results: 'results', pressed: 'down' }, error: { source: 'Cannot search. No source used, and Semantic API module was not included', noResults: 'Your search returned no results', logging: 'Error in debug logging, exiting.', noEndpoint: 'No search endpoint was specified', noTemplate: 'A valid template name was not specified.', oldSearchSyntax: 'searchFullText setting has been renamed fullTextSearch for consistency, please adjust your settings.', serverError: 'There was an issue querying the server.', maxResults: 'Results must be an array to use maxResults setting', method: 'The method you called is not defined.' }, metadata: { cache: 'cache', results: 'results', result: 'result' }, regExp: { escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, beginsWith: '(?:s|^)' }, fields: { categories: 'results', categoryName: 'name', categoryResults: 'results', description: 'description', image: 'image', price: 'price', results: 'results', title: 'title', url: 'url', action: 'action', actionText: 'text', actionURL: 'url' }, selector: { prompt: '.prompt', searchButton: '.search.button', results: '.results', message: '.results > .message', category: '.category', result: '.result', title: '.title, .name' }, templates: { escape(e) { const t = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#x27;', '`': '&#x60;' }; return /[&<>"'`]/.test(e) ? e.replace(/[&<>"'`]/g, (e) => t[e]) : e; }, message(e, t) { let s = ''; return e !== D && t !== D && (s += `<div class="message ${t}">`, s += t == 'empty' ? `<div class="header">No Results</div class="header"><div class="description">${e}</div class="description">` : ` <div class="description">${e}</div>`, s += '</div>'), s; }, category(e, s) { let n = ''; q.fn.search.settings.templates.escape; return e[s.categoryResults] !== D && (q.each(e[s.categoryResults], (e, t) => { t[s.results] !== D && t.results.length > 0 && (n += '<div class="category">', t[s.categoryName] !== D && (n += `<div class="name">${t[s.categoryName]}</div>`), n += '<div class="results">', q.each(t.results, (e, t) => { t[s.url] ? n += `<a class="result" href="${t[s.url]}">` : n += '<a class="result">', t[s.image] !== D && (n += `<div class="image"> <img src="${t[s.image]}"></div>`), n += '<div class="content">', t[s.price] !== D && (n += `<div class="price">${t[s.price]}</div>`), t[s.title] !== D && (n += `<div class="title">${t[s.title]}</div>`), t[s.description] !== D && (n += `<div class="description">${t[s.description]}</div>`), n += '</div>', n += '</a>'; }), n += '</div>', n += '</div>'); }), e[s.action] && (n += `<a href="${e[s.action][s.actionURL]}" class="action">${e[s.action][s.actionText]}</a>`), n); }, standard(e, s) { let n = ''; return e[s.results] !== D && (q.each(e[s.results], (e, t) => { t[s.url] ? n += `<a class="result" href="${t[s.url]}">` : n += '<a class="result">', t[s.image] !== D && (n += `<div class="image"> <img src="${t[s.image]}"></div>`), n += '<div class="content">', t[s.price] !== D && (n += `<div class="price">${t[s.price]}</div>`), t[s.title] !== D && (n += `<div class="title">${t[s.title]}</div>`), t[s.description] !== D && (n += `<div class="description">${t[s.description]}</div>`), n += '</div>', n += '</a>'; }), e[s.action] && (n += `<a href="${e[s.action][s.actionURL]}" class="action">${e[s.action][s.actionText]}</a>`), n); } } };
}(jQuery, window, document));
