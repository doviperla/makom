!(function (D, j, R, z) {
  j = void 0 !== j && j.Math == Math ? j : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), D.fn.sidebar = function (C) {
    let k,
      e = D(this),
      w = D(j),
      T = D(R),
      x = D('html'),
      S = D('head'),
      A = e.selector || '',
      F = (new Date()).getTime(),
      O = [],
      P = C,
      E = typeof P === 'string',
      H = [].slice.call(arguments, 1),
      M = j.requestAnimationFrame || j.mozRequestAnimationFrame || j.webkitRequestAnimationFrame || j.msRequestAnimationFrame || function (e) { setTimeout(e, 0); }; return e.each(function () {
        let s,
          a,
          e,
          i,
          l,
          c,
          d = D.isPlainObject(C) ? D.extend(!0, {}, D.fn.sidebar.settings, C) : D.extend({}, D.fn.sidebar.settings),
          n = d.selector,
          r = d.className,
          t = d.namespace,
          o = d.regExp,
          u = d.error,
          f = `.${t}`,
          b = `module-${t}`,
          h = D(this),
          m = D(d.context),
          g = h.children(n.sidebar),
          v = (m.children(n.fixed), m.children(n.pusher)),
          p = this,
          y = h.data(b); c = { initialize() { c.debug('Initializing sidebar', C), c.create.id(), l = c.get.transitionEvent(), d.delaySetup ? M(c.setup.layout) : c.setup.layout(), M(() => { c.setup.cache(); }), c.instantiate(); },
            instantiate() { c.verbose('Storing instance of module', c), y = c, h.data(b, c); },
            create: { id() { e = (`${Math.random().toString(16)}000000000`).substr(2, 8), a = `.${e}`, c.verbose('Creating unique id for element', e); } },
            destroy() { c.verbose('Destroying previous module for', h), h.off(f).removeData(b), c.is.ios() && c.remove.ios(), m.off(a), w.off(a), T.off(a); },
            event: { clickaway(e) {
              let i = v.find(e.target).length > 0 || v.is(e.target),
                n = m.is(e.target); i && (c.verbose('User clicked on dimmed page'), c.hide()), n && (c.verbose('User clicked on dimmable context (scaled out page)'), c.hide());
            },
              touch(e) {},
              containScroll(e) { p.scrollTop <= 0 && (p.scrollTop = 1), p.scrollTop + p.offsetHeight >= p.scrollHeight && (p.scrollTop = p.scrollHeight - p.offsetHeight - 1); },
              scroll(e) { D(e.target).closest(n.sidebar).length === 0 && e.preventDefault(); } },
            bind: { clickaway() { c.verbose('Adding clickaway events to context', m), d.closable && m.on(`click${a}`, c.event.clickaway).on(`touchend${a}`, c.event.clickaway); }, scrollLock() { d.scrollLock && (c.debug('Disabling page scroll'), w.on(`DOMMouseScroll${a}`, c.event.scroll)), c.verbose('Adding events to contain sidebar scroll'), T.on(`touchmove${a}`, c.event.touch), h.on(`scroll${f}`, c.event.containScroll); } },
            unbind: { clickaway() { c.verbose('Removing clickaway events from context', m), m.off(a); }, scrollLock() { c.verbose('Removing scroll lock from page'), T.off(a), w.off(a), h.off(`scroll${f}`); } },
            add: { inlineCSS() {
              let e,
                i = c.cache.width || h.outerWidth(),
                n = c.cache.height || h.outerHeight(),
                t = c.is.rtl(),
                o = c.get.direction(),
                r = { left: i, right: -i, top: n, bottom: -n }; t && (c.verbose('RTL detected, flipping widths'), r.left = -i, r.right = i), e = '<style>', o === 'left' || o === 'right' ? (c.debug('Adding CSS rules for animation distance', i), e += ` .ui.visible.${o}.sidebar ~ .fixed, .ui.visible.${o}.sidebar ~ .pusher {   -webkit-transform: translate3d(${r[o]}px, 0, 0);           transform: translate3d(${r[o]}px, 0, 0); }`) : o !== 'top' && o != 'bottom' || (e += ` .ui.visible.${o}.sidebar ~ .fixed, .ui.visible.${o}.sidebar ~ .pusher {   -webkit-transform: translate3d(0, ${r[o]}px, 0);           transform: translate3d(0, ${r[o]}px, 0); }`), c.is.ie() && (o === 'left' || o === 'right' ? (c.debug('Adding CSS rules for animation distance', i), e += ` body.pushable > .ui.visible.${o}.sidebar ~ .pusher:after {   -webkit-transform: translate3d(${r[o]}px, 0, 0);           transform: translate3d(${r[o]}px, 0, 0); }`) : o !== 'top' && o != 'bottom' || (e += ` body.pushable > .ui.visible.${o}.sidebar ~ .pusher:after {   -webkit-transform: translate3d(0, ${r[o]}px, 0);           transform: translate3d(0, ${r[o]}px, 0); }`), e += ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after, body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {   -webkit-transform: translate3d(0px, 0, 0);           transform: translate3d(0px, 0, 0); }'), s = D(e += '</style>').appendTo(S), c.debug('Adding sizing css to head', s);
            } },
            refresh() { c.verbose('Refreshing selector cache'), m = D(d.context), g = m.children(n.sidebar), v = m.children(n.pusher), m.children(n.fixed), c.clear.cache(); },
            refreshSidebars() { c.verbose('Refreshing other sidebars'), g = m.children(n.sidebar); },
            repaint() { c.verbose('Forcing repaint event'), p.style.display = 'none'; p.offsetHeight; p.scrollTop = p.scrollTop, p.style.display = ''; },
            setup: { cache() { c.cache = { width: h.outerWidth(), height: h.outerHeight(), rtl: h.css('direction') == 'rtl' }; }, layout() { m.children(n.pusher).length === 0 && (c.debug('Adding wrapper element for sidebar'), c.error(u.pusher), v = D('<div class="pusher" />'), m.children().not(n.omitted).not(g).wrapAll(v), c.refresh()), h.nextAll(n.pusher).length !== 0 && h.nextAll(n.pusher)[0] === v[0] || (c.debug('Moved sidebar to correct parent element'), c.error(u.movedSidebar, p), h.detach().prependTo(m), c.refresh()), c.clear.cache(), c.set.pushable(), c.set.direction(); } },
            attachEvents(e, i) { const n = D(e); i = D.isFunction(c[i]) ? c[i] : c.toggle, n.length > 0 ? (c.debug('Attaching sidebar events to element', e, i), n.on(`click${f}`, i)) : c.error(u.notFound, e); },
            show(e) { if (e = D.isFunction(e) ? e : function () {}, c.is.hidden()) { if (c.refreshSidebars(), d.overlay && (c.error(u.overlay), d.transition = 'overlay'), c.refresh(), c.othersActive()) if (c.debug('Other sidebars currently visible'), d.exclusive) { if (d.transition != 'overlay') return void c.hideOthers(c.show); c.hideOthers(); } else d.transition = 'overlay'; c.pushPage(() => { e.call(p), d.onShow.call(p); }), d.onChange.call(p), d.onVisible.call(p); } else c.debug('Sidebar is already visible'); },
            hide(e) { e = D.isFunction(e) ? e : function () {}, (c.is.visible() || c.is.animating()) && (c.debug('Hiding sidebar', e), c.refreshSidebars(), c.pullPage(() => { e.call(p), d.onHidden.call(p); }), d.onChange.call(p), d.onHide.call(p)); },
            othersAnimating() { return g.not(h).filter(`.${r.animating}`).length > 0; },
            othersVisible() { return g.not(h).filter(`.${r.visible}`).length > 0; },
            othersActive() { return c.othersVisible() || c.othersAnimating(); },
            hideOthers(e) {
              let i = g.not(h).filter(`.${r.visible}`),
                n = i.length,
                t = 0; e = e || function () {}, i.sidebar('hide', () => { ++t == n && e(); });
            },
            toggle() { c.verbose('Determining toggled direction'), c.is.hidden() ? c.show() : c.hide(); },
            pushPage(i) {
              let e,
                n,
                t,
                o = c.get.transition(),
                r = o === 'overlay' || c.othersActive() ? h : v; i = D.isFunction(i) ? i : function () {}, d.transition == 'scale down' && c.scrollToTop(), c.set.transition(o), c.repaint(), e = function () { c.bind.clickaway(), c.add.inlineCSS(), c.set.animating(), c.set.visible(); }, n = function () { c.set.dimmed(); }, t = function (e) { e.target == r[0] && (r.off(l + a, t), c.remove.animating(), c.bind.scrollLock(), i.call(p)); }, r.off(l + a), r.on(l + a, t), M(e), d.dimPage && !c.othersVisible() && M(n);
            },
            pullPage(i) {
              let e,
                n,
                t = c.get.transition(),
                o = t == 'overlay' || c.othersActive() ? h : v; i = D.isFunction(i) ? i : function () {}, c.verbose('Removing context push state', c.get.direction()), c.unbind.clickaway(), c.unbind.scrollLock(), e = function () { c.set.transition(t), c.set.animating(), c.remove.visible(), d.dimPage && !c.othersVisible() && v.removeClass(r.dimmed); }, n = function (e) { e.target == o[0] && (o.off(l + a, n), c.remove.animating(), c.remove.transition(), c.remove.inlineCSS(), (t == 'scale down' || d.returnScroll && c.is.mobile()) && c.scrollBack(), i.call(p)); }, o.off(l + a), o.on(l + a, n), M(e);
            },
            scrollToTop() { c.verbose('Scrolling to top of page to avoid animation issues'), i = D(j).scrollTop(), h.scrollTop(0), j.scrollTo(0, 0); },
            scrollBack() { c.verbose('Scrolling back to original page position'), j.scrollTo(0, i); },
            clear: { cache() { c.verbose('Clearing cached dimensions'), c.cache = {}; } },
            set: { ios() { x.addClass(r.ios); }, pushed() { m.addClass(r.pushed); }, pushable() { m.addClass(r.pushable); }, dimmed() { v.addClass(r.dimmed); }, active() { h.addClass(r.active); }, animating() { h.addClass(r.animating); }, transition(e) { e = e || c.get.transition(), h.addClass(e); }, direction(e) { e = e || c.get.direction(), h.addClass(r[e]); }, visible() { h.addClass(r.visible); }, overlay() { h.addClass(r.overlay); } },
            remove: { inlineCSS() { c.debug('Removing inline css styles', s), s && s.length > 0 && s.remove(); }, ios() { x.removeClass(r.ios); }, pushed() { m.removeClass(r.pushed); }, pushable() { m.removeClass(r.pushable); }, active() { h.removeClass(r.active); }, animating() { h.removeClass(r.animating); }, transition(e) { e = e || c.get.transition(), h.removeClass(e); }, direction(e) { e = e || c.get.direction(), h.removeClass(r[e]); }, visible() { h.removeClass(r.visible); }, overlay() { h.removeClass(r.overlay); } },
            get: { direction() { return h.hasClass(r.top) ? r.top : h.hasClass(r.right) ? r.right : h.hasClass(r.bottom) ? r.bottom : r.left; },
              transition() {
                let e,
                  i = c.get.direction(); return e = c.is.mobile() ? d.mobileTransition == 'auto' ? d.defaultTransition.mobile[i] : d.mobileTransition : d.transition == 'auto' ? d.defaultTransition.computer[i] : d.transition, c.verbose('Determined transition', e), e;
              },
              transitionEvent() {
                let e,
                  i = R.createElement('element'),
                  n = { transition: 'transitionend', OTransition: 'oTransitionEnd', MozTransition: 'transitionend', WebkitTransition: 'webkitTransitionEnd' }; for (e in n) if (i.style[e] !== z) return n[e];
              } },
            is: { ie() { return !j.ActiveXObject && 'ActiveXObject' in j || 'ActiveXObject' in j; },
              ios() {
                let e = navigator.userAgent,
                  i = e.match(o.ios),
                  n = e.match(o.mobileChrome); return !(!i || n) && (c.verbose('Browser was found to be iOS', e), !0);
              },
              mobile() { const e = navigator.userAgent; return e.match(o.mobile) ? (c.verbose('Browser was found to be mobile', e), !0) : (c.verbose('Browser is not mobile, using regular transition', e), !1); },
              hidden() { return !c.is.visible(); },
              visible() { return h.hasClass(r.visible); },
              open() { return c.is.visible(); },
              closed() { return c.is.hidden(); },
              vertical() { return h.hasClass(r.top); },
              animating() { return m.hasClass(r.animating); },
              rtl() { return c.cache.rtl === z && (c.cache.rtl = h.css('direction') == 'rtl'), c.cache.rtl; } },
            setting(e, i) { if (c.debug('Changing setting', e, i), D.isPlainObject(e))D.extend(!0, d, e); else { if (i === z) return d[e]; D.isPlainObject(d[e]) ? D.extend(!0, d[e], i) : d[e] = i; } },
            internal(e, i) { if (D.isPlainObject(e))D.extend(!0, c, e); else { if (i === z) return c[e]; c[e] = i; } },
            debug() { !d.silent && d.debug && (d.performance ? c.performance.log(arguments) : (c.debug = Function.prototype.bind.call(console.info, console, `${d.name}:`), c.debug.apply(console, arguments))); },
            verbose() { !d.silent && d.verbose && d.debug && (d.performance ? c.performance.log(arguments) : (c.verbose = Function.prototype.bind.call(console.info, console, `${d.name}:`), c.verbose.apply(console, arguments))); },
            error() { d.silent || (c.error = Function.prototype.bind.call(console.error, console, `${d.name}:`), c.error.apply(console, arguments)); },
            performance: { log(e) {
              let i,
                n; d.performance && (n = (i = (new Date()).getTime()) - (F || i), F = i, O.push({ Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: p, 'Execution Time': n })), clearTimeout(c.performance.timer), c.performance.timer = setTimeout(c.performance.display, 500);
            },
              display() {
                let e = `${d.name}:`,
                  n = 0; F = !1, clearTimeout(c.performance.timer), D.each(O, (e, i) => { n += i['Execution Time']; }), e += ` ${n}ms`, A && (e += ` '${A}'`), (console.group !== z || console.table !== z) && O.length > 0 && (console.groupCollapsed(e), console.table ? console.table(O) : D.each(O, (e, i) => { console.log(`${i.Name}: ${i['Execution Time']}ms`); }), console.groupEnd()), O = [];
              } },
            invoke(t, e, i) {
              let o,
                r,
                n,
                s = y; return e = e || H, i = p || i, typeof t === 'string' && s !== z && (t = t.split(/[\. ]/), o = t.length - 1, D.each(t, (e, i) => { const n = e != o ? i + t[e + 1].charAt(0).toUpperCase() + t[e + 1].slice(1) : t; if (D.isPlainObject(s[n]) && e != o)s = s[n]; else { if (s[n] !== z) return r = s[n], !1; if (!D.isPlainObject(s[i]) || e == o) return s[i] !== z ? r = s[i] : c.error(u.method, t), !1; s = s[i]; } })), D.isFunction(r) ? n = r.apply(i, e) : r !== z && (n = r), D.isArray(k) ? k.push(n) : k !== z ? k = [k, n] : n !== z && (k = n), r;
            } }, E ? (y === z && c.initialize(), c.invoke(P)) : (y !== z && c.invoke('destroy'), c.initialize());
      }), k !== z ? k : this;
  }, D.fn.sidebar.settings = { name: 'Sidebar', namespace: 'sidebar', silent: !1, debug: !1, verbose: !1, performance: !0, transition: 'auto', mobileTransition: 'auto', defaultTransition: { computer: { left: 'uncover', right: 'uncover', top: 'overlay', bottom: 'overlay' }, mobile: { left: 'uncover', right: 'uncover', top: 'overlay', bottom: 'overlay' } }, context: 'body', exclusive: !1, closable: !0, dimPage: !0, scrollLock: !1, returnScroll: !1, delaySetup: !1, duration: 500, onChange() {}, onShow() {}, onHide() {}, onHidden() {}, onVisible() {}, className: { active: 'active', animating: 'animating', dimmed: 'dimmed', ios: 'ios', pushable: 'pushable', pushed: 'pushed', right: 'right', top: 'top', left: 'left', bottom: 'bottom', visible: 'visible' }, selector: { fixed: '.fixed', omitted: 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed', pusher: '.pusher', sidebar: '.ui.sidebar' }, regExp: { ios: /(iPad|iPhone|iPod)/g, mobileChrome: /(CriOS)/g, mobile: /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g }, error: { method: 'The method you called is not defined.', pusher: 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element', movedSidebar: 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag', overlay: 'The overlay setting is no longer supported, use animation: overlay', notFound: 'There were no elements that matched the specified selector' } };
}(jQuery, window, document));
