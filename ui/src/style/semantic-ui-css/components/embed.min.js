!(function (E, U, e, j) {
  U = void 0 !== U && U.Math == Math ? U : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), E.fn.embed = function (h) {
    let b,
      g = E(this),
      v = g.selector || '',
      y = (new Date()).getTime(),
      w = [],
      P = h,
      C = typeof P === 'string',
      D = [].slice.call(arguments, 1); return g.each(function () {
        let c,
          t = E.isPlainObject(h) ? E.extend(!0, {}, E.fn.embed.settings, h) : E.extend({}, E.fn.embed.settings),
          e = t.selector,
          n = t.className,
          r = t.sources,
          l = t.error,
          a = t.metadata,
          o = t.namespace,
          i = t.templates,
          d = `.${o}`,
          u = `module-${o}`,
          s = (E(U), E(this)),
          m = (s.find(e.placeholder), s.find(e.icon), s.find(e.embed)),
          p = this,
          f = s.data(u); c = { initialize() { c.debug('Initializing embed'), c.determine.autoplay(), c.create(), c.bind.events(), c.instantiate(); },
            instantiate() { c.verbose('Storing instance of module', c), f = c, s.data(u, c); },
            destroy() { c.verbose('Destroying previous instance of embed'), c.reset(), s.removeData(u).off(d); },
            refresh() { c.verbose('Refreshing selector cache'), s.find(e.placeholder), s.find(e.icon), m = s.find(e.embed); },
            bind: { events() { c.has.placeholder() && (c.debug('Adding placeholder events'), s.on(`click${d}`, e.placeholder, c.createAndShow).on(`click${d}`, e.icon, c.createAndShow)); } },
            create() { c.get.placeholder() ? c.createPlaceholder() : c.createAndShow(); },
            createPlaceholder(e) {
              let n = c.get.icon(),
                o = c.get.url(); c.generate.embed(o); e = e || c.get.placeholder(), s.html(i.placeholder(e, n)), c.debug('Creating placeholder for embed', e, n);
            },
            createEmbed(e) { c.refresh(), e = e || c.get.url(), m = E('<div/>').addClass(n.embed).html(c.generate.embed(e)).appendTo(s), t.onCreate.call(p, e), c.debug('Creating embed object', m); },
            changeEmbed(e) { m.html(c.generate.embed(e)); },
            createAndShow() { c.createEmbed(), c.show(); },
            change(e, n, o) { c.debug('Changing video to ', e, n, o), s.data(a.source, e).data(a.id, n), o ? s.data(a.url, o) : s.removeData(a.url), c.has.embed() ? c.changeEmbed() : c.create(); },
            reset() { c.debug('Clearing embed and showing placeholder'), c.remove.data(), c.remove.active(), c.remove.embed(), c.showPlaceholder(), t.onReset.call(p); },
            show() { c.debug('Showing embed'), c.set.active(), t.onDisplay.call(p); },
            hide() { c.debug('Hiding embed'), c.showPlaceholder(); },
            showPlaceholder() { c.debug('Showing placeholder image'), c.remove.active(), t.onPlaceholderDisplay.call(p); },
            get: { id() { return t.id || s.data(a.id); }, placeholder() { return t.placeholder || s.data(a.placeholder); }, icon() { return t.icon ? t.icon : s.data(a.icon) !== j ? s.data(a.icon) : c.determine.icon(); }, source(e) { return t.source ? t.source : s.data(a.source) !== j ? s.data(a.source) : c.determine.source(); }, type() { const e = c.get.source(); return r[e] !== j && r[e].type; }, url() { return t.url ? t.url : s.data(a.url) !== j ? s.data(a.url) : c.determine.url(); } },
            determine: { autoplay() { c.should.autoplay() && (t.autoplay = !0); },
              source(o) { let t = !1; return (o = o || c.get.url()) && E.each(r, (e, n) => { if (o.search(n.domain) !== -1) return t = e, !1; }), t; },
              icon() { const e = c.get.source(); return r[e] !== j && r[e].icon; },
              url() {
                let e,
                  n = t.id || s.data(a.id),
                  o = t.source || s.data(a.source); return (e = r[o] !== j && r[o].url.replace('{id}', n)) && s.data(a.url, e), e;
              } },
            set: { active() { s.addClass(n.active); } },
            remove: { data() { s.removeData(a.id).removeData(a.icon).removeData(a.placeholder).removeData(a.source).removeData(a.url); }, active() { s.removeClass(n.active); }, embed() { m.empty(); } },
            encode: { parameters(e) {
              let n,
                o = []; for (n in e)o.push(`${encodeURIComponent(n)}=${encodeURIComponent(e[n])}`); return o.join('&amp;');
            } },
            generate: { embed(e) {
              c.debug('Generating embed html'); let n,
                o,
                t = c.get.source(); return (e = c.get.url(e)) ? (o = c.generate.parameters(t), n = i.iframe(e, o)) : c.error(l.noURL, s), n;
            },
              parameters(e, n) { let o = r[e] && r[e].parameters !== j ? r[e].parameters(t) : {}; return (n = n || t.parameters) && (o = E.extend({}, o, n)), o = t.onEmbed(o), c.encode.parameters(o); } },
            has: { embed() { return m.length > 0; }, placeholder() { return t.placeholder || s.data(a.placeholder); } },
            should: { autoplay() { return t.autoplay === 'auto' ? t.placeholder || s.data(a.placeholder) !== j : t.autoplay; } },
            is: { video() { return c.get.type() == 'video'; } },
            setting(e, n) { if (c.debug('Changing setting', e, n), E.isPlainObject(e))E.extend(!0, t, e); else { if (n === j) return t[e]; E.isPlainObject(t[e]) ? E.extend(!0, t[e], n) : t[e] = n; } },
            internal(e, n) { if (E.isPlainObject(e))E.extend(!0, c, e); else { if (n === j) return c[e]; c[e] = n; } },
            debug() { !t.silent && t.debug && (t.performance ? c.performance.log(arguments) : (c.debug = Function.prototype.bind.call(console.info, console, `${t.name}:`), c.debug.apply(console, arguments))); },
            verbose() { !t.silent && t.verbose && t.debug && (t.performance ? c.performance.log(arguments) : (c.verbose = Function.prototype.bind.call(console.info, console, `${t.name}:`), c.verbose.apply(console, arguments))); },
            error() { t.silent || (c.error = Function.prototype.bind.call(console.error, console, `${t.name}:`), c.error.apply(console, arguments)); },
            performance: { log(e) {
              let n,
                o; t.performance && (o = (n = (new Date()).getTime()) - (y || n), y = n, w.push({ Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: p, 'Execution Time': o })), clearTimeout(c.performance.timer), c.performance.timer = setTimeout(c.performance.display, 500);
            },
              display() {
                let e = `${t.name}:`,
                  o = 0; y = !1, clearTimeout(c.performance.timer), E.each(w, (e, n) => { o += n['Execution Time']; }), e += ` ${o}ms`, v && (e += ` '${v}'`), g.length > 1 && (e += ` (${g.length})`), (console.group !== j || console.table !== j) && w.length > 0 && (console.groupCollapsed(e), console.table ? console.table(w) : E.each(w, (e, n) => { console.log(`${n.Name}: ${n['Execution Time']}ms`); }), console.groupEnd()), w = [];
              } },
            invoke(t, e, n) {
              let r,
                a,
                o,
                i = f; return e = e || D, n = p || n, typeof t === 'string' && i !== j && (t = t.split(/[\. ]/), r = t.length - 1, E.each(t, (e, n) => { const o = e != r ? n + t[e + 1].charAt(0).toUpperCase() + t[e + 1].slice(1) : t; if (E.isPlainObject(i[o]) && e != r)i = i[o]; else { if (i[o] !== j) return a = i[o], !1; if (!E.isPlainObject(i[n]) || e == r) return i[n] !== j ? a = i[n] : c.error(l.method, t), !1; i = i[n]; } })), E.isFunction(a) ? o = a.apply(n, e) : a !== j && (o = a), E.isArray(b) ? b.push(o) : b !== j ? b = [b, o] : o !== j && (b = o), a;
            } }, C ? (f === j && c.initialize(), c.invoke(P)) : (f !== j && f.invoke('destroy'), c.initialize());
      }), b !== j ? b : this;
  }, E.fn.embed.settings = { name: 'Embed', namespace: 'embed', silent: !1, debug: !1, verbose: !1, performance: !0, icon: !1, source: !1, url: !1, id: !1, autoplay: 'auto', color: '#444444', hd: !0, brandedUI: !1, parameters: !1, onDisplay() {}, onPlaceholderDisplay() {}, onReset() {}, onCreate(e) {}, onEmbed(e) { return e; }, metadata: { id: 'id', icon: 'icon', placeholder: 'placeholder', source: 'source', url: 'url' }, error: { noURL: 'No URL specified', method: 'The method you called is not defined' }, className: { active: 'active', embed: 'embed' }, selector: { embed: '.embed', placeholder: '.placeholder', icon: '.icon' }, sources: { youtube: { name: 'youtube', type: 'video', icon: 'video play', domain: 'youtube.com', url: '//www.youtube.com/embed/{id}', parameters(e) { return { autohide: !e.brandedUI, autoplay: e.autoplay, color: e.color || j, hq: e.hd, jsapi: e.api, modestbranding: !e.brandedUI }; } }, vimeo: { name: 'vimeo', type: 'video', icon: 'video play', domain: 'vimeo.com', url: '//player.vimeo.com/video/{id}', parameters(e) { return { api: e.api, autoplay: e.autoplay, byline: e.brandedUI, color: e.color || j, portrait: e.brandedUI, title: e.brandedUI }; } } }, templates: { iframe(e, n) { let o = e; return n && (o += `?${n}`), `<iframe src="${o}" width="100%" height="100%" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>`; }, placeholder(e, n) { let o = ''; return n && (o += `<i class="${n} icon"></i>`), e && (o += `<img class="placeholder" src="${e}">`), o; } }, api: !1, onPause() {}, onPlay() {}, onStop() {} };
}(jQuery, window, document));
