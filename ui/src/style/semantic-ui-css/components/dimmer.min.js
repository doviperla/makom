!(function (x, e, F, T) {
  e = void 0 !== e && e.Math == Math ? e : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), x.fn.dimmer = function (p) {
    let b,
      v = x(this),
      h = (new Date()).getTime(),
      y = [],
      C = p,
      w = typeof C === 'string',
      S = [].slice.call(arguments, 1); return v.each(function () {
        let a,
          i,
          s,
          r = x.isPlainObject(p) ? x.extend(!0, {}, x.fn.dimmer.settings, p) : x.extend({}, x.fn.dimmer.settings),
          n = r.selector,
          e = r.namespace,
          t = r.className,
          m = r.error,
          o = `.${e}`,
          d = `module-${e}`,
          c = v.selector || '',
          l = 'ontouchstart' in F.documentElement ? 'touchstart' : 'click',
          u = x(this),
          f = this,
          g = u.data(d); (s = { preinitialize() { a = s.is.dimmer() ? (i = u.parent(), u) : (i = u, s.has.dimmer() ? r.dimmerName ? i.find(n.dimmer).filter(`.${r.dimmerName}`) : i.find(n.dimmer) : s.create()); },
            initialize() { s.debug('Initializing dimmer', r), s.bind.events(), s.set.dimmable(), s.instantiate(); },
            instantiate() { s.verbose('Storing instance of module', s), g = s, u.data(d, g); },
            destroy() { s.verbose('Destroying previous module', a), s.unbind.events(), s.remove.variation(), i.off(o); },
            bind: { events() { r.on == 'hover' ? i.on(`mouseenter${o}`, s.show).on(`mouseleave${o}`, s.hide) : r.on == 'click' && i.on(l + o, s.toggle), s.is.page() && (s.debug('Setting as a page dimmer', i), s.set.pageDimmer()), s.is.closable() && (s.verbose('Adding dimmer close event', a), i.on(l + o, n.dimmer, s.event.click)); } },
            unbind: { events() { u.removeData(d), i.off(o); } },
            event: { click(e) { s.verbose('Determining if event occured on dimmer', e), (a.find(e.target).length === 0 || x(e.target).is(n.content)) && (s.hide(), e.stopImmediatePropagation()); } },
            addContent(e) { const i = x(e); s.debug('Add content to dimmer', i), i.parent()[0] !== a[0] && i.detach().appendTo(a); },
            create() { const e = x(r.template.dimmer()); return r.dimmerName && (s.debug('Creating named dimmer', r.dimmerName), e.addClass(r.dimmerName)), e.appendTo(i), e; },
            show(e) { e = x.isFunction(e) ? e : function () {}, s.debug('Showing dimmer', a, r), s.set.variation(), s.is.dimmed() && !s.is.animating() || !s.is.enabled() ? s.debug('Dimmer is already shown or disabled') : (s.animate.show(e), r.onShow.call(f), r.onChange.call(f)); },
            hide(e) { e = x.isFunction(e) ? e : function () {}, s.is.dimmed() || s.is.animating() ? (s.debug('Hiding dimmer', a), s.animate.hide(e), r.onHide.call(f), r.onChange.call(f)) : s.debug('Dimmer is not visible'); },
            toggle() { s.verbose('Toggling dimmer visibility', a), s.is.dimmed() ? s.hide() : s.show(); },
            animate: { show(e) { e = x.isFunction(e) ? e : function () {}, r.useCSS && x.fn.transition !== T && a.transition('is supported') ? (r.useFlex ? (s.debug('Using flex dimmer'), s.remove.legacy()) : (s.debug('Using legacy non-flex dimmer'), s.set.legacy()), r.opacity !== 'auto' && s.set.opacity(), a.transition({ displayType: r.useFlex ? 'flex' : 'block', animation: `${r.transition} in`, queue: !1, duration: s.get.duration(), useFailSafe: !0, onStart() { s.set.dimmed(); }, onComplete() { s.set.active(), e(); } })) : (s.verbose('Showing dimmer animation with javascript'), s.set.dimmed(), r.opacity == 'auto' && (r.opacity = 0.8), a.stop().css({ opacity: 0, width: '100%', height: '100%' }).fadeTo(s.get.duration(), r.opacity, () => { a.removeAttr('style'), s.set.active(), e(); })); }, hide(e) { e = x.isFunction(e) ? e : function () {}, r.useCSS && x.fn.transition !== T && a.transition('is supported') ? (s.verbose('Hiding dimmer with css'), a.transition({ displayType: r.useFlex ? 'flex' : 'block', animation: `${r.transition} out`, queue: !1, duration: s.get.duration(), useFailSafe: !0, onStart() { s.remove.dimmed(); }, onComplete() { s.remove.variation(), s.remove.active(), e(); } })) : (s.verbose('Hiding dimmer with javascript'), s.remove.dimmed(), a.stop().fadeOut(s.get.duration(), () => { s.remove.active(), a.removeAttr('style'), e(); })); } },
            get: { dimmer() { return a; }, duration() { return typeof r.duration === 'object' ? s.is.active() ? r.duration.hide : r.duration.show : r.duration; } },
            has: { dimmer() { return r.dimmerName ? u.find(n.dimmer).filter(`.${r.dimmerName}`).length > 0 : u.find(n.dimmer).length > 0; } },
            is: { active() { return a.hasClass(t.active); }, animating() { return a.is(':animated') || a.hasClass(t.animating); }, closable() { return r.closable == 'auto' ? r.on != 'hover' : r.closable; }, dimmer() { return u.hasClass(t.dimmer); }, dimmable() { return u.hasClass(t.dimmable); }, dimmed() { return i.hasClass(t.dimmed); }, disabled() { return i.hasClass(t.disabled); }, enabled() { return !s.is.disabled(); }, page() { return i.is('body'); }, pageDimmer() { return a.hasClass(t.pageDimmer); } },
            can: { show() { return !a.hasClass(t.disabled); } },
            set: { opacity(e) {
              let i = a.css('background-color'),
                n = i.split(','),
                t = n && n.length == 3,
                o = n && n.length == 4; e = r.opacity === 0 ? 0 : r.opacity || e, i = t || o ? (n[3] = `${e})`, n.join(',')) : `rgba(0, 0, 0, ${e})`, s.debug('Setting opacity to', e), a.css('background-color', i);
            },
              legacy() { a.addClass(t.legacy); },
              active() { a.addClass(t.active); },
              dimmable() { i.addClass(t.dimmable); },
              dimmed() { i.addClass(t.dimmed); },
              pageDimmer() { a.addClass(t.pageDimmer); },
              disabled() { a.addClass(t.disabled); },
              variation(e) { (e = e || r.variation) && a.addClass(e); } },
            remove: { active() { a.removeClass(t.active); }, legacy() { a.removeClass(t.legacy); }, dimmed() { i.removeClass(t.dimmed); }, disabled() { a.removeClass(t.disabled); }, variation(e) { (e = e || r.variation) && a.removeClass(e); } },
            setting(e, i) { if (s.debug('Changing setting', e, i), x.isPlainObject(e))x.extend(!0, r, e); else { if (i === T) return r[e]; x.isPlainObject(r[e]) ? x.extend(!0, r[e], i) : r[e] = i; } },
            internal(e, i) { if (x.isPlainObject(e))x.extend(!0, s, e); else { if (i === T) return s[e]; s[e] = i; } },
            debug() { !r.silent && r.debug && (r.performance ? s.performance.log(arguments) : (s.debug = Function.prototype.bind.call(console.info, console, `${r.name}:`), s.debug.apply(console, arguments))); },
            verbose() { !r.silent && r.verbose && r.debug && (r.performance ? s.performance.log(arguments) : (s.verbose = Function.prototype.bind.call(console.info, console, `${r.name}:`), s.verbose.apply(console, arguments))); },
            error() { r.silent || (s.error = Function.prototype.bind.call(console.error, console, `${r.name}:`), s.error.apply(console, arguments)); },
            performance: { log(e) {
              let i,
                n; r.performance && (n = (i = (new Date()).getTime()) - (h || i), h = i, y.push({ Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: f, 'Execution Time': n })), clearTimeout(s.performance.timer), s.performance.timer = setTimeout(s.performance.display, 500);
            },
              display() {
                let e = `${r.name}:`,
                  n = 0; h = !1, clearTimeout(s.performance.timer), x.each(y, (e, i) => { n += i['Execution Time']; }), e += ` ${n}ms`, c && (e += ` '${c}'`), v.length > 1 && (e += ` (${v.length})`), (console.group !== T || console.table !== T) && y.length > 0 && (console.groupCollapsed(e), console.table ? console.table(y) : x.each(y, (e, i) => { console.log(`${i.Name}: ${i['Execution Time']}ms`); }), console.groupEnd()), y = [];
              } },
            invoke(t, e, i) {
              let o,
                a,
                n,
                r = g; return e = e || S, i = f || i, typeof t === 'string' && r !== T && (t = t.split(/[\. ]/), o = t.length - 1, x.each(t, (e, i) => { const n = e != o ? i + t[e + 1].charAt(0).toUpperCase() + t[e + 1].slice(1) : t; if (x.isPlainObject(r[n]) && e != o)r = r[n]; else { if (r[n] !== T) return a = r[n], !1; if (!x.isPlainObject(r[i]) || e == o) return r[i] !== T ? a = r[i] : s.error(m.method, t), !1; r = r[i]; } })), x.isFunction(a) ? n = a.apply(i, e) : a !== T && (n = a), x.isArray(b) ? b.push(n) : b !== T ? b = [b, n] : n !== T && (b = n), a;
            } }).preinitialize(), w ? (g === T && s.initialize(), s.invoke(C)) : (g !== T && g.invoke('destroy'), s.initialize());
      }), b !== T ? b : this;
  }, x.fn.dimmer.settings = { name: 'Dimmer', namespace: 'dimmer', silent: !1, debug: !1, verbose: !1, performance: !0, useFlex: !0, dimmerName: !1, variation: !1, closable: 'auto', useCSS: !0, transition: 'fade', on: !1, opacity: 'auto', duration: { show: 500, hide: 500 }, onChange() {}, onShow() {}, onHide() {}, error: { method: 'The method you called is not defined.' }, className: { active: 'active', animating: 'animating', dimmable: 'dimmable', dimmed: 'dimmed', dimmer: 'dimmer', disabled: 'disabled', hide: 'hide', legacy: 'legacy', pageDimmer: 'page', show: 'show' }, selector: { dimmer: '> .ui.dimmer', content: '.ui.dimmer > .content, .ui.dimmer > .content > .center' }, template: { dimmer() { return x('<div />').attr('class', 'ui dimmer'); } } };
}(jQuery, window, document));
