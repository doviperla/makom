!(function (H, e, T, Z) {
  e = void 0 !== e && e.Math == Math ? e : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), H.fn.shape = function (v) {
    let b,
      x = H(this),
      y = (H('body'), (new Date()).getTime()),
      S = [],
      w = v,
      C = typeof w === 'string',
      W = [].slice.call(arguments, 1),
      F = e.requestAnimationFrame || e.mozRequestAnimationFrame || e.webkitRequestAnimationFrame || e.msRequestAnimationFrame || function (e) { setTimeout(e, 0); }; return x.each(function () {
        let n,
          a,
          o,
          t = x.selector || '',
          s = H.isPlainObject(v) ? H.extend(!0, {}, H.fn.shape.settings, v) : H.extend({}, H.fn.shape.settings),
          e = s.namespace,
          r = s.selector,
          i = s.error,
          l = s.className,
          d = `.${e}`,
          u = `module-${e}`,
          c = H(this),
          g = c.find(r.sides),
          f = c.find(r.side),
          m = !1,
          h = this,
          p = c.data(u); o = { initialize() { o.verbose('Initializing module for', h), o.set.defaultSide(), o.instantiate(); },
            instantiate() { o.verbose('Storing instance of module', o), p = o, c.data(u, p); },
            destroy() { o.verbose('Destroying previous module for', h), c.removeData(u).off(d); },
            refresh() { o.verbose('Refreshing selector cache for', h), c = H(h), g = H(this).find(r.shape), f = H(this).find(r.side); },
            repaint() { o.verbose('Forcing repaint event'); (g[0] || T.createElement('div')).offsetWidth; },
            animate(e, t) { o.verbose('Animating box with properties', e), t = t || function (e) { o.verbose('Executing animation callback'), e !== Z && e.stopPropagation(), o.reset(), o.set.active(); }, s.beforeChange.call(a[0]), o.get.transitionEvent() ? (o.verbose('Starting CSS animation'), c.addClass(l.animating), g.css(e).one(o.get.transitionEvent(), t), o.set.duration(s.duration), F(() => { c.addClass(l.animating), n.addClass(l.hidden); })) : t(); },
            queue(e) { o.debug('Queueing animation of', e), g.one(o.get.transitionEvent(), () => { o.debug('Executing queued animation'), setTimeout(() => { c.shape(e); }, 0); }); },
            reset() { o.verbose('Animating states reset'), c.removeClass(l.animating).attr('style', '').removeAttr('style'), g.attr('style', '').removeAttr('style'), f.attr('style', '').removeAttr('style').removeClass(l.hidden), a.removeClass(l.animating).attr('style', '').removeAttr('style'); },
            is: { complete() { return f.filter(`.${l.active}`)[0] == a[0]; }, animating() { return c.hasClass(l.animating); } },
            set: { defaultSide() { n = c.find(`.${s.className.active}`), a = n.next(r.side).length > 0 ? n.next(r.side) : c.find(r.side).first(), m = !1, o.verbose('Active side set to', n), o.verbose('Next side set to', a); },
              duration(e) { e = typeof (e = e || s.duration) === 'number' ? `${e}ms` : e, o.verbose('Setting animation duration', e), (s.duration || s.duration === 0) && g.add(f).css({ '-webkit-transition-duration': e, '-moz-transition-duration': e, '-ms-transition-duration': e, '-o-transition-duration': e, 'transition-duration': e }); },
              currentStageSize() {
                let e = c.find(`.${s.className.active}`),
                  t = e.outerWidth(!0),
                  i = e.outerHeight(!0); c.css({ width: t, height: i });
              },
              stageSize() {
                let e = c.clone().addClass(l.loading),
                  t = e.find(`.${s.className.active}`),
                  i = m ? e.find(r.side).eq(m) : t.next(r.side).length > 0 ? t.next(r.side) : e.find(r.side).first(),
                  n = s.width == 'next' ? i.outerWidth(!0) : s.width == 'initial' ? c.width() : s.width,
                  a = s.height == 'next' ? i.outerHeight(!0) : s.height == 'initial' ? c.height() : s.height; t.removeClass(l.active), i.addClass(l.active), e.insertAfter(c), e.remove(), s.width != 'auto' && (c.css('width', n + s.jitter), o.verbose('Specifying width during animation', n)), s.height != 'auto' && (c.css('height', a + s.jitter), o.verbose('Specifying height during animation', a));
              },
              nextSide(e) { m = e, a = f.filter(e), m = f.index(a), a.length === 0 && (o.set.defaultSide(), o.error(i.side)), o.verbose('Next side manually set to', a); },
              active() { o.verbose('Setting new side to active', a), f.removeClass(l.active), a.addClass(l.active), s.onChange.call(a[0]), o.set.defaultSide(); } },
            flip: { up() { if (!o.is.complete() || o.is.animating() || s.allowRepeats) if (o.is.animating())o.queue('flip up'); else { o.debug('Flipping up', a); const e = o.get.transform.up(); o.set.stageSize(), o.stage.above(), o.animate(e); } else o.debug('Side already visible', a); }, down() { if (!o.is.complete() || o.is.animating() || s.allowRepeats) if (o.is.animating())o.queue('flip down'); else { o.debug('Flipping down', a); const e = o.get.transform.down(); o.set.stageSize(), o.stage.below(), o.animate(e); } else o.debug('Side already visible', a); }, left() { if (!o.is.complete() || o.is.animating() || s.allowRepeats) if (o.is.animating())o.queue('flip left'); else { o.debug('Flipping left', a); const e = o.get.transform.left(); o.set.stageSize(), o.stage.left(), o.animate(e); } else o.debug('Side already visible', a); }, right() { if (!o.is.complete() || o.is.animating() || s.allowRepeats) if (o.is.animating())o.queue('flip right'); else { o.debug('Flipping right', a); const e = o.get.transform.right(); o.set.stageSize(), o.stage.right(), o.animate(e); } else o.debug('Side already visible', a); }, over() { !o.is.complete() || o.is.animating() || s.allowRepeats ? o.is.animating() ? o.queue('flip over') : (o.debug('Flipping over', a), o.set.stageSize(), o.stage.behind(), o.animate(o.get.transform.over())) : o.debug('Side already visible', a); }, back() { !o.is.complete() || o.is.animating() || s.allowRepeats ? o.is.animating() ? o.queue('flip back') : (o.debug('Flipping back', a), o.set.stageSize(), o.stage.behind(), o.animate(o.get.transform.back())) : o.debug('Side already visible', a); } },
            get: { transform: { up() { return { transform: `translateY(${-(n.outerHeight(!0) - a.outerHeight(!0)) / 2}px) translateZ(${-n.outerHeight(!0) / 2}px) rotateX(-90deg)` }; }, down() { return { transform: `translateY(${-(n.outerHeight(!0) - a.outerHeight(!0)) / 2}px) translateZ(${-n.outerHeight(!0) / 2}px) rotateX(90deg)` }; }, left() { return { transform: `translateX(${-(n.outerWidth(!0) - a.outerWidth(!0)) / 2}px) translateZ(${-n.outerWidth(!0) / 2}px) rotateY(90deg)` }; }, right() { return { transform: `translateX(${-(n.outerWidth(!0) - a.outerWidth(!0)) / 2}px) translateZ(${-n.outerWidth(!0) / 2}px) rotateY(-90deg)` }; }, over() { return { transform: `translateX(${-(n.outerWidth(!0) - a.outerWidth(!0)) / 2}px) rotateY(180deg)` }; }, back() { return { transform: `translateX(${-(n.outerWidth(!0) - a.outerWidth(!0)) / 2}px) rotateY(-180deg)` }; } },
              transitionEvent() {
                let e,
                  t = T.createElement('element'),
                  i = { transition: 'transitionend', OTransition: 'oTransitionEnd', MozTransition: 'transitionend', WebkitTransition: 'webkitTransitionEnd' }; for (e in i) if (t.style[e] !== Z) return i[e];
              },
              nextSide() { return n.next(r.side).length > 0 ? n.next(r.side) : c.find(r.side).first(); } },
            stage: { above() { const e = { origin: (n.outerHeight(!0) - a.outerHeight(!0)) / 2, depth: { active: a.outerHeight(!0) / 2, next: n.outerHeight(!0) / 2 } }; o.verbose('Setting the initial animation position as above', a, e), g.css({ transform: `translateZ(-${e.depth.active}px)` }), n.css({ transform: `rotateY(0deg) translateZ(${e.depth.active}px)` }), a.addClass(l.animating).css({ top: `${e.origin}px`, transform: `rotateX(90deg) translateZ(${e.depth.next}px)` }); },
              below() { const e = { origin: (n.outerHeight(!0) - a.outerHeight(!0)) / 2, depth: { active: a.outerHeight(!0) / 2, next: n.outerHeight(!0) / 2 } }; o.verbose('Setting the initial animation position as below', a, e), g.css({ transform: `translateZ(-${e.depth.active}px)` }), n.css({ transform: `rotateY(0deg) translateZ(${e.depth.active}px)` }), a.addClass(l.animating).css({ top: `${e.origin}px`, transform: `rotateX(-90deg) translateZ(${e.depth.next}px)` }); },
              left() {
                let e = n.outerWidth(!0),
                  t = a.outerWidth(!0),
                  i = { origin: (e - t) / 2, depth: { active: t / 2, next: e / 2 } }; o.verbose('Setting the initial animation position as left', a, i), g.css({ transform: `translateZ(-${i.depth.active}px)` }), n.css({ transform: `rotateY(0deg) translateZ(${i.depth.active}px)` }), a.addClass(l.animating).css({ left: `${i.origin}px`, transform: `rotateY(-90deg) translateZ(${i.depth.next}px)` });
              },
              right() {
                let e = n.outerWidth(!0),
                  t = a.outerWidth(!0),
                  i = { origin: (e - t) / 2, depth: { active: t / 2, next: e / 2 } }; o.verbose('Setting the initial animation position as left', a, i), g.css({ transform: `translateZ(-${i.depth.active}px)` }), n.css({ transform: `rotateY(0deg) translateZ(${i.depth.active}px)` }), a.addClass(l.animating).css({ left: `${i.origin}px`, transform: `rotateY(90deg) translateZ(${i.depth.next}px)` });
              },
              behind() {
                let e = n.outerWidth(!0),
                  t = a.outerWidth(!0),
                  i = { origin: (e - t) / 2, depth: { active: t / 2, next: e / 2 } }; o.verbose('Setting the initial animation position as behind', a, i), n.css({ transform: 'rotateY(0deg)' }), a.addClass(l.animating).css({ left: `${i.origin}px`, transform: 'rotateY(-180deg)' });
              } },
            setting(e, t) { if (o.debug('Changing setting', e, t), H.isPlainObject(e))H.extend(!0, s, e); else { if (t === Z) return s[e]; H.isPlainObject(s[e]) ? H.extend(!0, s[e], t) : s[e] = t; } },
            internal(e, t) { if (H.isPlainObject(e))H.extend(!0, o, e); else { if (t === Z) return o[e]; o[e] = t; } },
            debug() { !s.silent && s.debug && (s.performance ? o.performance.log(arguments) : (o.debug = Function.prototype.bind.call(console.info, console, `${s.name}:`), o.debug.apply(console, arguments))); },
            verbose() { !s.silent && s.verbose && s.debug && (s.performance ? o.performance.log(arguments) : (o.verbose = Function.prototype.bind.call(console.info, console, `${s.name}:`), o.verbose.apply(console, arguments))); },
            error() { s.silent || (o.error = Function.prototype.bind.call(console.error, console, `${s.name}:`), o.error.apply(console, arguments)); },
            performance: { log(e) {
              let t,
                i; s.performance && (i = (t = (new Date()).getTime()) - (y || t), y = t, S.push({ Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: h, 'Execution Time': i })), clearTimeout(o.performance.timer), o.performance.timer = setTimeout(o.performance.display, 500);
            },
              display() {
                let e = `${s.name}:`,
                  i = 0; y = !1, clearTimeout(o.performance.timer), H.each(S, (e, t) => { i += t['Execution Time']; }), e += ` ${i}ms`, t && (e += ` '${t}'`), x.length > 1 && (e += ` (${x.length})`), (console.group !== Z || console.table !== Z) && S.length > 0 && (console.groupCollapsed(e), console.table ? console.table(S) : H.each(S, (e, t) => { console.log(`${t.Name}: ${t['Execution Time']}ms`); }), console.groupEnd()), S = [];
              } },
            invoke(n, e, t) {
              let a,
                o,
                i,
                s = p; return e = e || W, t = h || t, typeof n === 'string' && s !== Z && (n = n.split(/[\. ]/), a = n.length - 1, H.each(n, (e, t) => { const i = e != a ? t + n[e + 1].charAt(0).toUpperCase() + n[e + 1].slice(1) : n; if (H.isPlainObject(s[i]) && e != a)s = s[i]; else { if (s[i] !== Z) return o = s[i], !1; if (!H.isPlainObject(s[t]) || e == a) return s[t] !== Z && (o = s[t]), !1; s = s[t]; } })), H.isFunction(o) ? i = o.apply(t, e) : o !== Z && (i = o), H.isArray(b) ? b.push(i) : b !== Z ? b = [b, i] : i !== Z && (b = i), o;
            } }, C ? (p === Z && o.initialize(), o.invoke(w)) : (p !== Z && p.invoke('destroy'), o.initialize());
      }), b !== Z ? b : this;
  }, H.fn.shape.settings = { name: 'Shape', silent: !1, debug: !1, verbose: !1, jitter: 0, performance: !0, namespace: 'shape', width: 'initial', height: 'initial', beforeChange() {}, onChange() {}, allowRepeats: !1, duration: !1, error: { side: 'You tried to switch to a side that does not exist.', method: 'The method you called is not defined' }, className: { animating: 'animating', hidden: 'hidden', loading: 'loading', active: 'active' }, selector: { sides: '.sides', side: '.side' } };
}(jQuery, window, document));
