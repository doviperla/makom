!(function (j, q, L, N) {
  q = void 0 !== q && q.Math == Math ? q : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), j.fn.modal = function (w) {
    let C,
      e = j(this),
      F = j(q),
      M = j(L),
      x = j('body'),
      H = e.selector || '',
      A = (new Date()).getTime(),
      O = [],
      D = w,
      T = typeof D === 'string',
      z = [].slice.call(arguments, 1),
      E = q.requestAnimationFrame || q.mozRequestAnimationFrame || q.webkitRequestAnimationFrame || q.msRequestAnimationFrame || function (e) { setTimeout(e, 0); }; return e.each(function () {
        let i,
          t,
          e,
          o,
          a,
          n,
          r,
          s,
          c,
          l = j.isPlainObject(w) ? j.extend(!0, {}, j.fn.modal.settings, w) : j.extend({}, j.fn.modal.settings),
          d = l.selector,
          u = l.className,
          m = l.namespace,
          f = l.error,
          g = `.${m}`,
          h = `module-${m}`,
          v = j(this),
          b = j(l.context),
          p = v.find(d.close),
          y = this,
          k = v.data(h),
          S = !1; c = { initialize() { c.verbose('Initializing dimmer', b), c.create.id(), c.create.dimmer(), c.refreshModals(), c.bind.events(), l.observeChanges && c.observeChanges(), c.instantiate(); },
            instantiate() { c.verbose('Storing instance of modal'), k = c, v.data(h, k); },
            create: { dimmer() {
              let e = { debug: l.debug, variation: !l.centered && 'top aligned', dimmerName: 'modals' },
                n = j.extend(!0, e, l.dimmerSettings); j.fn.dimmer !== N ? (c.debug('Creating dimmer'), o = b.dimmer(n), l.detachable ? (c.verbose('Modal is detachable, moving content into dimmer'), o.dimmer('add content', v)) : c.set.undetached(), a = o.dimmer('get dimmer')) : c.error(f.dimmer);
            },
              id() { r = (`${Math.random().toString(16)}000000000`).substr(2, 8), n = `.${r}`, c.verbose('Creating unique id for element', r); } },
            destroy() { c.verbose('Destroying previous modal'), v.removeData(h).off(g), F.off(n), a.off(n), p.off(g), b.dimmer('destroy'); },
            observeChanges() { 'MutationObserver' in q && ((s = new MutationObserver((e) => { c.debug('DOM tree modified, refreshing'), c.refresh(); })).observe(y, { childList: !0, subtree: !0 }), c.debug('Setting up mutation observer', s)); },
            refresh() { c.remove.scrolling(), c.cacheSizes(), c.can.useFlex() || c.set.modalOffset(), c.set.screenHeight(), c.set.type(); },
            refreshModals() { t = v.siblings(d.modal), i = t.add(v); },
            attachEvents(e, n) { const i = j(e); n = j.isFunction(c[n]) ? c[n] : c.toggle, i.length > 0 ? (c.debug('Attaching modal events to element', e, n), i.off(g).on(`click${g}`, n)) : c.error(f.notFound, e); },
            bind: { events() { c.verbose('Attaching events'), v.on(`click${g}`, d.close, c.event.close).on(`click${g}`, d.approve, c.event.approve).on(`click${g}`, d.deny, c.event.deny), F.on(`resize${n}`, c.event.resize); }, scrollLock() { o.get(0).addEventListener('touchmove', c.event.preventScroll, { passive: !1 }); } },
            unbind: { scrollLock() { o.get(0).removeEventListener('touchmove', c.event.preventScroll, { passive: !1 }); } },
            get: { id() { return (`${Math.random().toString(16)}000000000`).substr(2, 8); } },
            event: { approve() { S || !1 === l.onApprove.call(y, j(this)) ? c.verbose('Approve callback returned false cancelling hide') : (S = !0, c.hide(() => { S = !1; })); },
              preventScroll(e) { e.preventDefault(); },
              deny() { S || !1 === l.onDeny.call(y, j(this)) ? c.verbose('Deny callback returned false cancelling hide') : (S = !0, c.hide(() => { S = !1; })); },
              close() { c.hide(); },
              click(e) {
                if (l.closable) {
                  let n = j(e.target).closest(d.modal).length > 0,
                    i = j.contains(L.documentElement, e.target); !n && i && c.is.active() && (c.debug('Dimmer clicked, hiding all modals'), c.remove.clickaway(), l.allowMultiple ? c.hide() : c.hideAll());
                } else c.verbose('Dimmer clicked but closable setting is disabled');
              },
              debounce(e, n) { clearTimeout(c.timer), c.timer = setTimeout(e, n); },
              keyboard(e) { e.which == 27 && (l.closable ? (c.debug('Escape key pressed hiding modal'), c.hide()) : c.debug('Escape key pressed, but closable is set to false'), e.preventDefault()); },
              resize() { o.dimmer('is active') && (c.is.animating() || c.is.active()) && E(c.refresh); } },
            toggle() { c.is.active() || c.is.animating() ? c.hide() : c.show(); },
            show(e) { e = j.isFunction(e) ? e : function () {}, c.refreshModals(), c.set.dimmerSettings(), c.set.dimmerStyles(), c.showModal(e); },
            hide(e) { e = j.isFunction(e) ? e : function () {}, c.refreshModals(), c.hideModal(e); },
            showModal(e) { e = j.isFunction(e) ? e : function () {}, c.is.animating() || !c.is.active() ? (c.showDimmer(), c.cacheSizes(), c.can.useFlex() ? c.remove.legacy() : (c.set.legacy(), c.set.modalOffset(), c.debug('Using non-flex legacy modal positioning.')), c.set.screenHeight(), c.set.type(), c.set.clickaway(), !l.allowMultiple && c.others.active() ? c.hideOthers(c.showModal) : (l.allowMultiple && l.detachable && v.detach().appendTo(a), l.onShow.call(y), l.transition && j.fn.transition !== N && v.transition('is supported') ? (c.debug('Showing modal with css animations'), v.transition({ debug: l.debug, animation: `${l.transition} in`, queue: l.queue, duration: l.duration, useFailSafe: !0, onComplete() { l.onVisible.apply(y), l.keyboardShortcuts && c.add.keyboardShortcuts(), c.save.focus(), c.set.active(), l.autofocus && c.set.autofocus(), e(); } })) : c.error(f.noTransition))) : c.debug('Modal is already visible'); },
            hideModal(e, n) { e = j.isFunction(e) ? e : function () {}, c.debug('Hiding modal'), !1 !== l.onHide.call(y, j(this)) ? (c.is.animating() || c.is.active()) && (l.transition && j.fn.transition !== N && v.transition('is supported') ? (c.remove.active(), v.transition({ debug: l.debug, animation: `${l.transition} out`, queue: l.queue, duration: l.duration, useFailSafe: !0, onStart() { c.others.active() || n || c.hideDimmer(), l.keyboardShortcuts && c.remove.keyboardShortcuts(); }, onComplete() { l.onHidden.call(y), c.remove.dimmerStyles(), c.restore.focus(), e(); } })) : c.error(f.noTransition)) : c.verbose('Hide callback returned false cancelling hide'); },
            showDimmer() { o.dimmer('is animating') || !o.dimmer('is active') ? (c.debug('Showing dimmer'), o.dimmer('show')) : c.debug('Dimmer already visible'); },
            hideDimmer() { o.dimmer('is animating') || o.dimmer('is active') ? (c.unbind.scrollLock(), o.dimmer('hide', () => { c.remove.clickaway(), c.remove.screenHeight(); })) : c.debug('Dimmer is not visible cannot hide'); },
            hideAll(e) { const n = i.filter(`.${u.active}, .${u.animating}`); e = j.isFunction(e) ? e : function () {}, n.length > 0 && (c.debug('Hiding all visible modals'), c.hideDimmer(), n.modal('hide modal', e)); },
            hideOthers(e) { const n = t.filter(`.${u.active}, .${u.animating}`); e = j.isFunction(e) ? e : function () {}, n.length > 0 && (c.debug('Hiding other modals', t), n.modal('hide modal', e, !0)); },
            others: { active() { return t.filter(`.${u.active}`).length > 0; }, animating() { return t.filter(`.${u.animating}`).length > 0; } },
            add: { keyboardShortcuts() { c.verbose('Adding keyboard shortcuts'), M.on(`keyup${g}`, c.event.keyboard); } },
            save: { focus() { j(L.activeElement).closest(v).length > 0 || (e = j(L.activeElement).blur()); } },
            restore: { focus() { e && e.length > 0 && e.focus(); } },
            remove: { active() { v.removeClass(u.active); }, legacy() { v.removeClass(u.legacy); }, clickaway() { a.off(`click${n}`); }, dimmerStyles() { a.removeClass(u.inverted), o.removeClass(u.blurring); }, bodyStyle() { x.attr('style') === '' && (c.verbose('Removing style attribute'), x.removeAttr('style')); }, screenHeight() { c.debug('Removing page height'), x.css('height', ''); }, keyboardShortcuts() { c.verbose('Removing keyboard shortcuts'), M.off(`keyup${g}`); }, scrolling() { o.removeClass(u.scrolling), v.removeClass(u.scrolling); } },
            cacheSizes() {
              v.addClass(u.loading); let e = v.prop('scrollHeight'),
                n = v.outerWidth(),
                i = v.outerHeight(); c.cache !== N && i === 0 || (c.cache = { pageHeight: j(L).outerHeight(), width: n, height: i + l.offset, scrollHeight: e + l.offset, contextHeight: l.context == 'body' ? j(q).height() : o.height() }, c.cache.topOffset = -c.cache.height / 2), v.removeClass(u.loading), c.debug('Caching modal and container sizes', c.cache);
            },
            can: { useFlex() { return l.useFlex == 'auto' ? l.detachable && !c.is.ie() : l.useFlex; },
              fit() {
                let e = c.cache.contextHeight,
                  n = c.cache.contextHeight / 2,
                  i = c.cache.topOffset,
                  t = c.cache.scrollHeight,
                  o = c.cache.height,
                  a = l.padding; return o < t ? n + i + t + a < e : o + 2 * a < e;
              } },
            is: { active() { return v.hasClass(u.active); }, ie() { return !q.ActiveXObject && 'ActiveXObject' in q || 'ActiveXObject' in q; }, animating() { return v.transition('is supported') ? v.transition('is animating') : v.is(':visible'); }, scrolling() { return o.hasClass(u.scrolling); }, modernBrowser() { return !(q.ActiveXObject || 'ActiveXObject' in q); } },
            set: { autofocus() {
              let e = v.find('[tabindex], :input').filter(':visible'),
                n = e.filter('[autofocus]'),
                i = n.length > 0 ? n.first() : e.first(); i.length > 0 && i.focus();
            },
              clickaway() { a.on(`click${n}`, c.event.click); },
              dimmerSettings() {
                if (j.fn.dimmer !== N) {
                  let e = { debug: l.debug, dimmerName: 'modals', closable: 'auto', useFlex: c.can.useFlex(), variation: !l.centered && 'top aligned', duration: { show: l.duration, hide: l.duration } },
                    n = j.extend(!0, e, l.dimmerSettings); l.inverted && (n.variation = n.variation !== N ? `${n.variation} inverted` : 'inverted'), b.dimmer('setting', n);
                } else c.error(f.dimmer);
              },
              dimmerStyles() { l.inverted ? a.addClass(u.inverted) : a.removeClass(u.inverted), l.blurring ? o.addClass(u.blurring) : o.removeClass(u.blurring); },
              modalOffset() {
                let e = c.cache.width,
                  n = c.cache.height; v.css({ marginTop: l.centered && c.can.fit() ? -n / 2 : 0, marginLeft: -e / 2 }), c.verbose('Setting modal offset for legacy mode');
              },
              screenHeight() { c.can.fit() ? x.css('height', '') : (c.debug('Modal is taller than page content, resizing page height'), x.css('height', c.cache.height + 2 * l.padding)); },
              active() { v.addClass(u.active); },
              scrolling() { o.addClass(u.scrolling), v.addClass(u.scrolling), c.unbind.scrollLock(); },
              legacy() { v.addClass(u.legacy); },
              type() { c.can.fit() ? (c.verbose('Modal fits on screen'), c.others.active() || c.others.animating() || (c.remove.scrolling(), c.bind.scrollLock())) : (c.verbose('Modal cannot fit on screen setting to scrolling'), c.set.scrolling()); },
              undetached() { o.addClass(u.undetached); } },
            setting(e, n) { if (c.debug('Changing setting', e, n), j.isPlainObject(e))j.extend(!0, l, e); else { if (n === N) return l[e]; j.isPlainObject(l[e]) ? j.extend(!0, l[e], n) : l[e] = n; } },
            internal(e, n) { if (j.isPlainObject(e))j.extend(!0, c, e); else { if (n === N) return c[e]; c[e] = n; } },
            debug() { !l.silent && l.debug && (l.performance ? c.performance.log(arguments) : (c.debug = Function.prototype.bind.call(console.info, console, `${l.name}:`), c.debug.apply(console, arguments))); },
            verbose() { !l.silent && l.verbose && l.debug && (l.performance ? c.performance.log(arguments) : (c.verbose = Function.prototype.bind.call(console.info, console, `${l.name}:`), c.verbose.apply(console, arguments))); },
            error() { l.silent || (c.error = Function.prototype.bind.call(console.error, console, `${l.name}:`), c.error.apply(console, arguments)); },
            performance: { log(e) {
              let n,
                i; l.performance && (i = (n = (new Date()).getTime()) - (A || n), A = n, O.push({ Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: y, 'Execution Time': i })), clearTimeout(c.performance.timer), c.performance.timer = setTimeout(c.performance.display, 500);
            },
              display() {
                let e = `${l.name}:`,
                  i = 0; A = !1, clearTimeout(c.performance.timer), j.each(O, (e, n) => { i += n['Execution Time']; }), e += ` ${i}ms`, H && (e += ` '${H}'`), (console.group !== N || console.table !== N) && O.length > 0 && (console.groupCollapsed(e), console.table ? console.table(O) : j.each(O, (e, n) => { console.log(`${n.Name}: ${n['Execution Time']}ms`); }), console.groupEnd()), O = [];
              } },
            invoke(t, e, n) {
              let o,
                a,
                i,
                r = k; return e = e || z, n = y || n, typeof t === 'string' && r !== N && (t = t.split(/[\. ]/), o = t.length - 1, j.each(t, (e, n) => { const i = e != o ? n + t[e + 1].charAt(0).toUpperCase() + t[e + 1].slice(1) : t; if (j.isPlainObject(r[i]) && e != o)r = r[i]; else { if (r[i] !== N) return a = r[i], !1; if (!j.isPlainObject(r[n]) || e == o) return r[n] !== N && (a = r[n]), !1; r = r[n]; } })), j.isFunction(a) ? i = a.apply(n, e) : a !== N && (i = a), j.isArray(C) ? C.push(i) : C !== N ? C = [C, i] : i !== N && (C = i), a;
            } }, T ? (k === N && c.initialize(), c.invoke(D)) : (k !== N && k.invoke('destroy'), c.initialize());
      }), C !== N ? C : this;
  }, j.fn.modal.settings = { name: 'Modal', namespace: 'modal', useFlex: 'auto', offset: 0, silent: !1, debug: !1, verbose: !1, performance: !0, observeChanges: !1, allowMultiple: !1, detachable: !0, closable: !0, autofocus: !0, inverted: !1, blurring: !1, centered: !0, dimmerSettings: { closable: !1, useCSS: !0 }, keyboardShortcuts: !0, context: 'body', queue: !1, duration: 500, transition: 'scale', padding: 50, onShow() {}, onVisible() {}, onHide() { return !0; }, onHidden() {}, onApprove() { return !0; }, onDeny() { return !0; }, selector: { close: '> .close', approve: '.actions .positive, .actions .approve, .actions .ok', deny: '.actions .negative, .actions .deny, .actions .cancel', modal: '.ui.modal' }, error: { dimmer: 'UI Dimmer, a required component is not included in this page', method: 'The method you called is not defined.', notFound: 'The element you specified could not be found' }, className: { active: 'active', animating: 'animating', blurring: 'blurring', inverted: 'inverted', legacy: 'legacy', loading: 'loading', scrolling: 'scrolling', undetached: 'undetached' } };
}(jQuery, window, document));
